@inject IAdjustFilters Filters
@using System.Globalization
@if (CurrentObj != null)
{
<div class="row contact-detail">

    <div class="col-2">@CurrentObj.Cticketcode</div>
    <div class="col-2">@CurrentObj.Createtime</div>
    <div class="col-1">@CurrentObj.Createowner</div>
    <div class="col-1">@CurrentObj.Reviewuser</div>
    @*https://stackoverflow.com/questions/59523054/localizing-datetime-and-numbers-in-blazor*@
    <div class="col-2">@CurrentObj.Reviewtime</div>
    <div class="col-1">@CurrentObj.Cstatus</div>



    @if (!DeleteConfirmation)
    {
        @*<div class="col-2">@CurrentObj.Cinvcode</div>
            <div class="col-2">@CurrentObj.Cinvname</div>
            <div class="col-2">@CurrentObj.Iqty</div>*@



        @* <div class="col-3">@CurrentObj.Cspecifications</div>
            <div class="col-3">@CurrentContact.Street</div>
                <div class="col-2">@CurrentContact.City</div>
                <div class="col-1">@CurrentContact.State</div>
                <div class="col-1">@CurrentContact.ZipCode</div>*@
    }
    else
    {
        @*<div class="col-9">
                <DeletePrompt Confirmation="ConfirmAsync" />
            </div>*@
    }

    @*<div class="col-1 text-center">
            <a title="Edit" href="edit/@CurrentObj.Id">
                &nbsp;📝&nbsp;
            </a>
            @if (CanDelete)
            {
                <span @onclick="DeleteRequestAsync"
                      title="Delete" class="clickable red">❌</span>
            }
            else
            {
                <span>&nbsp;</span>
            }
            &nbsp;
        </div>*@


</div>
}
@code {

    private StockCurrentAdjust _currentObj;

    /// <summary>
    /// The <see cref="StockCurrentAdjust"/> being rendered.
    /// </summary>
    [Parameter]
    public StockCurrentAdjust CurrentObj
    {
        get => _currentObj;
        set
        {
            if (value != null && !value.Equals(_currentObj))
            {
                _currentObj = value;
                DeleteConfirmation = false;
            }
        }
    }

    /// <summary>
    /// Event to raise when a contact delete is requested.
    /// </summary>
    [Parameter]
    public EventCallback DeleteContact { get; set; }

    /// <summary>
    /// Overall wrapper of functionality.
    /// </summary>
    [CascadingParameter]
    public GridWrapper Wrapper { get; set; }

    /// <summary>
    /// Returns <c>true</c> if conditions for delete are met.
    /// </summary>
    private bool CanDelete => !DeleteConfirmation &&
    (Wrapper.DeleteRequestId == "" ||
    Wrapper.DeleteRequestId == CurrentObj?.Id);

    /// <summary>
    /// Navigate to view.
    /// </summary>
    private string ViewLink => $"View/{CurrentObj?.Id}";

    /// <summary>
    /// Confirm the delete.
    /// </summary>
    private bool DeleteConfirmation { get; set; }

    /// <summary>
    /// Called based on confirmation.
    /// </summary>
    /// <param name="confirmed"><c>True</c> when confirmed</param>
    /// <returns>A <see cref="Task"/>.</returns>
    private async Task ConfirmAsync(bool confirmed)
    {
        if (confirmed)
        {
            await DeleteAsync();
        }
        else
        {
            DeleteConfirmation = false;
            await Wrapper.DeleteRequested.InvokeAsync("");
        }
    }

    /// <summary>
    /// Set delete to true.
    /// </summary>
    private async Task DeleteRequestAsync()
    {
        if (Wrapper.DeleteRequestId == "")
        {
            DeleteConfirmation = true;
            await Wrapper.DeleteRequested.InvokeAsync(CurrentObj.Id);
        }
    }

    /// <summary>
    /// Deletes the <see cref="Contact"/>.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    private Task DeleteAsync()
    {
        return DeleteContact.InvokeAsync(this);
    }


}