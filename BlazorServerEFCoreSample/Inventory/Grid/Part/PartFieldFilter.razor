@using System.Timers
@inject IJSRuntime JSRuntime
@inject ILocationFilters Filters
@implements IDisposable

@using System.Globalization
<style>
    .grid-container {
        display: inline-grid;
        grid-template-columns: auto auto auto auto auto auto;
        background-color: #2196F3;
        padding: 10px;
    }

    .grid-item {
        background-color: rgba(255, 255, 255, 0.8);
        border: 1px solid rgba(0, 0, 0, 0.8);
        padding: 20px;
        font-size: 30px;
        text-align: center;
    }

    /*https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout*/
    .wrapper {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        /*grid-template-columns: 200px 200px 200px;*/
    }

    .wrapper2 {
        display: grid;
        grid-template-columns: 1fr,400px;
        /*grid-template-columns: 200px 200px 200px;*/
    }

    .lbl {
        border-radius: 4px;
        /*margin-left: 8px;*/
        text-align: right;
        background-color: lightgray;
        /*margin-right:4px;*/
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .btngrid {
        margin-left: 8px;
        /*text-align: left;*/
        /*background-color: lightgray;*/
        /*margin-right:4px;*/
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .txt {
        /*border-radius: 5px;*/
        margin-left: -16px;
        margin-top: 2px;
        margin-bottom: 2px;
    }

    /*https://stackoverflow.com/questions/56545830/how-can-i-make-an-input-element-respect-the-dimensions-of-a-grid-container*/
    input {
        min-width: 0;
    }

    .val {
        background-color: antiquewhite
    }
</style>


<div class="row">
    <div class="col-3 txt ">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1">料號編碼</span>
            </div>
            <input type="text" class="form-control" autofocus @bind="FilterTextF1">
        </div>
    </div>
    <div class="col-3 txt ">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1">料號名稱</span>
            </div>
            <input type="text" class="form-control" autofocus @bind="FilterTextF2">
        </div>
    </div>
    @*<div class="col-3 txt ">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                </div>
                <input disabled="disabled" type="text" class="form-control">
            </div>
        </div>
        <div class="col-3 txt ">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                </div>
                <input  disabled="disabled"  type="text" class="form-control">
            </div>
        </div>*@
</div>


<div class="row">
    <div class=" col-10 ">
        <button class="btn btn-primary " @onclick="UpdateHeading">
            查詢
        </button>

        參數:

        <span class="val"> @FilterTextF1Submit</span>
        <span class="val"> @FilterTextF2Submit</span>
        
        時間:<span class="val">@_dateString</span>


    </div>
</div>




@code {
    string FilterTextF1Submit;
    string FilterTextF2Submit;


    DateTime SubmitTime;
    private string _dateString;
    private async void UpdateHeading(MouseEventArgs e)
    {
        //Console.WriteLine("My debug output.");
        // await JSRuntime.InvokeVoidAsync("alert", "XXXXX");

        //    Filters.FilterColumn = ContactFilterColumnsV4.Phone;
        //    Filters.FilterText = F1.Trim();
        //    Filters.FilterLastName = filterLastName.Trim();

        FilterTextF1Submit = FilterTextF1;
        FilterTextF2Submit = FilterTextF2;

        _dateString = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
        await InvokeAsync(() => Wrapper.FilterChanged.InvokeAsync(this));


    }


    /// <summary>
    /// Get a reference to the global <see cref="GridWrapper"/>.
    /// </summary>
    [CascadingParameter]
    public GridWrapper Wrapper { get; set; }

    /// <summary>
    /// Wait period in (ms) after the user stops typing.
    /// </summary>
    const int DebounceMs = 300;

    /// <summary>
    /// Timer for debounce.
    /// </summary>
    Timer timer;

    /// <summary>
    /// When ready.
    /// </summary>
    protected override void OnInitialized()
    {
        // grab filter
        filterText = Filters.FilterText;

        // grab column to filter on
        selectedColumn = (int)(Filters.FilterColumn);

        base.OnInitialized();
    }

    /// <summary>
    /// Sets selected attribute.
    /// </summary>
    /// <param name="column">The <see cref="ContactFilterColumns"/> being evaluated.</param>
    /// <returns>The proper attribute to select the option.</returns>
    //private IEnumerable<KeyValuePair<string, object>> Selected(ContactFilterColumnsV4 column)
    //{
    //    if ((int)column == selectedColumn)
    //    {
    //        return new[] { new KeyValuePair<string, object>("selected", (object)"selected") };
    //    }
    //    return Enumerable.Empty<KeyValuePair<string, object>>();
    //}

    private int selectedColumn;

    /// <summary>
    /// Column to filter on.
    /// </summary>
    private int SelectedColumn
    {
        get => selectedColumn;
        set
        {
            if (value != selectedColumn)
            {
                selectedColumn = value;
                Filters.FilterColumn = (PartFilterColumns)selectedColumn;
                FilterText = string.Empty;
            }
        }
    }

    //private string F1;
    //private string F2;
    //private string F3;
    //private string F4;
    //private string F5;
    //private string F6;
    //private string F7;
    //private string F8;







    private string filterText;


    private string filterPhone;

    // NOTE by Mark, 2021-01-12
    private string filterLastName;
    private string FilterLastName
    {
        get => filterLastName;
        set
        {
            if (value != filterLastName)
            {
                filterLastName = value;
                // more text means restart the debounce timer
                if (timer != null)
                {
                    timer.Dispose();
                }
                timer = new Timer(DebounceMs);
                timer.Elapsed += NotifyTimerElapsed;
                timer.Enabled = true;
            }
        }
    }

    //private string FilterPhone
    //{
    //    get => filterPhone;
    //    set
    //    {
    //        if (value != filterPhone)
    //        {
    //            filterPhone = value;
    //            CheckPhoneChanged();
    //            // more text means restart the debounce timer
    //            //if (timer != null)
    //            //{
    //            //    timer.Dispose();
    //            //}
    //            //timer = new Timer(DebounceMs);
    //            //timer.Elapsed += NotifyTimerElapsed;
    //            //timer.Enabled = true;
    //        }
    //    }
    //}

    //private async void CheckPhoneChanged()
    //{
    //    //if (Filters.FilterText != filterText)
    //    if (3 == (1 + 2))
    //    {
    //        // notify the controls
    //        Filters.FilterColumn = ContactFilterColumnsV4.Phone;
    //        Filters.FilterText = filterPhone.Trim();
    //        //    Filters.FilterLastName = filterLastName.Trim();


    //        await InvokeAsync(() => Wrapper.FilterChanged.InvokeAsync(this));
    //    }
    //}

    /// <summary>
    /// Text to filter on.
    /// </summary>
    private string FilterText
    {
        get => filterText;
        set
        {
            if (value != filterText)
            {
                filterText = value;
                // more text means restart the debounce timer
                if (timer != null)
                {
                    timer.Dispose();
                }
                timer = new Timer(DebounceMs);
                timer.Elapsed += NotifyTimerElapsed;
                timer.Enabled = true;
            }
        }
    }



    //private string FilterTextF1
    //{
    //    get => F1;
    //    set
    //    {
    //        if (value != F1)
    //        {
    //            F1 = value.Trim();
    //            Filters.FilterTextF1 = F1;
    //        }
    //    }
    //}

    //private string FilterTextF2
    //{
    //    get => F2;
    //    set
    //    {
    //        if (value != F2)
    //        {
    //            F2 = value.Trim();
    //            Filters.FilterTextF2 = F2;
    //        }
    //    }
    //}

    //private string FilterTextF3
    //{
    //    get => F3;
    //    set
    //    {
    //        if (value != F3)
    //        {
    //            F3 = value.Trim();
    //            Filters.FilterTextF3 = F3;
    //        }
    //    }
    //}

    //private string FilterTextF4
    //{
    //    get => Filters.FilterTextF4;
    //    set => Filters.FilterTextF4 = value.Trim();
    //    //{
    //    //    if (value != F3)
    //    //    {
    //    //        F3 = value;
    //    //        Filters.FilterTextF3 = F3;
    //    //    }
    //    //}
    //}
    //private string FilterTextF5
    //{
    //    get => Filters.FilterTextF5;
    //    set => Filters.FilterTextF5 = value.Trim();
    //}
    //private string FilterTextF6
    //{
    //    get => Filters.FilterTextF6;
    //    set => Filters.FilterTextF6 = value.Trim();
    //}
    //private string FilterTextF7
    //{
    //    get => Filters.FilterTextF7;
    //    set => Filters.FilterTextF7 = value.Trim();
    //}

    private string FilterTextF1
    {
        get => Filters.FilterTextF1;
        set => Filters.FilterTextF1 = value.Trim();
    }
    private string FilterTextF2
    {
        get => Filters.FilterTextF2;
        set => Filters.FilterTextF2 = value.Trim();
    }



    /// <summary>
    /// Fired after debounce time.
    /// </summary>
    /// <param name="sender">Timer.</param>
    /// <param name="e">Event args.</param>
    private async void NotifyTimerElapsed(object sender, ElapsedEventArgs e)
    {
        timer.Dispose();
        timer = null;
        if (Filters.FilterText != filterText)
        {
            // notify the controls
            Filters.FilterText = filterText.Trim();
            //    Filters.FilterLastName = filterLastName.Trim();


            await InvokeAsync(() => Wrapper.FilterChanged.InvokeAsync(this));
        }
        //if (Filters.FilterLastName != filterLastName)
        //{
        //    // notify the controls
        //    Filters.FilterLastName = filterLastName.Trim();
        //    //    Filters.FilterLastName = filterLastName.Trim();


        //    await InvokeAsync(() => Wrapper.FilterChanged.InvokeAsync(this));
        //}


    }

    /// <summary>
    /// Disposable pattern - override to dispose any ticking timers.
    /// </summary>
    /// <param name="disposing"><c>True</c> when disposing.</param>
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
            timer = null;
        }
    }
}
