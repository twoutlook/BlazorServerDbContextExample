@using System.Timers
@inject IJSRuntime JSRuntime
@*@implements IDisposable*@

@using System.Globalization
<style>
    .grid-container {
        display: inline-grid;
        grid-template-columns: auto auto auto auto auto auto;
        background-color: #2196F3;
        padding: 10px;
    }

    .grid-item {
        background-color: rgba(255, 255, 255, 0.8);
        border: 1px solid rgba(0, 0, 0, 0.8);
        padding: 20px;
        font-size: 30px;
        text-align: center;
    }

    /*https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout*/
    .wrapper {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        /*grid-template-columns: 200px 200px 200px;*/
    }

    .wrapper2 {
        display: grid;
        grid-template-columns: 1fr,400px;
        /*grid-template-columns: 200px 200px 200px;*/
    }

    .lbl {
        border-radius: 4px;
        /*margin-left: 8px;*/
        text-align: right;
        background-color: lightgray;
        /*margin-right:4px;*/
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .btngrid {
        margin-left: 8px;
        /*text-align: left;*/
        /*background-color: lightgray;*/
        /*margin-right:4px;*/
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .txt {
        /*border-radius: 5px;*/
        margin-left: -16px;
        margin-top: 2px;
        margin-bottom: 2px;
    }

    /*https://stackoverflow.com/questions/56545830/how-can-i-make-an-input-element-respect-the-dimensions-of-a-grid-container*/
    input {
        min-width: 0;
    }

    .val {
        background-color: antiquewhite
    }
</style>


<div class="row">
    <div class="col-3 txt ">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1">  @Filters.FilterContainsColName[0] </span>
            </div>
            <input type="text" class="form-control" autofocus @bind="@Filters.FilterContains[0]">
        </div>
    </div>
    <div class="col-3 txt ">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1">    @Filters.FilterContainsColName[1] </span>
            </div>
            <input type="text" class="form-control" autofocus @bind="@Filters.FilterContains[1]">

        </div>
    </div>
    <div class="col-3 txt ">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1">    @Filters.FilterContainsColName[2] </span>
            </div>
            <input type="text" class="form-control" autofocus @bind="@Filters.FilterContains[2]">

        </div>
    </div>

    <div class="col-3 txt ">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1">    @Filters.FilterContainsColName[3] </span>
            </div>
            <input type="text" class="form-control" autofocus @bind="@Filters.FilterContains[3]">

        </div>
    </div>


</div>
<div class="row" style="margin-top: -12px;">

    <div class="col-3  txt">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1">   排序</span>
            </div>

            <select name="cars" id="cars" @bind="Filters.SortStr">
                @*<option value="WmsTskId_1">WmsTskId 🔼</option>
                    <option value="WmsTskId_2">WmsTskId 🔽</option>*@

                @foreach (var x in fieldMappersSorting)
                {
                    <option value="@x.Id">@x.Name </option>
                }

            </select>


        </div>
    </div>
    <div class="col-3  txt">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1">   每頁筆數</span>
            </div>

            <select name="cars" id="cars" @bind="@BindPageSize">

                @for (int i = 1; i <= 100; i++)
                {
                    <option value=@i>@i </option>
                }

            </select>


        </div>
    </div>

    <div class="col-3  txt">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <button class="btn btn-primary " @onclick="UpdateHeading">
                    查詢
                </button>
            </div>
        </div>

    </div>
</div>


@code {


    //https://stackoverflow.com/questions/49947790/blazor-onchange-event-with-select-dropdown

    public int currentPageSize { get; set; }
    void OnChangeSorting(ChangeEventArgs e)
    {
        Filters.PageHelper.PageSize = int.Parse(e.Value.ToString());
        currentPageSize = Filters.PageHelper.PageSize;
        //     Console.WriteLine("It is definitely: " + selectedString);
    }

    public int BindPageSize
    {
        get => Filters.PageHelper.PageSize;
        set => Filters.PageHelper.PageSize = value;
    }



    private async void UpdateHeading(MouseEventArgs e)
    {





        //        SortCol = "Cticketcode";
        //if (SortCol == null)
        //{
        //    SortCol = "WmsTskId"; //NOTE by Mark, 2021-01-17, 為何 selected 無效?
        //}
        //if (IsAsc12 == null)
        //{
        //    IsAsc12 = "2"; // 這裡習慣反序, 最後發生的在最上面
        //}

        //Filters.SortColumn = sortDict[SortCol];

        //// FOR DEBUG ONLY
        //Filters.SortAscending = IsAsc12 == "1" ? true : false;


        // TODO ,QUICK FIX ONLY
        // ONLY FOR WmsTskId
        // AS  int
        // NEED TO PROVIDE OTHER OPTIONS
        Filters.SortType = AppSortType.TYPE_INT;





        //SortColSubmit = sortNameDict[SortCol];
        //IsAsc12Submit = isAsc12Dict[IsAsc12];



        //FilterC0Submit = FilterC0;
        //FilterC1Submit = FilterC1;
        //FilterC2Submit = FilterC2;

        ////FilterTextF2Submit = FilterTextF2;
        ////FilterTextF3Submit = FilterTextF3;
        ////FilterTextF4Submit = FilterTextF4;

        //FilterDt1Submit = FilterDt1.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
        //FilterDt2Submit = FilterDt2.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
        //   FilterDt2Submit = FilterDt2;
        //  FilterTextF2Submit = FilterTextF2;




        StateHasChanged();

        //_dateString = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
        await InvokeAsync(() => Wrapper.FilterChanged.InvokeAsync(this));


    }


    /// <summary>
    /// Get a reference to the global <see cref="GridWrapper"/>.
    /// </summary>
    [CascadingParameter]
    public GridWrapper Wrapper { get; set; }

    /// <summary>
    /// Wait period in (ms) after the user stops typing.
    /// </summary>
    const int DebounceMs = 300;

    /// <summary>
    /// Timer for debounce.
    /// </summary>
    Timer timer;


    [Parameter]
    public IBaseFiltersV2 Filters { get; set; } // NOTE by Mark, 2021-01-18, 解決排序的一些問題

    [Parameter]
    public List<FieldMapper> FieldMappers { get; set; } // NOTE by Mark, 2021-01-18, 解決排序的一些問題



    List<FieldMapper> fieldMappersSorting;
    /// <summary>
    /// When ready.
    /// </summary>
    protected override void OnInitialized()
    {





        fieldMappersSorting = new();

        foreach (var x in FieldMappers)
        {
            fieldMappersSorting.Add(new FieldMapper(x.Id + "_1", x.Name + "  🔼"));
            fieldMappersSorting.Add(new FieldMapper(x.Id + "_2", x.Name + "  🔽"));
        }

        // TODO, DO IT AS PARAMETER
        //   SelectedColumn = "Cpositioncode_1";



        int k = 0;
        foreach (var x in FieldMappers)
        {
            Filters.FilterContainsCol[k] = x.Id;
            Filters.FilterContainsColName[k] = x.Name;

            k++;
        }


    }





    //private string SelectedColumn
    //{
    //    get => Filters.SortStr;
    //    set
    //    {
    //        if (value != Filters.SortStr)
    //        {
    //            Filters.SortStr = value;

    //        }
    //    }
    //}








    private string filterText;










    private string FilterTextF3
    {
        get => Filters.FilterTextF3;
        set => Filters.FilterTextF3 = value.Trim();
    }

    private string FilterTextF4
    {
        get => Filters.FilterTextF4;
        set => Filters.FilterTextF4 = value.Trim();
    }
    private string FilterTextF5
    {
        get => Filters.FilterTextF5;
        set => Filters.FilterTextF5 = value.Trim();
    }
    private string FilterTextF6
    {
        get => Filters.FilterTextF6;
        set => Filters.FilterTextF6 = value.Trim();
    }
    private string FilterTextF7
    {
        get => Filters.FilterTextF7;
        set => Filters.FilterTextF7 = value.Trim();
    }

    //private string FilterTextF1
    //{
    //    get => Filters.FilterTextF1;
    //    set => Filters.FilterTextF1 = value.Trim();
    //}




    private string FilterC0

    {
        get => Filters.FilterContains[0];
        set => Filters.FilterContains[0] = value.Trim();
    }

    private string FilterC1

    {
        get => Filters.FilterContains[1];
        set => Filters.FilterContains[1] = value.Trim();
    }

    private string FilterC2

    {
        get => Filters.FilterContains[2];
        set => Filters.FilterContains[2] = value.Trim();
    }




    private string FilterTextF2
    {
        get => Filters.FilterTextF2;
        set => Filters.FilterTextF2 = value.Trim();
    }

    private DateTime FilterDt1
    {
        get => Filters.FilterDt1;
        set => Filters.FilterDt1 = value;
    }
    private DateTime FilterDt2
    {
        get => Filters.FilterDt2;
        set => Filters.FilterDt2 = value;
    }




}
