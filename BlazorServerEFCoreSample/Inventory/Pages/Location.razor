@page "/location"
@page "/location/{Page:int}"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<TaiweiContext> DbFactory
@inject NavigationManager Nav
@* ============================ *@
@*   NOTE by Mark, 2021-01-14,  *@
@*   Filters and Adapter        *@
@* ============================ *@
@inject ILocationFilters Filters
@inject LocationGridQueryAdapter QueryAdapter


<h1>儲位查詢</h1>
@*<ul>

        @foreach (var part in partList)
        {
            <li>  @part.Cpartnumber  @part.Cpartname</li>
        }
    </ul>*@



<GridWrapper @ref="Wrapper"
             FilterChanged="ReloadAsync">
    <div class="container-fluid contacts-grid">
        @*<div class="row">

                <div class="col-8"><TextFilterV4 /></div>
            </div>*@

        <LocationFieldFilter />
      
        <div class="row contact-header">
            @*    <div class="col-1">&nbsp; 這裡是 header</div>*@
            <div class="col-2"
                 @onclick="@(async ()=>await ToggleAsync(LocationFilterColumns.Cpositioncode))">
                <LocationSortIndicator Column="@(LocationFilterColumns.Cpositioncode)" />
                &nbsp;儲位編碼
            </div>
            <div class="col-2"
                 @onclick="@(async ()=>await ToggleAsync(LocationFilterColumns.Cposition))">
                <LocationSortIndicator Column="@(LocationFilterColumns.Cposition)" />
                &nbsp;儲位名稱
            </div>
            <div class="col-2"
                 @onclick="@(async ()=>await ToggleAsync(LocationFilterColumns.Cinvcode))">
                <LocationSortIndicator Column="@(LocationFilterColumns.Cinvcode)" />
                &nbsp;物料編碼
            </div>
            <div class="col-2"
                 @onclick="@(async ()=>await ToggleAsync(LocationFilterColumns.Cinvname))">
                <LocationSortIndicator Column="@(LocationFilterColumns.Cinvname)" />
                &nbsp;物料名稱
            </div>
            <div class="col-2" >
                &nbsp;數量
            </div>



            @*<div class="col-3"
                     @onclick="@(async ()=>await ToggleAsync(PartFilterColumns.Cpartname))">
                    <PartSortIndicator Column="@(PartFilterColumns.Cpartname)" />
                    &nbsp;規格
                </div>*@
            @*<div class="col-1">
                    刪改操作
                </div>*@

        </div>
        @if (Filters.Loading || Parts == null)
        {
            <div class="row">
                <div class="col-12 alert alert-info">
                    Loading...
                </div>
            </div>
        }
        @if (Parts != null && Parts.Count == 0)
        {
            <div class="row">
                <div class="col-12 alert alert-warning">
                    No records found.
                </div>
            </div>
        }

        @if (Parts != null)
        {
            @foreach (var x in Parts)
            {
                <LocationRow @key=x CurrentObj="@x" />
            }


        }


        @*NOTE by Mark, 2021-01-12, 分頁*@

        <div style="margin-top:4px;margin-left:-16px">

            <nav >
                <ul class="pagination">
                    <li class="page-item">
                        <a disabled="@(Filters.Loading || !Filters.PageHelper.HasPrev)"
                           class="btn btn-primary @IsDisabled(Filters.PageHelper.HasPrev)"
                           href="@Filters.PageHelper.PrevPageStr">
                            上一頁
                        </a>
                    </li>
                    <li class="page-item"><a class="page-link"> &nbsp;&nbsp;總筆數:@Filters.PageHelper.TotalItemCount &nbsp;&nbsp;頁次: @Filters.PageHelper.Page  &nbsp;&nbsp;總頁數:@Filters.PageHelper.PageCount &nbsp;&nbsp;</a></li>
                    <li class="page-item">
                        <a disabled="@(Filters.Loading || !Filters.PageHelper.HasNext)"
                           class="btn btn-primary @IsDisabled(Filters.PageHelper.HasNext)"
                           href="@Filters.PageHelper.NextPageStr">
                            下一頁
                        </a>
                    </li>
                </ul>
            </nav>

        </div>


    </div>
</GridWrapper>


@code
{
    private string IsDisabled(bool condition) =>
    !Filters.Loading && condition ? "" : "disabled";

    /// <summary>
    /// Keeps track of the last page loaded.
    /// </summary>
    private int _lastPage = -1;

    protected override void OnAfterRender(bool firstRender)
    {
        // Ensure we're on the same, er, right page.
        if (_lastPage < 1)
        {
            //Filters.PageHelper.
            // Filters.PageHelper.BaseUrl
            //            Nav.NavigateTo("/ContactsV4/1");
            Nav.NavigateTo(Filters.PageHelper.BaseUrl + "1");

            return;
        }

        // Normalize the page values.
        if (Filters.PageHelper.PageCount > 0)
        {
            if (Page < 1)
            {
                //Nav.NavigateTo("/ContactsV4/1");
                Nav.NavigateTo(Filters.PageHelper.BaseUrl + "1");
                return;
            }
            if (Page > Filters.PageHelper.PageCount)
            {
                //  Nav.NavigateTo($"/ContactsV4/{Filters.PageHelper.PageCount}");
                Nav.NavigateTo(Filters.PageHelper.BaseUrl + Filters.PageHelper.PageCount);
                return;
            }
        }
        base.OnAfterRender(firstRender);
    }

    protected async override Task OnParametersSetAsync()
    {
        // Make sure the page really chagned.
        if (Page != _lastPage)
        {
            _lastPage = Page;
            await ReloadAsync();
        }
        await base.OnParametersSetAsync();
    }


    //https://docs.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing?view=aspnetcore-5.0
    [Parameter]
    public int Page
    {
        get => Filters.PageHelper.Page;
        set
        {
            Filters.PageHelper.Page = value;
        }
    }

    /// <summary>
    /// A wrapper for grid-related activity (like delete).
    /// </summary>
    private GridWrapper Wrapper { get; set; }



    private Task ToggleAsync(LocationFilterColumns col)
    {
        if (Filters.SortColumn == col)
        {
            Filters.SortAscending = !Filters.SortAscending;
        }
        else
        {
            Filters.SortColumn = col;
        }
        return ReloadAsync();
    }
    private ICollection<StockCurrent> Parts { get; set; }

    private async Task ReloadAsync()
    {
        if (Filters.Loading || Page < 1)
        {
            return;
        }

        Filters.Loading = true;

        if (Wrapper != null)
        {
            Wrapper.DeleteRequestId = "";
        }

        Parts = null;

        using var context = DbFactory.CreateDbContext();

        // run the query to load the current page
        //Contacts = await QueryAdapter.FetchAsync(context.Contacts.AsQueryable());

        // NOTE by Mark, 2021-01-12, 建立多欄位的 filter
        Parts = await QueryAdapter.FetchAsyncV4(context.StockCurrent.AsQueryable());




        // now we're done
        Filters.Loading = false;
    }



    private List<BasePart> partList;

    private int currentCount = 0;

    private void IncrementCount()
    {
        //using var context = new TaiweiContext();
        using var context = DbFactory.CreateDbContext();


        partList = context.BasePart.OrderBy(o => o.Cpartnumber).Take(10).ToList();
    }

    protected override void OnInitialized()
    {
        //base.OnInitialized();


        IncrementCount();
    }
}


