@* === TODO　要調整的地方 ===*@
@page "/A001"
@page "/A001/{Page:int}"

@inject NavigationManager NavMgr
@inject IDbContextFactory<TaiweiContext> DbFactory
@inject NavigationManager Nav
@inject A001Adapter QueryAdapter
@using System;
@using System.Reflection;



@* === TODO　要調整的地方 ===*@
<CompPageTitleA000 Title="理由碼設置" />

<WrapperA @ref="Wrapper"
            FilterChanged="ReloadAsync"
            ToWrite="WriteJson">
    <div class="container-fluid contacts-grid">

        <CompSearchA000 Filters="@QueryAdapter.f" />

        @if (QueryAdapter.f.Loading || Items == null)
        {
            <div class="row">
                <div class="col-12 alert alert-info">
                    Loading...
                </div>
            </div>
        }

        @if (Items != null)
        {
            <CompTableA000 Filters="@QueryAdapter.f"
                          Items="Items"
                          IsShowField="IsShowField"
                          ColumsToExcludeCSV="id" />
            //FieldMapper="QueryAdapter.f.FieldMappers"
        }

        @*NOTE by Mark,2021-01-18, 如果只有一頁, 不顯示分頁*@
        @if (@QueryAdapter.f.PageHelper.PageCount > 1)
        {
            <CompPagingA000 Filters="@QueryAdapter.f" />

        }
    </div>
</WrapperA>


@code
{

    [Parameter]
    public int Page //頁面上的分頁
    {
        get => QueryAdapter.f.PageHelper.Page;
        set
        {
            QueryAdapter.f.PageHelper.Page = value;
        }
    }



    /// <summary>
    /// A wrapper for grid-related activity
    /// </summary>
    //private GridWrapper Wrapper { get; set; }
    private WrapperA Wrapper { get; set; }


    private ICollection<Object> Objs { get; set; }

    // === 要調整的地方 ===
    private List<BaseDocureason> Items { get; set; }

    //  List<FieldMapper> QueryAdapter.f.FieldMappers;
    // 自動化由顯示欄位自動選出預設, 可以 override
    // List<int> FMapper; // NOTE by Mark, 2021-01-21,參數用來決定篩選欄位是要取那些顯示欄位.
    private bool IsShowField = true;

    private string IsDisabled(bool condition) => !QueryAdapter.f.Loading && condition ? "" : "disabled";

    /// <summary>
    /// Keeps track of the last page loaded.
    /// </summary>
    private int _lastPage = -1;

    protected override void OnAfterRender(bool firstRender)
    {
        // Ensure we're on the same, er, right page.
        if (_lastPage < 1)
        {
            Nav.NavigateTo(QueryAdapter.f.PageHelper.BaseUrl + "1");
            return;
        }

        // Normalize the page values.
        if (QueryAdapter.f.PageHelper.PageCount > 0)
        {
            if (Page < 1)
            {
                Nav.NavigateTo(QueryAdapter.f.PageHelper.BaseUrl + "1");
                return;
            }
            if (Page > QueryAdapter.f.PageHelper.PageCount)
            {
                Nav.NavigateTo(QueryAdapter.f.PageHelper.BaseUrl + QueryAdapter.f.PageHelper.PageCount);
                return;
            }
        }
        base.OnAfterRender(firstRender);
    }

    protected async override Task OnParametersSetAsync()
    {
        // Make sure the page really chagned.
        if (Page != _lastPage)
        {
            _lastPage = Page;
            await ReloadAsync();
        }
        await base.OnParametersSetAsync();
    }


    private string PRE = "A001";
    private string ENT = "BaseDocureason";
    //private string PREENT = "A001BaseDocureason";



    private async Task ReloadAsync()
    {
        if (QueryAdapter.f.Loading || Page < 1)
        {
            return;
        }

        QueryAdapter.f.Loading = true;

        Objs = null;
        Items = new();
        using var context = DbFactory.CreateDbContext();


        // === TODO 要調整的地方 ===
        //   Objs = await QueryAdapter.FetchAsyncV997(context, "BaseDocureason");
        Objs = await QueryAdapter.FetchAsyncV997(context, ENT);


        //https://stackoverflow.com/questions/21533506/find-a-specified-generic-dbset-in-a-dbcontext-dynamically-when-i-have-an-entity
        var type = context.Model.FindEntityType(ENT);


        // === TODO 要調整的地方 ===
        foreach (BaseDocureason x in Objs)
        {
            Items.Add(x);
        }



        QueryAdapter.f.Loading = false;
    }

    //private void UpdateItems<T>(ref List<T> Items, ICollection<Object> Objs)
    //{
    //    foreach (T x in Objs)
    //    {
    //        Items.Add(x);
    //    }
    //}


    protected override async Task OnInitializedAsync()
    {
        await ReloadAsync();
    }

    public void ReadJson()
    {
        try
        {
            //同一個ENT 可能有不同的顯示方式,用前綴區分
            var str = System.IO.File.ReadAllText(@"D:\ZZZ\ENT\" + PRE + ENT + ".json");
            var array = JsonConvert.DeserializeObject<List<FieldMapper>>(str);

            QueryAdapter.f.FieldMappers = new();

            foreach (var item in array)
            {
                QueryAdapter.f.FieldMappers.Add(item);
            }

        }
        catch
        {
            Type type = typeof(BaseDocureason);
            PropertyInfo[] properties = type.GetProperties();

            //  var auto = new List<FieldMapper>();
            QueryAdapter.f.FieldMappers = new();
            foreach (PropertyInfo property in properties.Take(5))
            {
                string y = property.Name;

                QueryAdapter.f.FieldMappers.Add(new FieldMapper { Id = y, Name = y, Index = -1 });
            }
            WriteJson();
        }




    }

    public void WriteJson()
    {

        // string json = JsonConvert.SerializeObject(_data.ToArray(), Formatting.Indented);

        //        string json = JsonConvert.SerializeObject(QueryAdapter.f.FieldMappers.ToArray());
        string json = JsonConvert.SerializeObject(QueryAdapter.f.FieldMappers.ToArray(), Formatting.Indented);

        //write string to file
        System.IO.File.WriteAllText(@"D:\ZZZ\ENT\" + PRE + ENT + ".json", json);
    }


    protected override void OnInitialized()
    {

        // === 要調整的地方 ===
        //QueryAdapter.f.PageHelper.BaseUrl = "/A001BaseDocureason/";
        QueryAdapter.f.PageHelper.BaseUrl = "/A001/";

        // TODO, 準備要由 entity 裡選, 用 LIST 給顯示名


        // === 要調整的地方 ===
        Type type = typeof(BaseDocureason);
        PropertyInfo[] properties = type.GetProperties();

        //var auto = new List<FieldMapper>();
        //foreach (PropertyInfo property in properties)
        //{
        //    string y = property.Name;

        //    auto.Add(new FieldMapper { Id = y, Name = y, Index = -1 });
        //}


        //QueryAdapter.f.FieldMappers = GetFieldMapper.Q019V2Outasn();
        //QueryAdapter.f.FieldMappers = auto;


        //var auto2 = new List<FieldMapper>();
        //List<int> plan2 = new List<int> { 3, 1, 2, };
        //foreach (var x in plan2)
        //{
        //    string y = properties[x].Name;
        //    auto2.Add(new FieldMapper { Id = y, Name = y, Index = -1 });
        //}
        //QueryAdapter.f.FieldMappers = auto2;

        var auto3 = new List<FieldMapper>();
        var plan3 = new List<IdName> {
          //  Type    Code    ConfigDesc  ConfigValue Memo    Createtime  Createowner Lastupdatetime  Lastupdateowner TypeMemo    Status
         //   new IdName(0,"id"),
            new IdName(1,"作用域"),
            new IdName(3,"理由碼編號"),
            new IdName(4,"理由碼說明"),
            new IdName(6,"創建人"),
            new IdName(5,"制單日期"),


        };
        foreach (var x in plan3)
        {
            string Id = properties[x.Id].Name;
            auto3.Add(new FieldMapper { Id = Id, Name = x.Name, Index = -1 });
        }

        ReadJson();

        //  QueryAdapter.f.FieldMappers = auto3;
        // IsShowField = false;

        //    string json = JsonConvert.SerializeObject(plan3.ToArray());

        //write string to file
        //   System.IO.File.WriteAllText(@"D:\ZZZ\"+PRE+ENT+".json", json);


        //  System.IO.File.ReadAllText("wwwroot/data/Users.json");
        //str strText=System.IO.File.ReadAllText("wwwroot/data/Users.json");



        //默認取第一個欄位, 正向排序
        QueryAdapter.defaultSortStr = QueryAdapter.f.FieldMappers[0].Id + "_1";




        // NOTE by Mark, 2021-01-23
        // 現在做自動生成,
        // 按顯示的欄位,選 string
        //
        // 指定欄位會映對到篩選的 input text
        // === 要調整的地方 ===
        //        QueryAdapter.f.FMapper = new List<int> { 0, 1, 2, 4 };
        QueryAdapter.f.FMapper = new();


        //Type type = typeof(BaseDocureason);
        //PropertyInfo[] properties = type.GetProperties();
        int k = 0;
        foreach (var x in QueryAdapter.f.FieldMappers)
        {
            //  x.Name
            foreach (var y in typeof(BaseDocureason).GetProperties())
            {
                if (y.Name == x.Id)
                {
                    if (y.PropertyType.Name.ToString() == "String")
                    {
                        //QueryAdapter.f.FMapper.Add(k);
                        QueryAdapter.f.FMapper.Add(k);

                    }

                }

            }
            k++;
        }


    }

}



