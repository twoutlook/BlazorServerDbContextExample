@typeparam TItem
@using System.Reflection

<div style="margin-left: -16px">




    @if (Filters.IsDev && memberInfo != null && memberInfo.Length > 0)
    {

        <table class="gridtable">
            <tr>
                <th>**原始名稱</th>
                <th>自定義顯示</th>
            </tr>

            @foreach (var x in Filters.FieldMappers)
            {

                <tr>
                    <th>@x.Id</th>
                    <td>@x.Name</td>
                </tr>

            }




        </table>

        <hr />


        <table class="gridtable">
            <tr>
                <td></td>
                @foreach (var x in Cols)
                {

                    <td>@x.Id</td>

                }
            </tr>
            @*<tr>
                    @foreach (var x in Cols)
                    {

                        <th>@x.Show</th>

                    }
                </tr>*@
            <tr>
                <th>**</th>
                @foreach (var x in Cols)
                {

                    <th>@x.Name</th>

                }
            </tr>
            @foreach (var item in this.Items.Take(1))
            {
                <tr>
                    <th>1</th>
                    @foreach (var member in memberInfo)
                    {
                        @if (member.MemberType == MemberTypes.Property)
                        {
                            <td>@item.GetType().GetProperty(member.Name).GetValue(item)</td>
                        }
                    }
                </tr>
            }

        </table>
        <hr />
    }


    @if (memberInfo != null && memberInfo.Length > 0)
    {
        <table class="gridtable">

            <thead>
                <tr>
                    <th></th>
                    @foreach (var x in Filters.FieldMappers)
                    {
                        <th> @x.Name</th>
                    }

                </tr>
                @if (Filters.IsDev)
                {
                    <tr>
                        <th>**</th>
                        @foreach (var x in Filters.FieldMappers)
                        {
                            <th> @x.Id</th>
                        }

                    </tr>

                }

            </thead>
            <tbody>

                @foreach (var item in this.Items)
                {
                    RecNum = RecNum + 1;
                    <tr>
                        <th>@RecNum</th>

                        @foreach (var x in Filters.FieldMappers)
                        {
                            <td> @item.GetType().GetProperty(@x.Id).GetValue(item)</td>
                        }


                    </tr>
                }




            </tbody>
        </table>
    }
    else
    {
        <div class="row">
            <div class="col-12 alert alert-warning">
                ( 查詢結果, 沒有任何記錄 )
            </div>
        </div>
    }

</div>

<div style="
    color:darkgrey;
        margin-bottom: 4px;
        margin-left: -16px">


    【參數】

    @foreach (var x in Filters.FilterContains)
    {
        if (x != null)
        {
            <span><span class="val">@x</span>&nbsp;</span>
        }
    }


    【排序】

    <span class="val"> @Filters.SortStr</span>&nbsp;<span class="val"> @Filters.SortStr2</span>

    【時間】<span class="val">@DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture)</span>

    <span style="background-color:pink">@Filters.IsDev @Filters.ErrMsg</span>
</div>


@code { //https://www.youtube.com/watch?v=jsWVIV5ykQM



    [Parameter]
    public IFilters997 Filters { get; set; }

    int RecNum;


    // public int StartReccordNumber { get; set; }

    MemberInfo[] memberInfo;

    List<IdNameShow> Cols;
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        RecNum = Filters.PageHelper.PageSize * (Filters.PageHelper.Page - 1);


        if (Items != null && Items.Count > 0)
        {
            Type typeofItem = this.Items[0].GetType();
            memberInfo = typeofItem.GetMembers();
        }

        Cols = new();

        if (memberInfo != null)
        {


            int k = 0;
            for (int i = 0; i < memberInfo.Count(); i++)
            {
                if (memberInfo[i].MemberType == MemberTypes.Property)//表示欄位
                {
                    //https://stackoverflow.com/questions/3949113/check-if-element-at-position-x-exists-in-the-list
                    var show = "-";
                    //if (Filters.FieldMappers.ElementAtOrDefault(k) != null)//表示之前要顯示的欄位已經有找到了, something is wrong here
                    //{
                    //    // logic
                    //    show = Filters.FieldMappers[k].Name;
                    //}

                    // Cols.Add(new IdNameShow(k, memberInfo[i].Name, show));
                    Cols.Add(new IdNameShow(k, memberInfo[i].Name, show));
                    k++;
                }
            }
        }

        //
        // NOTE by Mark, 2021-01-22
        // 這是核心的地方
        // 根據給定要顯示的欄位及其顯示文字
        // 先反查到在 Entity 其對應的 index
        // 並先記下來
        // 待會在顯示欄位時使用
        foreach (var x in Filters.FieldMappers)
        {
            if (memberInfo != null) // NOTE by Mark, 2021-01-17, quick fix
            {
                for (int i = 0; i < memberInfo.Count(); i++)
                {

                    if (memberInfo[i].MemberType == MemberTypes.Property)
                    {
                        if (memberInfo[i].Name == x.Id)
                        {
                            x.Index = i;
                        }


                    }
                }

            }
            //  x.Index = 999; // for debug
        }
    }

    [Parameter]
    public bool IsShowField { get; set; } = true;


    [Parameter]
    public List<TItem> Items { get; set; }

    //[Parameter]
    //public List<FieldMapper> FieldMapper { get; set; }


    [Parameter]
    public string ColumsToExcludeCSV { get; set; }

    [Parameter]
    public string CssClass { get; set; }





}
