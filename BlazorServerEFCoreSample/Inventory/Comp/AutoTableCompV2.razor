@typeparam TItem
@using System.Reflection



@if (memberInfo != null && memberInfo.Length > 0)
{
    <table class="@($"table {this.CssClass}")">
        <thead>
            <tr>
                @foreach (var x in FieldMapper)
                {
                    <td> @x.Name</td>
                }

            </tr>
            @if (IsShowField)
            {
                <tr>
                    @foreach (var x in FieldMapper)
                    {
                        <td> @x.Id</td>
                    }

                </tr>

            }
            @*<tr>
            @for ( int i=0; i< memberInfo.Count(); i++)
            {

                @if (memberInfo[i].MemberType == MemberTypes.Property && !ColumsToExcludeCSV.Contains(memberInfo[i].Name, StringComparison.OrdinalIgnoreCase))
                {
            <th>@memberInfo[i].Name</th>
                }
            }
        </tr>*@
        </thead>
        <tbody>

            @foreach (var item in this.Items)
            {
            <tr>
                @foreach (var x in FieldMapper)
                {
                <td> @item.GetType().GetProperty(@x.Id).GetValue(item)</td>
                }


            </tr>
            }
            
            
   

            </tbody>
    </table>
}


@code { //https://www.youtube.com/watch?v=jsWVIV5ykQM

    MemberInfo[] memberInfo;
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Items != null && Items.Count > 0)
        {
            Type typeofItem = this.Items[0].GetType();
            memberInfo = typeofItem.GetMembers();
        }


        foreach (var x in FieldMapper)
        {
            for (int i = 0; i < memberInfo.Count(); i++)
            {

                if (memberInfo[i].MemberType == MemberTypes.Property )
                {
                    if ( memberInfo[i].Name == x.Id)
                    {
                        x.Index = i;
                    }


                }
            }
            //  x.Index = 999;
        }
    }

    [Parameter]
    public bool IsShowField { get; set; } = false;


    [Parameter]
    public List<TItem> Items { get; set; }

    [Parameter]
    public List<FieldMapper> FieldMapper { get; set; }


    [Parameter]
    public string ColumsToExcludeCSV { get; set; }

    [Parameter]
    public string CssClass { get; set; }

}
