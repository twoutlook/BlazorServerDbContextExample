// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using T0002.Models;

#nullable disable

namespace T0002.Data
{
    public partial class TaiweiContext : DbContext
    {
        //public TaiweiContext()
        //{
        //}

        public TaiweiContext(DbContextOptions<TaiweiContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Allocate> Allocate { get; set; }
        public virtual DbSet<AllocateD> AllocateD { get; set; }
        public virtual DbSet<AllocateDBn> AllocateDBn { get; set; }
        public virtual DbSet<AllocateDHis> AllocateDHis { get; set; }
        public virtual DbSet<AllocateDMerge> AllocateDMerge { get; set; }
        public virtual DbSet<AllocateDSn> AllocateDSn { get; set; }
        public virtual DbSet<AllocateHis> AllocateHis { get; set; }
        public virtual DbSet<AllocateLineSn> AllocateLineSn { get; set; }
        public virtual DbSet<AllocateListout> AllocateListout { get; set; }
        public virtual DbSet<AllocateScanQty> AllocateScanQty { get; set; }
        public virtual DbSet<AsrsShowinfo> AsrsShowinfo { get; set; }
        public virtual DbSet<Bar> Bar { get; set; }
        public virtual DbSet<BarCarton> BarCarton { get; set; }
        public virtual DbSet<BarCartonD> BarCartonD { get; set; }
        public virtual DbSet<BarCartonDHis> BarCartonDHis { get; set; }
        public virtual DbSet<BarCartonM> BarCartonM { get; set; }
        public virtual DbSet<BarCartonMHis> BarCartonMHis { get; set; }
        public virtual DbSet<BarPack> BarPack { get; set; }
        public virtual DbSet<BarPallet> BarPallet { get; set; }
        public virtual DbSet<BarPalletD> BarPalletD { get; set; }
        public virtual DbSet<BarPalletDHis> BarPalletDHis { get; set; }
        public virtual DbSet<BarPalletM> BarPalletM { get; set; }
        public virtual DbSet<BarPalletMHis> BarPalletMHis { get; set; }
        public virtual DbSet<BarRepack> BarRepack { get; set; }
        public virtual DbSet<BarRepackRecord> BarRepackRecord { get; set; }
        public virtual DbSet<BarSnSplit> BarSnSplit { get; set; }
        public virtual DbSet<BarSnSplitD> BarSnSplitD { get; set; }
        public virtual DbSet<BarType> BarType { get; set; }
        public virtual DbSet<BaseArea> BaseArea { get; set; }
        public virtual DbSet<BaseAsrsDb> BaseAsrsDb { get; set; }
        public virtual DbSet<BaseBarSn> BaseBarSn { get; set; }
        public virtual DbSet<BaseBarcodePrint> BaseBarcodePrint { get; set; }
        public virtual DbSet<BaseBarcodePrintD> BaseBarcodePrintD { get; set; }
        public virtual DbSet<BaseBarcodeRule> BaseBarcodeRule { get; set; }
        public virtual DbSet<BaseBarcodeRuleD> BaseBarcodeRuleD { get; set; }
        public virtual DbSet<BaseBom> BaseBom { get; set; }
        public virtual DbSet<BaseBomD> BaseBomD { get; set; }
        public virtual DbSet<BaseCargoRma> BaseCargoRma { get; set; }
        public virtual DbSet<BaseCargooutPart> BaseCargooutPart { get; set; }
        public virtual DbSet<BaseCargospace> BaseCargospace { get; set; }
        public virtual DbSet<BaseCargospaceCx> BaseCargospaceCx { get; set; }
        public virtual DbSet<BaseCargospaceNewTemp> BaseCargospaceNewTemp { get; set; }
        public virtual DbSet<BaseCargospaceTemp> BaseCargospaceTemp { get; set; }
        public virtual DbSet<BaseCargospaceXx> BaseCargospaceXx { get; set; }
        public virtual DbSet<BaseCargospacebak> BaseCargospacebak { get; set; }
        public virtual DbSet<BaseClient> BaseClient { get; set; }
        public virtual DbSet<BaseCraneconfig> BaseCraneconfig { get; set; }
        public virtual DbSet<BaseCraneconfigDTrade> BaseCraneconfigDTrade { get; set; }
        public virtual DbSet<BaseCraneconfigDetial> BaseCraneconfigDetial { get; set; }
        public virtual DbSet<BaseCraneconfigDetialScan> BaseCraneconfigDetialScan { get; set; }
        public virtual DbSet<BaseCraneconfigPlcaddr> BaseCraneconfigPlcaddr { get; set; }
        public virtual DbSet<BaseCraneconfigTradetype> BaseCraneconfigTradetype { get; set; }
        public virtual DbSet<BaseCraneconfigTradetypeD> BaseCraneconfigTradetypeD { get; set; }
        public virtual DbSet<BaseDeliverDepartment> BaseDeliverDepartment { get; set; }
        public virtual DbSet<BaseDepartment> BaseDepartment { get; set; }
        public virtual DbSet<BaseDepartmentOtype> BaseDepartmentOtype { get; set; }
        public virtual DbSet<BaseDocuclass> BaseDocuclass { get; set; }
        public virtual DbSet<BaseDocureason> BaseDocureason { get; set; }
        public virtual DbSet<BaseFileuplod> BaseFileuplod { get; set; }
        public virtual DbSet<BaseInterfaceRunTime> BaseInterfaceRunTime { get; set; }
        public virtual DbSet<BaseInterfacelog> BaseInterfacelog { get; set; }
        public virtual DbSet<BaseInterfacelog202003> BaseInterfacelog202003 { get; set; }
        public virtual DbSet<BaseInterfacelog202004> BaseInterfacelog202004 { get; set; }
        public virtual DbSet<BaseJobRunTime> BaseJobRunTime { get; set; }
        public virtual DbSet<BaseLineInfo> BaseLineInfo { get; set; }
        public virtual DbSet<BaseLineList> BaseLineList { get; set; }
        public virtual DbSet<BaseLineVendor> BaseLineVendor { get; set; }
        public virtual DbSet<BaseMaterialsArea> BaseMaterialsArea { get; set; }
        public virtual DbSet<BaseMrbMail> BaseMrbMail { get; set; }
        public virtual DbSet<BaseOfCc> BaseOfCc { get; set; }
        public virtual DbSet<BaseOp> BaseOp { get; set; }
        public virtual DbSet<BaseOperator> BaseOperator { get; set; }
        public virtual DbSet<BaseOperatorArea> BaseOperatorArea { get; set; }
        public virtual DbSet<BaseOperatorAreaBak> BaseOperatorAreaBak { get; set; }
        public virtual DbSet<BaseOperatorAreaNew> BaseOperatorAreaNew { get; set; }
        public virtual DbSet<BasePackageScan> BasePackageScan { get; set; }
        public virtual DbSet<BasePackageScanNew> BasePackageScanNew { get; set; }
        public virtual DbSet<BasePart> BasePart { get; set; }
        public virtual DbSet<BasePartArea> BasePartArea { get; set; }
        public virtual DbSet<BasePartAreaBack> BasePartAreaBack { get; set; }
        public virtual DbSet<BasePartAreaCx> BasePartAreaCx { get; set; }
        public virtual DbSet<BasePartAreaXx> BasePartAreaXx { get; set; }
        public virtual DbSet<BasePartCargospace> BasePartCargospace { get; set; }
        public virtual DbSet<BasePartHis> BasePartHis { get; set; }
        public virtual DbSet<BasePartTemp> BasePartTemp { get; set; }
        public virtual DbSet<BasePlcCurrentStatus> BasePlcCurrentStatus { get; set; }
        public virtual DbSet<BaseReplacepalletcodeRecord> BaseReplacepalletcodeRecord { get; set; }
        public virtual DbSet<BaseResources> BaseResources { get; set; }
        public virtual DbSet<BaseRgvAreaPackageNo> BaseRgvAreaPackageNo { get; set; }
        public virtual DbSet<BaseRgvTvPackageNo> BaseRgvTvPackageNo { get; set; }
        public virtual DbSet<BaseRules> BaseRules { get; set; }
        public virtual DbSet<BaseSendemail> BaseSendemail { get; set; }
        public virtual DbSet<BaseSendemailpelon> BaseSendemailpelon { get; set; }
        public virtual DbSet<BaseSerialNumber> BaseSerialNumber { get; set; }
        public virtual DbSet<BaseStrongpickPart> BaseStrongpickPart { get; set; }
        public virtual DbSet<BaseTvShowInfo> BaseTvShowInfo { get; set; }
        public virtual DbSet<BaseTypeMapping> BaseTypeMapping { get; set; }
        public virtual DbSet<BaseUserLanguage> BaseUserLanguage { get; set; }
        public virtual DbSet<BaseVendor> BaseVendor { get; set; }
        public virtual DbSet<BaseWarehouse> BaseWarehouse { get; set; }
        public virtual DbSet<BaseWarehouseTemp> BaseWarehouseTemp { get; set; }
        public virtual DbSet<CerpCode> CerpCode { get; set; }
        public virtual DbSet<Checkerrormsg> Checkerrormsg { get; set; }
        public virtual DbSet<CheckerrormsgAppBak> CheckerrormsgAppBak { get; set; }
        public virtual DbSet<CmdAgvTask> CmdAgvTask { get; set; }
        public virtual DbSet<CmdAgvpositionCodeDetail> CmdAgvpositionCodeDetail { get; set; }
        public virtual DbSet<CmdEquipTask> CmdEquipTask { get; set; }
        public virtual DbSet<CmdLift> CmdLift { get; set; }
        public virtual DbSet<CmdMst> CmdMst { get; set; }
        public virtual DbSet<CmdMstError> CmdMstError { get; set; }
        public virtual DbSet<CmdMstLog> CmdMstLog { get; set; }
        public virtual DbSet<CmdMstRgv> CmdMstRgv { get; set; }
        public virtual DbSet<CmdMstScan> CmdMstScan { get; set; }
        public virtual DbSet<CmdbyPalletCode> CmdbyPalletCode { get; set; }
        public virtual DbSet<Createoutasn> Createoutasn { get; set; }
        public virtual DbSet<Current001> Current001 { get; set; }
        public virtual DbSet<CxFlowSwrInfo> CxFlowSwrInfo { get; set; }
        public virtual DbSet<DataInputTemp> DataInputTemp { get; set; }
        public virtual DbSet<DateEmpTemp> DateEmpTemp { get; set; }
        public virtual DbSet<DateEmpTempbak> DateEmpTempbak { get; set; }
        public virtual DbSet<DatecodeStockCurrent> DatecodeStockCurrent { get; set; }
        public virtual DbSet<DatecodeStockCurrentDetail> DatecodeStockCurrentDetail { get; set; }
        public virtual DbSet<DepartmentLineInfo> DepartmentLineInfo { get; set; }
        public virtual DbSet<EbsMoEnd> EbsMoEnd { get; set; }
        public virtual DbSet<EbsYd> EbsYd { get; set; }
        public virtual DbSet<GPartMapWms> GPartMapWms { get; set; }
        public virtual DbSet<GPartMapWmsCache> GPartMapWmsCache { get; set; }
        public virtual DbSet<HandleLog> HandleLog { get; set; }
        public virtual DbSet<HdSqlmap> HdSqlmap { get; set; }
        public virtual DbSet<InMergePallete> InMergePallete { get; set; }
        public virtual DbSet<InMoInfo> InMoInfo { get; set; }
        public virtual DbSet<Inasn> Inasn { get; set; }
        public virtual DbSet<InasnAppBak> InasnAppBak { get; set; }
        public virtual DbSet<InasnD> InasnD { get; set; }
        public virtual DbSet<InasnDAppBak> InasnDAppBak { get; set; }
        public virtual DbSet<InasnDIstockSplit> InasnDIstockSplit { get; set; }
        public virtual DbSet<InasnIa> InasnIa { get; set; }
        public virtual DbSet<InasnIaD> InasnIaD { get; set; }
        public virtual DbSet<Inasnchange> Inasnchange { get; set; }
        public virtual DbSet<InasnchangeD> InasnchangeD { get; set; }
        public virtual DbSet<Inassit> Inassit { get; set; }
        public virtual DbSet<InassitD> InassitD { get; set; }
        public virtual DbSet<Inbill> Inbill { get; set; }
        public virtual DbSet<InbillD> InbillD { get; set; }
        public virtual DbSet<InbillDBn> InbillDBn { get; set; }
        public virtual DbSet<InbillDSn> InbillDSn { get; set; }
        public virtual DbSet<Inpo> Inpo { get; set; }
        public virtual DbSet<InpoD> InpoD { get; set; }
        public virtual DbSet<InterfaceLostTemp> InterfaceLostTemp { get; set; }
        public virtual DbSet<Intype> Intype { get; set; }
        public virtual DbSet<IntypeBak> IntypeBak { get; set; }
        public virtual DbSet<Intypebak1> Intypebak1 { get; set; }
        public virtual DbSet<LineExceptMo> LineExceptMo { get; set; }
        public virtual DbSet<LogOutsnTest> LogOutsnTest { get; set; }
        public virtual DbSet<LogRevokeTempinbill> LogRevokeTempinbill { get; set; }
        public virtual DbSet<LogSyserror> LogSyserror { get; set; }
        public virtual DbSet<LogSyserrorAppBak> LogSyserrorAppBak { get; set; }
        public virtual DbSet<MlogEbsOpenQuantity> MlogEbsOpenQuantity { get; set; }
        public virtual DbSet<MlogStockCurrent> MlogStockCurrent { get; set; }
        public virtual DbSet<MoCinvcodeFlag> MoCinvcodeFlag { get; set; }
        public virtual DbSet<MoDepartment> MoDepartment { get; set; }
        public virtual DbSet<MtlInterfaceCache> MtlInterfaceCache { get; set; }
        public virtual DbSet<OutGroup> OutGroup { get; set; }
        public virtual DbSet<OutGroupD> OutGroupD { get; set; }
        public virtual DbSet<OutGroupDHis> OutGroupDHis { get; set; }
        public virtual DbSet<OutGroupHis> OutGroupHis { get; set; }
        public virtual DbSet<OutHandover> OutHandover { get; set; }
        public virtual DbSet<OutHandoverCheck> OutHandoverCheck { get; set; }
        public virtual DbSet<OutHandoverHis> OutHandoverHis { get; set; }
        public virtual DbSet<OutPart> OutPart { get; set; }
        public virtual DbSet<OutTest> OutTest { get; set; }
        public virtual DbSet<OutTestD> OutTestD { get; set; }
        public virtual DbSet<OutTransportationplan> OutTransportationplan { get; set; }
        public virtual DbSet<OutUnpart> OutUnpart { get; set; }
        public virtual DbSet<Outasn> Outasn { get; set; }
        public virtual DbSet<Outasn2013> Outasn2013 { get; set; }
        public virtual DbSet<OutasnAppBak> OutasnAppBak { get; set; }
        public virtual DbSet<OutasnBuild> OutasnBuild { get; set; }
        public virtual DbSet<OutasnD> OutasnD { get; set; }
        public virtual DbSet<OutasnDAppBak> OutasnDAppBak { get; set; }
        public virtual DbSet<OutasnDHis> OutasnDHis { get; set; }
        public virtual DbSet<OutasnDSplit> OutasnDSplit { get; set; }
        public virtual DbSet<OutasnDTest> OutasnDTest { get; set; }
        public virtual DbSet<OutasnDback> OutasnDback { get; set; }
        public virtual DbSet<OutasnHis> OutasnHis { get; set; }
        public virtual DbSet<OutasnTemp> OutasnTemp { get; set; }
        public virtual DbSet<OutasnTempTest> OutasnTempTest { get; set; }
        public virtual DbSet<OutasnTest> OutasnTest { get; set; }
        public virtual DbSet<Outasnback> Outasnback { get; set; }
        public virtual DbSet<Outasnchange> Outasnchange { get; set; }
        public virtual DbSet<OutasnchangeD> OutasnchangeD { get; set; }
        public virtual DbSet<Outasnnotuseouttype> Outasnnotuseouttype { get; set; }
        public virtual DbSet<Outassit> Outassit { get; set; }
        public virtual DbSet<OutassitD> OutassitD { get; set; }
        public virtual DbSet<OutassitDHis> OutassitDHis { get; set; }
        public virtual DbSet<OutassitHis> OutassitHis { get; set; }
        public virtual DbSet<Outbill> Outbill { get; set; }
        public virtual DbSet<OutbillD> OutbillD { get; set; }
        public virtual DbSet<OutbillDBn> OutbillDBn { get; set; }
        public virtual DbSet<OutbillDHis> OutbillDHis { get; set; }
        public virtual DbSet<OutbillDSn> OutbillDSn { get; set; }
        public virtual DbSet<OutbillDTest> OutbillDTest { get; set; }
        public virtual DbSet<OutbillHis> OutbillHis { get; set; }
        public virtual DbSet<OutbillTest> OutbillTest { get; set; }
        public virtual DbSet<Outmixed> Outmixed { get; set; }
        public virtual DbSet<OutmixedD> OutmixedD { get; set; }
        public virtual DbSet<Outorder> Outorder { get; set; }
        public virtual DbSet<OutorderD> OutorderD { get; set; }
        public virtual DbSet<Outtype> Outtype { get; set; }
        public virtual DbSet<OuttypeBak> OuttypeBak { get; set; }
        public virtual DbSet<Outtypebak1> Outtypebak1 { get; set; }
        public virtual DbSet<PInAsnCtCode> PInAsnCtCode { get; set; }
        public virtual DbSet<PSiteid> PSiteid { get; set; }
        public virtual DbSet<PWarehouseid> PWarehouseid { get; set; }
        public virtual DbSet<PdaLessCinvcode> PdaLessCinvcode { get; set; }
        public virtual DbSet<PdaLessErpcode> PdaLessErpcode { get; set; }
        public virtual DbSet<PdaVInAsnList> PdaVInAsnList { get; set; }
        public virtual DbSet<PdaVInAssitDetails> PdaVInAssitDetails { get; set; }
        public virtual DbSet<PdaVInAssitScan> PdaVInAssitScan { get; set; }
        public virtual DbSet<PdaVSnpdstockInfo> PdaVSnpdstockInfo { get; set; }
        public virtual DbSet<PdaVStockQuery> PdaVStockQuery { get; set; }
        public virtual DbSet<PdaVStockReset> PdaVStockReset { get; set; }
        public virtual DbSet<PlanTable> PlanTable { get; set; }
        public virtual DbSet<PlcCmdMst> PlcCmdMst { get; set; }
        public virtual DbSet<PoGetCache> PoGetCache { get; set; }
        public virtual DbSet<ProcFunReturnInfo> ProcFunReturnInfo { get; set; }
        public virtual DbSet<Proclogs> Proclogs { get; set; }
        public virtual DbSet<R09Stock> R09Stock { get; set; }
        public virtual DbSet<R09StockCell> R09StockCell { get; set; }
        public virtual DbSet<R09Wh> R09Wh { get; set; }
        public virtual DbSet<R09WhL> R09WhL { get; set; }
        public virtual DbSet<R09WhStock> R09WhStock { get; set; }
        public virtual DbSet<R09WhStockDtLXCnt> R09WhStockDtLXCnt { get; set; }
        public virtual DbSet<R09WhStockIsUsed> R09WhStockIsUsed { get; set; }
        public virtual DbSet<R09WhY> R09WhY { get; set; }
        public virtual DbSet<R09WhZ> R09WhZ { get; set; }
        public virtual DbSet<RcvInterfaceCache> RcvInterfaceCache { get; set; }
        public virtual DbSet<ReportPartMoreSpace> ReportPartMoreSpace { get; set; }
        public virtual DbSet<Returntovendorpartlist> Returntovendorpartlist { get; set; }
        public virtual DbSet<RgvCurrentStatus> RgvCurrentStatus { get; set; }
        public virtual DbSet<RptStockDiscrepency> RptStockDiscrepency { get; set; }
        public virtual DbSet<RptStockDiscrepencyTest> RptStockDiscrepencyTest { get; set; }
        public virtual DbSet<SalesOrderD> SalesOrderD { get; set; }
        public virtual DbSet<SalesOrderM> SalesOrderM { get; set; }
        public virtual DbSet<SnItemHeadConfig> SnItemHeadConfig { get; set; }
        public virtual DbSet<SnResetOperateInfo> SnResetOperateInfo { get; set; }
        public virtual DbSet<SsxSiteMonitor> SsxSiteMonitor { get; set; }
        public virtual DbSet<StockAdjust> StockAdjust { get; set; }
        public virtual DbSet<StockAlloScanD> StockAlloScanD { get; set; }
        public virtual DbSet<StockCheckPlan> StockCheckPlan { get; set; }
        public virtual DbSet<StockCheckbill> StockCheckbill { get; set; }
        public virtual DbSet<StockCheckbillD> StockCheckbillD { get; set; }
        public virtual DbSet<StockCheckbillPosition> StockCheckbillPosition { get; set; }
        public virtual DbSet<StockCheckedbill> StockCheckedbill { get; set; }
        public virtual DbSet<StockCheckedbillHis> StockCheckedbillHis { get; set; }
        public virtual DbSet<StockCheckedbillSn> StockCheckedbillSn { get; set; }
        public virtual DbSet<StockCurrent> StockCurrent { get; set; }
        public virtual DbSet<StockCurrentAdjust> StockCurrentAdjust { get; set; }
        public virtual DbSet<StockCurrentAdjustD> StockCurrentAdjustD { get; set; }
        public virtual DbSet<StockCurrentBegin> StockCurrentBegin { get; set; }
        public virtual DbSet<StockCurrentBn> StockCurrentBn { get; set; }
        public virtual DbSet<StockCurrentDetail> StockCurrentDetail { get; set; }
        public virtual DbSet<StockCurrentDetailFun> StockCurrentDetailFun { get; set; }
        public virtual DbSet<StockCurrentOld> StockCurrentOld { get; set; }
        public virtual DbSet<StockCurrentPalletCode> StockCurrentPalletCode { get; set; }
        public virtual DbSet<StockCurrentSn> StockCurrentSn { get; set; }
        public virtual DbSet<StockCurrentSnFun> StockCurrentSnFun { get; set; }
        public virtual DbSet<StockCurrentSnReset> StockCurrentSnReset { get; set; }
        public virtual DbSet<StockDeductDetail> StockDeductDetail { get; set; }
        public virtual DbSet<StockDeductSnDetail> StockDeductSnDetail { get; set; }
        public virtual DbSet<StockDuration> StockDuration { get; set; }
        public virtual DbSet<StockOccupancyRelease> StockOccupancyRelease { get; set; }
        public virtual DbSet<StockRecheckSn> StockRecheckSn { get; set; }
        public virtual DbSet<StockSnErpunlock> StockSnErpunlock { get; set; }
        public virtual DbSet<StockSnLock> StockSnLock { get; set; }
        public virtual DbSet<StockTemp> StockTemp { get; set; }
        public virtual DbSet<SysArea> SysArea { get; set; }
        public virtual DbSet<SysBilllog> SysBilllog { get; set; }
        public virtual DbSet<SysConfig> SysConfig { get; set; }
        public virtual DbSet<SysCountlog> SysCountlog { get; set; }
        public virtual DbSet<SysDbBackup> SysDbBackup { get; set; }
        public virtual DbSet<SysFilterIp> SysFilterIp { get; set; }
        public virtual DbSet<SysItems> SysItems { get; set; }
        public virtual DbSet<SysItemsDetail> SysItemsDetail { get; set; }
        public virtual DbSet<SysJob> SysJob { get; set; }
        public virtual DbSet<SysLanguage> SysLanguage { get; set; }
        public virtual DbSet<SysLog> SysLog { get; set; }
        public virtual DbSet<SysLogType> SysLogType { get; set; }
        public virtual DbSet<SysModule> SysModule { get; set; }
        public virtual DbSet<SysModuleButton> SysModuleButton { get; set; }
        public virtual DbSet<SysModuleForm> SysModuleForm { get; set; }
        public virtual DbSet<SysModuleFormInstance> SysModuleFormInstance { get; set; }
        public virtual DbSet<SysOrganize> SysOrganize { get; set; }
        public virtual DbSet<SysParameter> SysParameter { get; set; }
        public virtual DbSet<SysParametergroup> SysParametergroup { get; set; }
        public virtual DbSet<SysParametername> SysParametername { get; set; }
        public virtual DbSet<SysPrinter> SysPrinter { get; set; }
        public virtual DbSet<SysRole> SysRole { get; set; }
        public virtual DbSet<SysRoleAuthorize> SysRoleAuthorize { get; set; }
        public virtual DbSet<SysScaninlog> SysScaninlog { get; set; }
        public virtual DbSet<SysStockdiffLog> SysStockdiffLog { get; set; }
        public virtual DbSet<SysUser> SysUser { get; set; }
        public virtual DbSet<SysUserLogOn> SysUserLogOn { get; set; }
        public virtual DbSet<SysVersion> SysVersion { get; set; }
        public virtual DbSet<TOutReleaseofoccupied> TOutReleaseofoccupied { get; set; }
        public virtual DbSet<TaskInfo> TaskInfo { get; set; }
        public virtual DbSet<TbTest> TbTest { get; set; }
        public virtual DbSet<TbTestFloat> TbTestFloat { get; set; }
        public virtual DbSet<TempAllocate> TempAllocate { get; set; }
        public virtual DbSet<TempAreaPaetWarehouse> TempAreaPaetWarehouse { get; set; }
        public virtual DbSet<TempBaseArea> TempBaseArea { get; set; }
        public virtual DbSet<TempBaseCargospace> TempBaseCargospace { get; set; }
        public virtual DbSet<TempBaseClient> TempBaseClient { get; set; }
        public virtual DbSet<TempBaseDepartment> TempBaseDepartment { get; set; }
        public virtual DbSet<TempBaseLineList> TempBaseLineList { get; set; }
        public virtual DbSet<TempBasePartCargospace> TempBasePartCargospace { get; set; }
        public virtual DbSet<TempBaseStockCurrent> TempBaseStockCurrent { get; set; }
        public virtual DbSet<TempBaseVendor> TempBaseVendor { get; set; }
        public virtual DbSet<TempBinCard> TempBinCard { get; set; }
        public virtual DbSet<TempCpositioncode> TempCpositioncode { get; set; }
        public virtual DbSet<TempDigitalsinge> TempDigitalsinge { get; set; }
        public virtual DbSet<TempEbsResult> TempEbsResult { get; set; }
        public virtual DbSet<TempEbsYd> TempEbsYd { get; set; }
        public virtual DbSet<TempImportSpacePartArea> TempImportSpacePartArea { get; set; }
        public virtual DbSet<TempImportoutasndetail> TempImportoutasndetail { get; set; }
        public virtual DbSet<TempIn> TempIn { get; set; }
        public virtual DbSet<TempInMoInfo> TempInMoInfo { get; set; }
        public virtual DbSet<TempInandoutbill> TempInandoutbill { get; set; }
        public virtual DbSet<TempInassitBaseCargospace> TempInassitBaseCargospace { get; set; }
        public virtual DbSet<TempInbillD> TempInbillD { get; set; }
        public virtual DbSet<TempInbilltotalqty> TempInbilltotalqty { get; set; }
        public virtual DbSet<TempLessCinvcode> TempLessCinvcode { get; set; }
        public virtual DbSet<TempLessDeptmail> TempLessDeptmail { get; set; }
        public virtual DbSet<TempLessErpcode> TempLessErpcode { get; set; }
        public virtual DbSet<TempOasnErpcodeN> TempOasnErpcodeN { get; set; }
        public virtual DbSet<TempOfZyl> TempOfZyl { get; set; }
        public virtual DbSet<TempOrdercompissue> TempOrdercompissue { get; set; }
        public virtual DbSet<TempOutTransportationplan> TempOutTransportationplan { get; set; }
        public virtual DbSet<TempOutasnId> TempOutasnId { get; set; }
        public virtual DbSet<TempOutbillD> TempOutbillD { get; set; }
        public virtual DbSet<TempOutbillDHis> TempOutbillDHis { get; set; }
        public virtual DbSet<TempOutbillDT> TempOutbillDT { get; set; }
        public virtual DbSet<TempOutbillDTest> TempOutbillDTest { get; set; }
        public virtual DbSet<TempOutbilltotalqty> TempOutbilltotalqty { get; set; }
        public virtual DbSet<TempOutmixedD> TempOutmixedD { get; set; }
        public virtual DbSet<TempQueryInOutSummaryReport> TempQueryInOutSummaryReport { get; set; }
        public virtual DbSet<TempQueryInOutdetailsReport> TempQueryInOutdetailsReport { get; set; }
        public virtual DbSet<TempReportStockDuration> TempReportStockDuration { get; set; }
        public virtual DbSet<TempSelectasnd> TempSelectasnd { get; set; }
        public virtual DbSet<TempSnErpunlock> TempSnErpunlock { get; set; }
        public virtual DbSet<TempStockCheck> TempStockCheck { get; set; }
        public virtual DbSet<TempStockCheckedbill> TempStockCheckedbill { get; set; }
        public virtual DbSet<TempStockCheckedbillSn> TempStockCheckedbillSn { get; set; }
        public virtual DbSet<TempStockCurrent> TempStockCurrent { get; set; }
        public virtual DbSet<TempStockCurrentSn> TempStockCurrentSn { get; set; }
        public virtual DbSet<TempStockDuration> TempStockDuration { get; set; }
        public virtual DbSet<TempStockDuration1> TempStockDuration1 { get; set; }
        public virtual DbSet<TempStockSnreset> TempStockSnreset { get; set; }
        public virtual DbSet<TempStockcurrent1> TempStockcurrent1 { get; set; }
        public virtual DbSet<TempTableAllocateT> TempTableAllocateT { get; set; }
        public virtual DbSet<TempTableAsnInfoT> TempTableAsnInfoT { get; set; }
        public virtual DbSet<TempTableInfoT> TempTableInfoT { get; set; }
        public virtual DbSet<TempTableStockPositionInfoT> TempTableStockPositionInfoT { get; set; }
        public virtual DbSet<TempTableTempOutbillInfoT> TempTableTempOutbillInfoT { get; set; }
        public virtual DbSet<TempTvshowInfo> TempTvshowInfo { get; set; }
        public virtual DbSet<TempUserArea> TempUserArea { get; set; }
        public virtual DbSet<Test1> Test1 { get; set; }
        public virtual DbSet<TransLog> TransLog { get; set; }
        public virtual DbSet<TransactionTimeConfig> TransactionTimeConfig { get; set; }
        public virtual DbSet<Transintefaceforasnchange> Transintefaceforasnchange { get; set; }
        public virtual DbSet<TwBasePart> TwBasePart { get; set; }
        public virtual DbSet<TwBasePartPre> TwBasePartPre { get; set; }
        public virtual DbSet<TwBaseWh> TwBaseWh { get; set; }
        public virtual DbSet<TwWh> TwWh { get; set; }
        public virtual DbSet<TwWh01> TwWh01 { get; set; }
        public virtual DbSet<TwWh02> TwWh02 { get; set; }
        public virtual DbSet<TwWh03> TwWh03 { get; set; }
        public virtual DbSet<UserFunction> UserFunction { get; set; }
        public virtual DbSet<UserFunction2> UserFunction2 { get; set; }
        public virtual DbSet<V2Outasn> V2Outasn { get; set; }
        public virtual DbSet<V2Outbill> V2Outbill { get; set; }
        public virtual DbSet<V2OutbillD> V2OutbillD { get; set; }
        public virtual DbSet<V2StockCurrentAdjust> V2StockCurrentAdjust { get; set; }
        public virtual DbSet<VAllocate> VAllocate { get; set; }
        public virtual DbSet<VAllocateAuto> VAllocateAuto { get; set; }
        public virtual DbSet<VAllocateDreport> VAllocateDreport { get; set; }
        public virtual DbSet<VAllocateL> VAllocateL { get; set; }
        public virtual DbSet<VAsrsList> VAsrsList { get; set; }
        public virtual DbSet<VAsrsListNew> VAsrsListNew { get; set; }
        public virtual DbSet<VBarCartonM> VBarCartonM { get; set; }
        public virtual DbSet<VBarPalletM> VBarPalletM { get; set; }
        public virtual DbSet<VBarPalletMSn> VBarPalletMSn { get; set; }
        public virtual DbSet<VBarSnSplitDQuery> VBarSnSplitDQuery { get; set; }
        public virtual DbSet<VBarSnSplitsquery> VBarSnSplitsquery { get; set; }
        public virtual DbSet<VBaseArea> VBaseArea { get; set; }
        public virtual DbSet<VBaseBarSn> VBaseBarSn { get; set; }
        public virtual DbSet<VBaseBarSnquery> VBaseBarSnquery { get; set; }
        public virtual DbSet<VBaseCargospace> VBaseCargospace { get; set; }
        public virtual DbSet<VBaseCargospaceL> VBaseCargospaceL { get; set; }
        public virtual DbSet<VBaseCargospacePk> VBaseCargospacePk { get; set; }
        public virtual DbSet<VBaseCargospaceSc> VBaseCargospaceSc { get; set; }
        public virtual DbSet<VBaseCargospaceT> VBaseCargospaceT { get; set; }
        public virtual DbSet<VBaseCargospaceTemp> VBaseCargospaceTemp { get; set; }
        public virtual DbSet<VBaseCargospacelistQuery> VBaseCargospacelistQuery { get; set; }
        public virtual DbSet<VBaseClient> VBaseClient { get; set; }
        public virtual DbSet<VBaseOperator> VBaseOperator { get; set; }
        public virtual DbSet<VBasePartBom> VBasePartBom { get; set; }
        public virtual DbSet<VBasePartTemp> VBasePartTemp { get; set; }
        public virtual DbSet<VBaseVendor> VBaseVendor { get; set; }
        public virtual DbSet<VBaseWarehouse> VBaseWarehouse { get; set; }
        public virtual DbSet<VBaseWarehouseTemp> VBaseWarehouseTemp { get; set; }
        public virtual DbSet<VCargospaceReport> VCargospaceReport { get; set; }
        public virtual DbSet<VChayireport> VChayireport { get; set; }
        public virtual DbSet<VChayireportReport> VChayireportReport { get; set; }
        public virtual DbSet<VCinvcodeControl> VCinvcodeControl { get; set; }
        public virtual DbSet<VCmdAgvTask> VCmdAgvTask { get; set; }
        public virtual DbSet<VCmdMst> VCmdMst { get; set; }
        public virtual DbSet<VCmdMstLog> VCmdMstLog { get; set; }
        public virtual DbSet<VCmdMstRgv> VCmdMstRgv { get; set; }
        public virtual DbSet<VDiffTimeReport> VDiffTimeReport { get; set; }
        public virtual DbSet<VDigitalsignage> VDigitalsignage { get; set; }
        public virtual DbSet<VEbsTranTest> VEbsTranTest { get; set; }
        public virtual DbSet<VEmtInasnlist> VEmtInasnlist { get; set; }
        public virtual DbSet<VEmtInemtlist> VEmtInemtlist { get; set; }
        public virtual DbSet<VGdMinsets> VGdMinsets { get; set; }
        public virtual DbSet<VGetInAsnTen> VGetInAsnTen { get; set; }
        public virtual DbSet<VGetPoline> VGetPoline { get; set; }
        public virtual DbSet<VGetPolist> VGetPolist { get; set; }
        public virtual DbSet<VImportDateList> VImportDateList { get; set; }
        public virtual DbSet<VInAsnEmt> VInAsnEmt { get; set; }
        public virtual DbSet<VInAsnPo> VInAsnPo { get; set; }
        public virtual DbSet<VInAssitList> VInAssitList { get; set; }
        public virtual DbSet<VInMergePallete> VInMergePallete { get; set; }
        public virtual DbSet<VInOrOutType> VInOrOutType { get; set; }
        public virtual DbSet<VInasn> VInasn { get; set; }
        public virtual DbSet<VInasnD> VInasnD { get; set; }
        public virtual DbSet<VInasnDEdit> VInasnDEdit { get; set; }
        public virtual DbSet<VInasnReport> VInasnReport { get; set; }
        public virtual DbSet<VInasnsplit> VInasnsplit { get; set; }
        public virtual DbSet<VInassitReport> VInassitReport { get; set; }
        public virtual DbSet<VInbill> VInbill { get; set; }
        public virtual DbSet<VInbillD> VInbillD { get; set; }
        public virtual DbSet<VInbillDandSn> VInbillDandSn { get; set; }
        public virtual DbSet<VInbillDsn> VInbillDsn { get; set; }
        public virtual DbSet<VInbillReport> VInbillReport { get; set; }
        public virtual DbSet<VInoutType> VInoutType { get; set; }
        public virtual DbSet<VInpo> VInpo { get; set; }
        public virtual DbSet<VInpubomcount> VInpubomcount { get; set; }
        public virtual DbSet<VJianhuoReport> VJianhuoReport { get; set; }
        public virtual DbSet<VMergeErpCodeReport> VMergeErpCodeReport { get; set; }
        public virtual DbSet<VMergeErpCodeReportTest> VMergeErpCodeReportTest { get; set; }
        public virtual DbSet<VMixedIngredients> VMixedIngredients { get; set; }
        public virtual DbSet<VNotusePositioncode> VNotusePositioncode { get; set; }
        public virtual DbSet<VOperatorArea> VOperatorArea { get; set; }
        public virtual DbSet<VOraTest> VOraTest { get; set; }
        public virtual DbSet<VOrderFinishStock> VOrderFinishStock { get; set; }
        public virtual DbSet<VOutAsnAdj> VOutAsnAdj { get; set; }
        public virtual DbSet<VOutBillAdj> VOutBillAdj { get; set; }
        public virtual DbSet<VOutMixedList> VOutMixedList { get; set; }
        public virtual DbSet<VOutReturnIn> VOutReturnIn { get; set; }
        public virtual DbSet<VOutasnD> VOutasnD { get; set; }
        public virtual DbSet<VOutasnDL> VOutasnDL { get; set; }
        public virtual DbSet<VOutasnDl1> VOutasnDl1 { get; set; }
        public virtual DbSet<VOutasnReport> VOutasnReport { get; set; }
        public virtual DbSet<VOutasnSplit> VOutasnSplit { get; set; }
        public virtual DbSet<VOutasnlist> VOutasnlist { get; set; }
        public virtual DbSet<VOutassitDetail> VOutassitDetail { get; set; }
        public virtual DbSet<VOutassitDetailErp> VOutassitDetailErp { get; set; }
        public virtual DbSet<VOutbill> VOutbill { get; set; }
        public virtual DbSet<VOutbillDetail> VOutbillDetail { get; set; }
        public virtual DbSet<VOutbillDetailErp> VOutbillDetailErp { get; set; }
        public virtual DbSet<VOutbillReport> VOutbillReport { get; set; }
        public virtual DbSet<VOutbillSn> VOutbillSn { get; set; }
        public virtual DbSet<VOutbilledit> VOutbilledit { get; set; }
        public virtual DbSet<VOutmixedD> VOutmixedD { get; set; }
        public virtual DbSet<VOutmixedJfDetialsDList> VOutmixedJfDetialsDList { get; set; }
        public virtual DbSet<VOutmixedJfDetialsList> VOutmixedJfDetialsList { get; set; }
        public virtual DbSet<VOutmixedJfList> VOutmixedJfList { get; set; }
        public virtual DbSet<VPandianreport> VPandianreport { get; set; }
        public virtual DbSet<VPartInfoBasePart> VPartInfoBasePart { get; set; }
        public virtual DbSet<VPartInfoInAsnD> VPartInfoInAsnD { get; set; }
        public virtual DbSet<VPartInfoOutAsnD> VPartInfoOutAsnD { get; set; }
        public virtual DbSet<VPartInfoWip> VPartInfoWip { get; set; }
        public virtual DbSet<VPartListByArea> VPartListByArea { get; set; }
        public virtual DbSet<VPartListByWareHouse> VPartListByWareHouse { get; set; }
        public virtual DbSet<VPartunionbom> VPartunionbom { get; set; }
        public virtual DbSet<VPdaAllocateD> VPdaAllocateD { get; set; }
        public virtual DbSet<VPdaAllocateEditShow> VPdaAllocateEditShow { get; set; }
        public virtual DbSet<VPdaAllocateList> VPdaAllocateList { get; set; }
        public virtual DbSet<VPdaBaseCraneconfigDetiallist> VPdaBaseCraneconfigDetiallist { get; set; }
        public virtual DbSet<VPdaInAsnEmtList> VPdaInAsnEmtList { get; set; }
        public virtual DbSet<VPdaInBillRevoke> VPdaInBillRevoke { get; set; }
        public virtual DbSet<VPdaInEmtList> VPdaInEmtList { get; set; }
        public virtual DbSet<VPdaInassitAll> VPdaInassitAll { get; set; }
        public virtual DbSet<VPdaInemtQueryList> VPdaInemtQueryList { get; set; }
        public virtual DbSet<VPdaMergeOutAssitList> VPdaMergeOutAssitList { get; set; }
        public virtual DbSet<VPdaMergeOutBillDeliverList> VPdaMergeOutBillDeliverList { get; set; }
        public virtual DbSet<VPdaOutAssitAll> VPdaOutAssitAll { get; set; }
        public virtual DbSet<VPdaOutAssitList> VPdaOutAssitList { get; set; }
        public virtual DbSet<VPdaOutBillDeliverList> VPdaOutBillDeliverList { get; set; }
        public virtual DbSet<VPdaOutBillItems> VPdaOutBillItems { get; set; }
        public virtual DbSet<VPdaOutMixedDlist> VPdaOutMixedDlist { get; set; }
        public virtual DbSet<VPdaOutMixedList> VPdaOutMixedList { get; set; }
        public virtual DbSet<VPdaQueryInasnd> VPdaQueryInasnd { get; set; }
        public virtual DbSet<VPdaQueryInassit> VPdaQueryInassit { get; set; }
        public virtual DbSet<VPdaQueryOutAsnd> VPdaQueryOutAsnd { get; set; }
        public virtual DbSet<VPdaQueryOutAssit> VPdaQueryOutAssit { get; set; }
        public virtual DbSet<VPdaQueryOutBill> VPdaQueryOutBill { get; set; }
        public virtual DbSet<VPdaQueryTempInBillD> VPdaQueryTempInBillD { get; set; }
        public virtual DbSet<VPdaQueryTempOutBillD> VPdaQueryTempOutBillD { get; set; }
        public virtual DbSet<VPdaStockAlloScanD> VPdaStockAlloScanD { get; set; }
        public virtual DbSet<VPdaTemporaryAlloList> VPdaTemporaryAlloList { get; set; }
        public virtual DbSet<VPdaTemporaryInItems> VPdaTemporaryInItems { get; set; }
        public virtual DbSet<VPdaTemporaryInList> VPdaTemporaryInList { get; set; }
        public virtual DbSet<VPdaTemporaryOutItems> VPdaTemporaryOutItems { get; set; }
        public virtual DbSet<VPdaTemporaryOutList> VPdaTemporaryOutList { get; set; }
        public virtual DbSet<VPlcCmdMst> VPlcCmdMst { get; set; }
        public virtual DbSet<VQueryInpo> VQueryInpo { get; set; }
        public virtual DbSet<VQuickMixed> VQuickMixed { get; set; }
        public virtual DbSet<VRationalIssue> VRationalIssue { get; set; }
        public virtual DbSet<VRdInassitlistQuery> VRdInassitlistQuery { get; set; }
        public virtual DbSet<VScanInAllocateInfo> VScanInAllocateInfo { get; set; }
        public virtual DbSet<VScanInAssitInfo> VScanInAssitInfo { get; set; }
        public virtual DbSet<VSeralDetails> VSeralDetails { get; set; }
        public virtual DbSet<VSerialNumberInfo> VSerialNumberInfo { get; set; }
        public virtual DbSet<VShowSnIn> VShowSnIn { get; set; }
        public virtual DbSet<VShowSnStock> VShowSnStock { get; set; }
        public virtual DbSet<VShowSnsplit> VShowSnsplit { get; set; }
        public virtual DbSet<VSnItemHeadConfig> VSnItemHeadConfig { get; set; }
        public virtual DbSet<VStockBaseCargospace> VStockBaseCargospace { get; set; }
        public virtual DbSet<VStockBilllist> VStockBilllist { get; set; }
        public virtual DbSet<VStockCheckDiffSearch> VStockCheckDiffSearch { get; set; }
        public virtual DbSet<VStockCheckbillD> VStockCheckbillD { get; set; }
        public virtual DbSet<VStockCheckbillList> VStockCheckbillList { get; set; }
        public virtual DbSet<VStockCheckbilllist1> VStockCheckbilllist1 { get; set; }
        public virtual DbSet<VStockCheckdbill> VStockCheckdbill { get; set; }
        public virtual DbSet<VStockCheckedbill> VStockCheckedbill { get; set; }
        public virtual DbSet<VStockCheckedbillCy> VStockCheckedbillCy { get; set; }
        public virtual DbSet<VStockCheckedbillList> VStockCheckedbillList { get; set; }
        public virtual DbSet<VStockCurrent> VStockCurrent { get; set; }
        public virtual DbSet<VStockCurrentAdjustD> VStockCurrentAdjustD { get; set; }
        public virtual DbSet<VStockCurrentAll> VStockCurrentAll { get; set; }
        public virtual DbSet<VStockCurrentList> VStockCurrentList { get; set; }
        public virtual DbSet<VStockDataCodeEdit> VStockDataCodeEdit { get; set; }
        public virtual DbSet<VStockDateCode> VStockDateCode { get; set; }
        public virtual DbSet<VStockDiffTimeReport> VStockDiffTimeReport { get; set; }
        public virtual DbSet<VStockElectBinCard> VStockElectBinCard { get; set; }
        public virtual DbSet<VStockForerp> VStockForerp { get; set; }
        public virtual DbSet<VStockOccupy> VStockOccupy { get; set; }
        public virtual DbSet<VStockPostiton> VStockPostiton { get; set; }
        public virtual DbSet<VSumStockcurrent> VSumStockcurrent { get; set; }
        public virtual DbSet<VSysConfig> VSysConfig { get; set; }
        public virtual DbSet<VSysLog> VSysLog { get; set; }
        public virtual DbSet<VSysParameter> VSysParameter { get; set; }
        public virtual DbSet<VSystemLog> VSystemLog { get; set; }
        public virtual DbSet<VTempAreaPaetWarehouse> VTempAreaPaetWarehouse { get; set; }
        public virtual DbSet<VTempBaseArea> VTempBaseArea { get; set; }
        public virtual DbSet<VTempBaseClient> VTempBaseClient { get; set; }
        public virtual DbSet<VTempBaseDepartment> VTempBaseDepartment { get; set; }
        public virtual DbSet<VTempBaseLineList> VTempBaseLineList { get; set; }
        public virtual DbSet<VTempBaseStockCurrent> VTempBaseStockCurrent { get; set; }
        public virtual DbSet<VTempBaseVendor> VTempBaseVendor { get; set; }
        public virtual DbSet<VTempInMoInfo> VTempInMoInfo { get; set; }
        public virtual DbSet<VTempOutbillDCinT> VTempOutbillDCinT { get; set; }
        public virtual DbSet<VTempOutbillDCinTErpcode> VTempOutbillDCinTErpcode { get; set; }
        public virtual DbSet<VTemporaryAreaCinvReport> VTemporaryAreaCinvReport { get; set; }
        public virtual DbSet<VTradetype> VTradetype { get; set; }
        public virtual DbSet<VUserDept> VUserDept { get; set; }
        public virtual DbSet<VUserFunction> VUserFunction { get; set; }
        public virtual DbSet<VWarningstockReport> VWarningstockReport { get; set; }
        public virtual DbSet<VWcsTaskProcess> VWcsTaskProcess { get; set; }
        public virtual DbSet<VWmsAndEbsQtyDiffReport> VWmsAndEbsQtyDiffReport { get; set; }
        public virtual DbSet<ViewGetCargoRma> ViewGetCargoRma { get; set; }
        public virtual DbSet<ViewGetFirstdatecode> ViewGetFirstdatecode { get; set; }
        public virtual DbSet<ViewGetHandoverCheck> ViewGetHandoverCheck { get; set; }
        public virtual DbSet<ViewGetPalorcarQty> ViewGetPalorcarQty { get; set; }
        public virtual DbSet<ViewGetPalorcarType> ViewGetPalorcarType { get; set; }
        public virtual DbSet<ViewGetPartNorecode> ViewGetPartNorecode { get; set; }
        public virtual DbSet<ViewGetPcCinvcount> ViewGetPcCinvcount { get; set; }
        public virtual DbSet<ViewGetSnLocklist> ViewGetSnLocklist { get; set; }
        public virtual DbSet<ViewGetSnX> ViewGetSnX { get; set; }
        public virtual DbSet<ViewGetSnlistReport> ViewGetSnlistReport { get; set; }
        public virtual DbSet<ViewGetStockDatecodenum> ViewGetStockDatecodenum { get; set; }
        public virtual DbSet<ViewInbillSnreport> ViewInbillSnreport { get; set; }
        public virtual DbSet<ViewInventoryTurnin> ViewInventoryTurnin { get; set; }
        public virtual DbSet<ViewOutbillSnreport> ViewOutbillSnreport { get; set; }
        public virtual DbSet<ViewOutbilledit> ViewOutbilledit { get; set; }
        public virtual DbSet<ViewPositionNostocklistLine> ViewPositionNostocklistLine { get; set; }
        public virtual DbSet<ViewPositionStockLine> ViewPositionStockLine { get; set; }
        public virtual DbSet<ViewPositionStockRatio> ViewPositionStockRatio { get; set; }
        public virtual DbSet<ViewStockCheckbillD> ViewStockCheckbillD { get; set; }
        public virtual DbSet<ViewStockCheckdiff> ViewStockCheckdiff { get; set; }
        public virtual DbSet<ViewStockCurrent> ViewStockCurrent { get; set; }
        public virtual DbSet<ViewTransactionSn> ViewTransactionSn { get; set; }
        public virtual DbSet<WarnCargoMail> WarnCargoMail { get; set; }
        public virtual DbSet<WarnPartShelflife> WarnPartShelflife { get; set; }
        public virtual DbSet<WarnTempStockInfo> WarnTempStockInfo { get; set; }
        public virtual DbSet<WcsTaskProcess> WcsTaskProcess { get; set; }
        public virtual DbSet<WcsTaskProcessD> WcsTaskProcessD { get; set; }
        public virtual DbSet<WcsagvcallBackNotice> WcsagvcallBackNotice { get; set; }
        public virtual DbSet<WipClPartinfo> WipClPartinfo { get; set; }
        public virtual DbSet<WipClPartinfoBak> WipClPartinfoBak { get; set; }
        public virtual DbSet<WipDiscreteJobsV> WipDiscreteJobsV { get; set; }
        public virtual DbSet<WipReturnErrorerpcode> WipReturnErrorerpcode { get; set; }
        public virtual DbSet<WipnegativeissueTemp> WipnegativeissueTemp { get; set; }
        public virtual DbSet<Wipreturninfo> Wipreturninfo { get; set; }
        public virtual DbSet<WmsTableRelation> WmsTableRelation { get; set; }
        public virtual DbSet<WmsYd> WmsYd { get; set; }
        public virtual DbSet<WriteBackTimeSet> WriteBackTimeSet { get; set; }
        public virtual DbSet<Zsict1User> Zsict1User { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Chinese_PRC_CI_AS");

            modelBuilder.Entity<Allocate>(entity =>
            {
                entity.ToTable("ALLOCATE");

                entity.HasIndex(e => e.Special, "ALLOCATE_IK1");

                entity.HasIndex(e => e.Id, "SYS_C0014187")
                    .IsUnique();

                entity.HasIndex(e => e.Cerpcode, "allocate_cerpcode");

                entity.HasIndex(e => e.Cstatus, "allocate_cstatus");

                entity.HasIndex(e => e.Dcreatetime, "allocate_dcreatetime");

                entity.HasIndex(e => e.Cticketcode, "uk_allocate_cticketcode")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Allotype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ALLOTYPE");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1")
                    .HasComment("自定义1  0:普通调拨   1：出库调拨至备料储位   2：备料储位回库");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("critical_part")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Debitowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("debitowner");

                entity.Property(e => e.Debittime)
                    .HasColumnType("datetime")
                    .HasColumnName("debittime");

                entity.Property(e => e.Deliverytime)
                    .HasColumnType("datetime")
                    .HasColumnName("deliverytime");

                entity.Property(e => e.Deliveryuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("deliveryuser");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("idefine5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inasncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("inasncode");

                entity.Property(e => e.IsAllow)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_allow")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.MergeErp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("merge_erp");

                entity.Property(e => e.MergeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("merge_id");

                entity.Property(e => e.Otype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("otype");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Special)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("special")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SpecialType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("special_type")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<AllocateD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__ALLOCATE__DC501A7D43DE35A7");

                entity.ToTable("ALLOCATE_D");

                entity.HasIndex(e => new { e.Cinvcode, e.Cstatus, e.Cpositioncode, e.Ctopositioncode }, "ALLOCATE_D_INDEX_CINVCODE");

                entity.HasIndex(e => e.Id, "ALLOCATE_D_INDEX_ID");

                entity.HasIndex(e => e.Ids, "SYS_C0014200")
                    .IsUnique();

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.AlloType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("allo_type");

                entity.Property(e => e.AsrsNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_num");

                entity.Property(e => e.AsrsStatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinpersoncode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cinpersoncode");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cmidpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cmidpositioncode");

                entity.Property(e => e.Cmidpositionname)
                    .HasMaxLength(100)
                    .HasColumnName("cmidpositionname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("critical_part")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ctoposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ctoposition");

                entity.Property(e => e.Ctopositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ctopositioncode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ioriquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioriquantity");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.IsScan)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_scan")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsUpline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_upline")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.OutbillDIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("outbill_d_ids");

                entity.Property(e => e.PartBond)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("part_bond");

                entity.Property(e => e.Sptype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sptype");

                entity.Property(e => e.Toallocount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("toallocount");

                entity.Property(e => e.Wmstskid)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wmstskid");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.AllocateD)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("ALLOCATE_D_FK");
            });

            modelBuilder.Entity<AllocateDBn>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("ALLOCATE_D_BN_PK_IDS");

                entity.ToTable("ALLOCATE_D_BN");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Bncode)
                    .HasMaxLength(58)
                    .IsUnicode(false)
                    .HasColumnName("BNCODE");

                entity.Property(e => e.Cdefined1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefined1");

                entity.Property(e => e.Cdefined2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefined2");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser");

                entity.Property(e => e.Memo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Snids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SNIDS");
            });

            modelBuilder.Entity<AllocateDHis>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__ALLOCATE__DC501A7DFE21BE4B");

                entity.ToTable("ALLOCATE_D_HIS");

                entity.HasIndex(e => e.Cinvcode, "ALLOCATE_D_HIS_INDEX_CINVCODE");

                entity.HasIndex(e => e.Id, "ALLOCATE_D_HIS_INDEX_ID");

                entity.HasIndex(e => e.Ids, "SYS_C0014213")
                    .IsUnique();

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinpersoncode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cinpersoncode");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ctoposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ctoposition");

                entity.Property(e => e.Ctopositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ctopositioncode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.AllocateDHis)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("ALLOCATE_HIS_FK_ID");
            });

            modelBuilder.Entity<AllocateDMerge>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__ALLOCATE__DC501A7DDE9E4AA6");

                entity.ToTable("ALLOCATE_D_MERGE");

                entity.HasIndex(e => e.AllocateDIds, "ALLOCATE_MERGE_ALLO_ID");

                entity.HasIndex(e => e.AllocateId, "ALLOCATE_MERGE_ALLO_IDS");

                entity.HasIndex(e => new { e.Cinvcode, e.Cinvname }, "ALLOCATE_MERGE_CIN");

                entity.HasIndex(e => e.Ids, "SYS_C0014215")
                    .IsUnique();

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.AlloType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("allo_type");

                entity.Property(e => e.AllocateDIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("allocate_d_ids");

                entity.Property(e => e.AllocateId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("allocate_id");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ctoposition)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ctoposition");

                entity.Property(e => e.Ctopositioncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ctopositioncode");

                entity.Property(e => e.Define1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("define1");

                entity.Property(e => e.Define2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("define2");

                entity.Property(e => e.Define3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("define3");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.IsScan)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_scan")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PartBond)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("part_bond");

                entity.Property(e => e.Sptype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sptype");

                entity.Property(e => e.Toallocount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("toallocount");

                entity.HasOne(d => d.Allocate)
                    .WithMany(p => p.AllocateDMerge)
                    .HasForeignKey(d => d.AllocateId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ALLOCATE_D_MERGE_FK_ID");
            });

            modelBuilder.Entity<AllocateDSn>(entity =>
            {
                entity.ToTable("ALLOCATE_D_SN");

                entity.HasIndex(e => e.Cinvcode, "ALLO_CINVCODE_INDEX");

                entity.HasIndex(e => e.Datecode, "ALLO_DATECODE_INDEX");

                entity.HasIndex(e => e.SnCode, "ALLO_SN_CODE_INDEX");

                entity.HasIndex(e => e.AllocateDIds, "INDEX_ALLOCATE_D_IDS");

                entity.HasIndex(e => e.AllocateId, "INDEX_ALLOCATE_ID");

                entity.HasIndex(e => e.Id, "SYS_C0014219")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.AllocateDIds)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("allocate_d_ids");

                entity.Property(e => e.AllocateId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("allocate_id");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Furnaceno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("furnaceno");

                entity.Property(e => e.Lastvpdowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastvpdowner");

                entity.Property(e => e.Lastvpdtime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastvpdtime");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode")
                    .HasComment("栈板号");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.Rulecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULECODE");

                entity.Property(e => e.ScanIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("scan_ids");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("worktype")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<AllocateHis>(entity =>
            {
                entity.ToTable("ALLOCATE_HIS");

                entity.HasIndex(e => e.Cticketcode, "ALLOCATE_HIS_INDEX_CTICKETCODE");

                entity.HasIndex(e => e.Id, "SYS_C0014244")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Deletetime)
                    .HasColumnType("datetime")
                    .HasColumnName("deletetime");

                entity.Property(e => e.Deleteuser)
                    .HasMaxLength(50)
                    .HasColumnName("deleteuser");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");
            });

            modelBuilder.Entity<AllocateLineSn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ALLOCATE_LINE_SN");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Erpcode)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("erpcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastuptime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastuptime");

                entity.Property(e => e.Lastupuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastupuser");

                entity.Property(e => e.LineIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("line_ids");

                entity.Property(e => e.Lineqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("lineqty");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");

                entity.Property(e => e.SnQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("sn_qty");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<AllocateListout>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ALLOCATE_LISTOUT");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");
            });

            modelBuilder.Entity<AllocateScanQty>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__ALLOCATE__DC501A7DFD29188C");

                entity.ToTable("ALLOCATE_SCAN_QTY");

                entity.HasIndex(e => e.Ids, "SYS_C0014248")
                    .IsUnique();

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.AllocateDIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("allocate_d_ids");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.ScanQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("scan_qty");

                entity.Property(e => e.ScanSn)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("scan_sn");

                entity.Property(e => e.ScanType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("scan_type")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Scandate)
                    .HasColumnType("datetime")
                    .HasColumnName("scandate");

                entity.Property(e => e.Scanuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("scanuser");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");
            });

            modelBuilder.Entity<AsrsShowinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ASRS_SHOWINFO");

                entity.Property(e => e.Caseid)
                    .HasMaxLength(100)
                    .HasColumnName("caseid");

                entity.Property(e => e.Casetype)
                    .HasMaxLength(100)
                    .HasColumnName("casetype");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .HasColumnName("CDefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .HasColumnName("CDefine2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(50)
                    .HasColumnName("CDefine3");

                entity.Property(e => e.CreateUser).HasMaxLength(100);

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(10)
                    .HasColumnName("ctype");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("id");

                entity.Property(e => e.Isshow).HasColumnName("isshow");

                entity.Property(e => e.LineId).HasMaxLength(10);

                entity.Property(e => e.Message)
                    .HasMaxLength(2000)
                    .HasColumnName("message");

                entity.Property(e => e.Operationname)
                    .HasMaxLength(100)
                    .HasColumnName("operationname");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Siteid)
                    .HasMaxLength(10)
                    .HasColumnName("siteid");
            });

            modelBuilder.Entity<Bar>(entity =>
            {
                entity.ToTable("BAR");

                entity.HasIndex(e => e.Id, "SYS_C0014252")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .HasColumnName("cauditpersoncode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("datetime")
                    .HasColumnName("datecode");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");
            });

            modelBuilder.Entity<BarCarton>(entity =>
            {
                entity.ToTable("BAR_CARTON");

                entity.HasIndex(e => e.Id, "SYS_C0014260")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ccode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(20)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cname");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Icapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("icapacity");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("purpose");
            });

            modelBuilder.Entity<BarCartonD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__BAR_CART__DC501A7D4FCD6370");

                entity.ToTable("BAR_CARTON_D");

                entity.HasIndex(e => e.Ids, "SYS_C0014263")
                    .IsUnique();

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Cinbarid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cinbarid");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.HandleStatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("handle_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastmodifyowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifyowner");

                entity.Property(e => e.Lastmodifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmodifytime");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.BarCartonD)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("BAR_CARTON_D_FK_ID");
            });

            modelBuilder.Entity<BarCartonDHis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAR_CARTON_D_HIS");

                entity.Property(e => e.Cinbarid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cinbarid");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Createowner)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Lastmodifyowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifyowner");

                entity.Property(e => e.Lastmodifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmodifytime");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<BarCartonM>(entity =>
            {
                entity.ToTable("BAR_CARTON_M");

                entity.HasIndex(e => e.CartonNo, "BAR_CARTON_M_INDEX_CARTON_NO")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "SYS_C0014272")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.CartonName)
                    .HasMaxLength(50)
                    .HasColumnName("carton_name");

                entity.Property(e => e.CartonNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("carton_no");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Lastmodifyownere)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifyownere");

                entity.Property(e => e.Lastmodifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmodifytime");

                entity.Property(e => e.TypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("type_id");
            });

            modelBuilder.Entity<BarCartonMHis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAR_CARTON_M_HIS");

                entity.Property(e => e.CartonName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("carton_name")
                    .IsFixedLength(true);

                entity.Property(e => e.CartonNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("carton_no");

                entity.Property(e => e.Createowner)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastmodifyownere)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifyownere");

                entity.Property(e => e.Lastmodifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmodifytime");

                entity.Property(e => e.TypeId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("type_id");
            });

            modelBuilder.Entity<BarPack>(entity =>
            {
                entity.ToTable("BAR_PACK");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dpackdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dpackdate");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Palletid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("palletid");

                entity.Property(e => e.Palletname)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("palletname");

                entity.Property(e => e.Pallettype)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("pallettype");
            });

            modelBuilder.Entity<BarPallet>(entity =>
            {
                entity.ToTable("BAR_PALLET");

                entity.HasIndex(e => e.Id, "SYS_C0014286")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ccode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(20)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cname");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Icapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("icapacity");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");
            });

            modelBuilder.Entity<BarPalletD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__BAR_PALL__DC501A7DD625AF75");

                entity.ToTable("BAR_PALLET_D");

                entity.HasIndex(e => e.Cartoncode, "BAR_PALLET_D_CARTONCODE")
                    .IsUnique();

                entity.HasIndex(e => new { e.Id, e.Cartonid }, "SYS_C0014287")
                    .IsUnique();

                entity.HasIndex(e => e.Ids, "SYS_C0014290")
                    .IsUnique();

                entity.HasIndex(e => new { e.Id, e.Cartonid }, "UQ__BAR_PALL__1B4D60630E875D45")
                    .IsUnique();

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Cartoncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cartoncode");

                entity.Property(e => e.Cartonid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cartonid");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.HandleStatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("handle_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastmodifyowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifyowner");

                entity.Property(e => e.Lastmodifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmodifytime");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.BarPalletD)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("BAR_PALLET_D_FK_ID");
            });

            modelBuilder.Entity<BarPalletDHis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAR_PALLET_D_HIS");

                entity.Property(e => e.Cartoncode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cartoncode");

                entity.Property(e => e.Cartonid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cartonid");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Lastmodifyowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifyowner");

                entity.Property(e => e.Lastmodifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmodifytime");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<BarPalletM>(entity =>
            {
                entity.ToTable("BAR_PALLET_M");

                entity.HasIndex(e => e.Palletno, "BAR_PALLET_M_PALLETNO")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "SYS_C0014298")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Lastmodifyownre)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifyownre");

                entity.Property(e => e.Lastmodifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmodifytime");

                entity.Property(e => e.Palletname)
                    .HasMaxLength(50)
                    .HasColumnName("palletname");

                entity.Property(e => e.Palletno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("palletno");

                entity.Property(e => e.TypeId)
                    .HasMaxLength(36)
                    .HasColumnName("type_id");
            });

            modelBuilder.Entity<BarPalletMHis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAR_PALLET_M_HIS");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastmodifyownre)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifyownre");

                entity.Property(e => e.Lastmodifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmodifytime");

                entity.Property(e => e.Palletname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("palletname");

                entity.Property(e => e.Palletno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("palletno");

                entity.Property(e => e.TypeId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("type_id");
            });

            modelBuilder.Entity<BarRepack>(entity =>
            {
                entity.ToTable("BAR_REPACK");

                entity.HasIndex(e => e.RepackNo, "BAR_REPACK_INDEX_REPACK_NO")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "SYS_C0014309")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Createowner)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Lastmodifyowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifyowner");

                entity.Property(e => e.Lastmodifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmodifytime");

                entity.Property(e => e.RepackDate)
                    .HasColumnType("datetime")
                    .HasColumnName("repack_date");

                entity.Property(e => e.RepackNo)
                    .HasMaxLength(50)
                    .HasColumnName("repack_no");

                entity.Property(e => e.RepackOwner)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("repack_owner");

                entity.Property(e => e.Repackid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("repackid");

                entity.Property(e => e.RepackidHis)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("repackid_his");

                entity.Property(e => e.Type)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("type");
            });

            modelBuilder.Entity<BarRepackRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAR_REPACK_RECORD");

                entity.Property(e => e.DemolishItem)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("demolish_item");

                entity.Property(e => e.DemolishNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("demolish_no");

                entity.Property(e => e.DemolishSn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("demolish_sn");

                entity.Property(e => e.HandleType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("handle_type")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.PackNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pack_no");

                entity.Property(e => e.PackType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("pack_type");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.RepackDate)
                    .HasColumnType("datetime")
                    .HasColumnName("repack_date");

                entity.Property(e => e.RepackOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("repack_owner");
            });

            modelBuilder.Entity<BarSnSplit>(entity =>
            {
                entity.ToTable("BAR_SN_SPLIT");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.SplitSn)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("split_sn");

                entity.Property(e => e.SplitSnQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("split_sn_qty");
            });

            modelBuilder.Entity<BarSnSplitD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__BAR_SN_S__DC501A7D26D7D3FF");

                entity.ToTable("BAR_SN_SPLIT_D");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.SplitSn)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("split_sn");

                entity.Property(e => e.SplitSnQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("split_sn_qty");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.BarSnSplitD)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("BAR_SN_SPLIT_D_FK");
            });

            modelBuilder.Entity<BarType>(entity =>
            {
                entity.ToTable("BAR_TYPE");

                entity.HasIndex(e => e.Id, "SYS_C0014319")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.BarcodeType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("barcode_type")
                    .HasDefaultValueSql("('39')");

                entity.Property(e => e.Craeteowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("craeteowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Lastmodifyowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifyowner");

                entity.Property(e => e.Lastmodifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmodifytime");

                entity.Property(e => e.MaxQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("max_qty");

                entity.Property(e => e.Mix)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("mix")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.Type)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.Typename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<BaseArea>(entity =>
            {
                entity.ToTable("BASE_AREA");

                entity.HasIndex(e => e.Id, "SYS_C0014322")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.AreaName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("area_name");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Flag)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("flag");

                entity.Property(e => e.HandoverCargo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("handover_cargo");

                entity.Property(e => e.HandoverCargoName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("handover_cargo_name");

                entity.Property(e => e.IsControl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("is_control")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsTemporaryArea)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("is_temporary_area")
                    .HasComment("是否暂存区域  0：不是  1：是");

                entity.Property(e => e.Lastvpdowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastvpdowner");

                entity.Property(e => e.Lastvpdtime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastvpdtime");

                entity.Property(e => e.Memo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("memo");
            });

            modelBuilder.Entity<BaseAsrsDb>(entity =>
            {
                entity.ToTable("BASE_ASRS_DB");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.DbDatebase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("db_datebase");

                entity.Property(e => e.DbIp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("db_ip");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser");

                entity.Property(e => e.Memo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("password");
            });

            modelBuilder.Entity<BaseBarSn>(entity =>
            {
                entity.ToTable("BASE_BAR_SN");

                entity.HasIndex(e => e.Id, "SYS_C0014334")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.ArbitraryVal1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArbitraryVal10)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArbitraryVal2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArbitraryVal3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArbitraryVal4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArbitraryVal5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArbitraryVal6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArbitraryVal7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArbitraryVal8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ArbitraryVal9)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BarCodeType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BarType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("bar_type")
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("batch_number");

                entity.Property(e => e.BatchQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("batch_qty");

                entity.Property(e => e.Bonded)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("bonded")
                    .IsFixedLength(true);

                entity.Property(e => e.BoxNum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("boxNum")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.CinvcodeName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode_name");

                entity.Property(e => e.ClientCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClinetName).HasMaxLength(240);

                entity.Property(e => e.CodeRuleId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.Datecode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("datecode");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_time");

                entity.Property(e => e.PoLineId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Po_LineId");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("po_number");

                entity.Property(e => e.PrintRuleId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrintVal1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrintVal10)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrintVal2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrintVal3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrintVal4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrintVal5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrintVal6)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrintVal7)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrintVal8)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrintVal9)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("production_date");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");

                entity.Property(e => e.SnType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("sn_type")
                    .IsFixedLength(true);

                entity.Property(e => e.SoLineId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("So_LineId");

                entity.Property(e => e.SoNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("So_Number");

                entity.Property(e => e.Validitydate)
                    .HasColumnType("decimal(6, 0)")
                    .HasColumnName("validitydate");

                entity.Property(e => e.Vendor)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("vendor");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("vendor_name");
            });

            modelBuilder.Entity<BaseBarcodePrint>(entity =>
            {
                entity.ToTable("BASE_BARCODE_PRINT");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BarCodeType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreateUser)
                    .HasMaxLength(50)
                    .HasComment("创建人");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("状态");

                entity.Property(e => e.DisableTime)
                    .HasColumnType("datetime")
                    .HasComment("作废时间");

                entity.Property(e => e.DisableUser)
                    .HasMaxLength(50)
                    .HasComment("作废人");

                entity.Property(e => e.EnableTime)
                    .HasColumnType("datetime")
                    .HasComment("启用时间");

                entity.Property(e => e.EnableUser)
                    .HasMaxLength(50)
                    .HasComment("启用人");

                entity.Property(e => e.PrintCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("打印规则编号");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(50)
                    .HasComment("打印规则名称");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");
            });

            modelBuilder.Entity<BaseBarcodePrintD>(entity =>
            {
                entity.ToTable("BASE_BARCODE_PRINT_D");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsNeedVal)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PrintId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasComment("打印规则");

                entity.Property(e => e.PrintItemName)
                    .HasMaxLength(50)
                    .HasComment("名称");

                entity.Property(e => e.PrintItemType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("类型");

                entity.Property(e => e.PrintRemark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.PrintSeq).HasComment("序号");
            });

            modelBuilder.Entity<BaseBarcodeRule>(entity =>
            {
                entity.ToTable("BASE_BARCODE_RULE");

                entity.HasIndex(e => e.Rulecode, "ind_BASE_BARCODE_RULE_RULECODE");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATEDATE")
                    .HasComment("创建时间");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER")
                    .HasComment("创建人");

                entity.Property(e => e.DefaultPrintId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Disabledate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISABLEDATE")
                    .HasComment("禁用时间");

                entity.Property(e => e.Disableuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DISABLEUSER")
                    .HasComment("禁用人");

                entity.Property(e => e.Enabledate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENABLEDATE")
                    .HasComment("启用时间");

                entity.Property(e => e.Enableuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENABLEUSER")
                    .HasComment("启用人");

                entity.Property(e => e.Modifydate)
                    .HasColumnType("datetime")
                    .HasColumnName("MODIFYDATE")
                    .HasComment("最后修改时间");

                entity.Property(e => e.Modifyuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MODIFYUSER")
                    .HasComment("最后修改人");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REMARK")
                    .HasComment("备注");

                entity.Property(e => e.Rulecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULECODE")
                    .HasComment("条码规则编号");

                entity.Property(e => e.Rulelen)
                    .HasColumnName("RULELEN")
                    .HasComment("总位数");

                entity.Property(e => e.Rulename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULENAME")
                    .HasComment("条码规则名称");

                entity.Property(e => e.Ruletype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("RULETYPE")
                    .HasComment("类别");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STATUS")
                    .HasComment("状态(0=启用 1=禁用)");
            });

            modelBuilder.Entity<BaseBarcodeRuleD>(entity =>
            {
                entity.ToTable("BASE_BARCODE_RULE_D");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Barcodetypeid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BARCODETYPEID")
                    .HasComment("类型");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATEDATE")
                    .HasComment("创建时间");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER")
                    .HasComment("创建人");

                entity.Property(e => e.Defaultvalue)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEFAULTVALUE")
                    .HasComment("默认值");

                entity.Property(e => e.Formatid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FORMATID")
                    .HasComment("格式");

                entity.Property(e => e.Ifrom)
                    .HasColumnName("IFROM")
                    .HasComment("开始位置");

                entity.Property(e => e.Ilength)
                    .HasColumnName("ILENGTH")
                    .HasComment("长度");

                entity.Property(e => e.Ito)
                    .HasColumnName("ITO")
                    .HasComment("结束位置");

                entity.Property(e => e.Mandatory)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MANDATORY")
                    .HasComment("必填项");

                entity.Property(e => e.Modifydate)
                    .HasColumnType("datetime")
                    .HasColumnName("MODIFYDATE")
                    .HasComment("最后修改时间");

                entity.Property(e => e.Modifyuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MODIFYUSER")
                    .HasComment("最后修改人");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NAME")
                    .HasComment("名称");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REMARK")
                    .HasComment("说明");

                entity.Property(e => e.Ruleid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RULEID")
                    .HasComment("主表ID");

                entity.Property(e => e.Sno)
                    .HasColumnName("SNO")
                    .HasComment("项次");
            });

            modelBuilder.Entity<BaseBom>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_BOM");

                entity.Property(e => e.BomSource)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bom_source")
                    .HasDefaultValueSql("('WMS')");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Lastmodifyowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifyowner");

                entity.Property(e => e.Lastmodifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmodifytime");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<BaseBomD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("BASE_BOM_D_PK");

                entity.ToTable("BASE_BOM_D");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BadRatio)
                    .HasColumnType("decimal(7, 4)")
                    .HasColumnName("bad_ratio")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity")
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.Lastmodifyowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifyowner");

                entity.Property(e => e.Lastmodifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastmodifytime");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<BaseCargoRma>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_CARGO_RMA");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cpositionname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cpositionname");

                entity.Property(e => e.Cstatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<BaseCargooutPart>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_CARGOOUT_PART");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Parthead)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("parthead");

                entity.Property(e => e.Parttype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("parttype")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<BaseCargospace>(entity =>
            {
                entity.ToTable("BASE_CARGOSPACE");

                entity.HasIndex(e => e.Ipermitmix, "BASE_CARGOSPACE_Idex_ipermitmix");

                entity.HasIndex(e => e.Cstatus, "BASE_CARGOSPACE_idex");

                entity.HasIndex(e => new { e.Cstatus, e.Warehouseid }, "BASE_CARGOSPACE_idex_cstatusANDid");

                entity.HasIndex(e => e.Cstatus, "BASE_CARGOSPACE_index_cstatus");

                entity.HasIndex(e => e.Ipermitmix, "Idex_ipermitmix");

                entity.HasIndex(e => e.Cstatus, "index2");

                entity.HasIndex(e => e.Warehouseid, "index_basecargospace_warehouseid");

                entity.HasIndex(e => e.Cstatus, "index_cstatus");

                entity.HasIndex(e => e.Cstatus, "indexcstatus");

                entity.HasIndex(e => e.Cpositioncode, "uk_BASE_CARGOSPACE_cpositioncode")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cx");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cy");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("imaxcapacity");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipermitmix")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsAllo)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_allo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Islocked)
                    .HasColumnName("islocked")
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否被锁定(锁定后不可入库或出库到该储位或其里面的储位)");

                entity.Property(e => e.Ivolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ivolume");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Lastcstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastcstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.Occupyvolume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("occupyvolume")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Occupyweight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("occupyweight")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pallet_code");

                entity.Property(e => e.Productcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("productcode");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("volume");

                entity.Property(e => e.Volumeunit)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("volumeunit");

                entity.Property(e => e.Warehouseid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("weight");

                entity.Property(e => e.Weightunit)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("weightunit");
            });

            modelBuilder.Entity<BaseCargospaceCx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_CARGOSPACE_CX");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cx");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cy");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("imaxcapacity");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipermitmix");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority");

                entity.Property(e => e.IsAllo)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_allo");

                entity.Property(e => e.Ivolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ivolume");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Lastcstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastcstatus");

                entity.Property(e => e.Warehouseid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");
            });

            modelBuilder.Entity<BaseCargospaceNewTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_CARGOSPACE_NEW_TEMP");

                entity.Property(e => e.Cw)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cw");

                entity.Property(e => e.Qy)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("qy");
            });

            modelBuilder.Entity<BaseCargospaceTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_CARGOSPACE_TEMP");

                entity.Property(e => e.Calias)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cdefine1)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2).HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo).HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createowner).HasColumnName("CREATEOWNER");

                entity.Property(e => e.Createtime).HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ctype)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cusetype)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cx)
                    .IsUnicode(false)
                    .HasColumnName("cx");

                entity.Property(e => e.Cy)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cy");

                entity.Property(e => e.Cz)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.Ddefine3).HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4).HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .IsRequired()
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.Flag)
                    .HasMaxLength(10)
                    .HasColumnName("flag")
                    .IsFixedLength(true);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5).HasColumnName("idefine5");

                entity.Property(e => e.Iheight).HasColumnName("iheight");

                entity.Property(e => e.Ilength).HasColumnName("ilength");

                entity.Property(e => e.Imaxcapacity).HasColumnName("imaxcapacity");

                entity.Property(e => e.Ioccupyqty).HasColumnName("ioccupyqty");

                entity.Property(e => e.Ipermitmix).HasColumnName("ipermitmix");

                entity.Property(e => e.Ipriority)
                    .IsRequired()
                    .HasColumnName("ipriority");

                entity.Property(e => e.IsAllo).HasColumnName("is_allo");

                entity.Property(e => e.Ivolume).HasColumnName("ivolume");

                entity.Property(e => e.Iwidth).HasColumnName("iwidth");

                entity.Property(e => e.Lastcstatus)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("lastcstatus");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");

                entity.Property(e => e.PalletCode).HasColumnName("PALLET_CODE");

                entity.Property(e => e.Volume)
                    .HasColumnName("VOLUME")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Volumeunit).HasColumnName("VOLUMEUNIT");

                entity.Property(e => e.Warehouseid)
                    .IsRequired()
                    .HasColumnName("warehouseid");

                entity.Property(e => e.Weight).HasColumnName("WEIGHT");

                entity.Property(e => e.Weightunit).HasColumnName("WEIGHTUNIT");
            });

            modelBuilder.Entity<BaseCargospaceXx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_CARGOSPACE_XX");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");
            });

            modelBuilder.Entity<BaseCargospacebak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_CARGOSPACEBAK");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cx");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cy");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("imaxcapacity");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipermitmix");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority");

                entity.Property(e => e.Ivolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ivolume");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Warehouseid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");
            });

            modelBuilder.Entity<BaseClient>(entity =>
            {
                entity.ToTable("BASE_CLIENT");

                entity.HasIndex(e => e.Id, "SYS_C0014360")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Caddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("caddress");

                entity.Property(e => e.Calias)
                    .HasMaxLength(50)
                    .HasColumnName("calias");

                entity.Property(e => e.Cclientid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientid");

                entity.Property(e => e.Cclientname)
                    .IsRequired()
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclientname");

                entity.Property(e => e.Ccontactperson)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccontactperson");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cphone");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ilever)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ilever");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");
            });

            modelBuilder.Entity<BaseCraneconfig>(entity =>
            {
                entity.ToTable("BASE_CRANECONFIG");

                entity.HasIndex(e => e.Craneid, "BASE_CRANECONFIG_CRANEID_uk")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Craneid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CRANEID");

                entity.Property(e => e.Craneip)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CRANEIP");

                entity.Property(e => e.Cranename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CRANENAME");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Discontinuetime)
                    .HasColumnType("date")
                    .HasColumnName("DISCONTINUETIME");

                entity.Property(e => e.Discontinueuser)
                    .HasMaxLength(50)
                    .HasColumnName("DISCONTINUEUSER");

                entity.Property(e => e.Equipmentname)
                    .HasMaxLength(100)
                    .HasColumnName("EQUIPMENTNAME");

                entity.Property(e => e.Flag)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FLAG");

                entity.Property(e => e.Groupid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GROUPID");

                entity.Property(e => e.ModifyTime).HasColumnType("date");

                entity.Property(e => e.Modifyuser)
                    .HasMaxLength(50)
                    .HasColumnName("MODIFYUSER");

                entity.Property(e => e.Plctype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PLCType")
                    .HasDefaultValueSql("('LK')");

                entity.Property(e => e.Remark).HasColumnName("REMARK");

                entity.Property(e => e.Sitecount).HasColumnName("SITECOUNT");

                entity.Property(e => e.Supplier)
                    .HasMaxLength(20)
                    .HasColumnName("SUPPLIER");

                entity.Property(e => e.Ttype)
                    .HasMaxLength(100)
                    .HasColumnName("TTYPE");
            });

            modelBuilder.Entity<BaseCraneconfigDTrade>(entity =>
            {
                entity.HasKey(e => e.Ids);

                entity.ToTable("BASE_CRANECONFIG_D_Trade");

                entity.HasIndex(e => e.Ids, "IX_BASE_CRANECONFIG_D_Trade");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.CraneId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CraneID");

                entity.Property(e => e.CraneName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ERPCode");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("交易名");

                entity.Property(e => e.SiteId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SIteID");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SIteName");

                entity.Property(e => e.Type)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BaseCraneconfigDetial>(entity =>
            {
                entity.ToTable("BASE_CRANECONFIG_DETIAL");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Agvsite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AGVSITE");

                entity.Property(e => e.Agvsitetype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("AGVSITETYPE");

                entity.Property(e => e.Craneid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CRANEID");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Defulsite)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEFULSITE")
                    .HasComment("0是1否");

                entity.Property(e => e.Discontinuetime)
                    .HasColumnType("date")
                    .HasColumnName("DISCONTINUETIME");

                entity.Property(e => e.Discontinueuser)
                    .HasMaxLength(50)
                    .HasColumnName("DISCONTINUEUSER");

                entity.Property(e => e.Flag)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FLAG")
                    .HasComment("0启用 1停用");

                entity.Property(e => e.Format)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORMAT")
                    .HasComment("规格(1是110 2是115)");

                entity.Property(e => e.Ids)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDS")
                    .HasComment("base_craneconfig主键ID");

                entity.Property(e => e.IsDefaultIn)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_DEFAULT_IN")
                    .HasComment("是否默认如站口");

                entity.Property(e => e.IsOccupy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_OCCUPY");

                entity.Property(e => e.Ismonitor)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ISMONITOR");

                entity.Property(e => e.Iswhole)
                    .HasMaxLength(20)
                    .HasColumnName("ISWHOLE");

                entity.Property(e => e.Monitortype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONITORTYPE");

                entity.Property(e => e.Plcregion)
                    .HasMaxLength(50)
                    .HasColumnName("PLCREGION");

                entity.Property(e => e.Relationsite)
                    .HasMaxLength(50)
                    .HasColumnName("RELATIONSITE");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Rgvsite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RGVSITE");

                entity.Property(e => e.Siteid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SITEID");

                entity.Property(e => e.Sitename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SITENAME");

                entity.Property(e => e.Sitetype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SITETYPE")
                    .HasComment("0全部 1入 2出");

                entity.Property(e => e.Storagesite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STORAGESITE");

                entity.Property(e => e.Storey)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STOREY");

                entity.Property(e => e.Storeylimit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STOREYLIMIT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATETIME");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Yorderby)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("YORDERBY");
            });

            modelBuilder.Entity<BaseCraneconfigDetialScan>(entity =>
            {
                entity.ToTable("BASE_CRANECONFIG_DETIAL_SCAN");

                entity.Property(e => e.Id)
                    .HasMaxLength(100)
                    .HasColumnName("id");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .HasColumnName("createuser");

                entity.Property(e => e.Discontinuetime)
                    .HasColumnType("date")
                    .HasColumnName("DISCONTINUETIME");

                entity.Property(e => e.Discontinueuser)
                    .HasMaxLength(50)
                    .HasColumnName("DISCONTINUEUSER");

                entity.Property(e => e.Flag)
                    .HasMaxLength(100)
                    .HasColumnName("flag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ids)
                    .HasMaxLength(100)
                    .HasColumnName("ids")
                    .HasComment("base_craneconfig_detial主键ID");

                entity.Property(e => e.ScanType).HasMaxLength(100);

                entity.Property(e => e.Scanid)
                    .HasMaxLength(100)
                    .HasColumnName("scanid")
                    .HasComment("扫描器ID");

                entity.Property(e => e.Scanip)
                    .HasMaxLength(100)
                    .HasColumnName("scanip")
                    .HasComment("扫描器IP");

                entity.Property(e => e.Scanname)
                    .HasMaxLength(100)
                    .HasColumnName("scanname")
                    .HasComment("扫描器名称");

                entity.Property(e => e.Scanportno)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("scanportno");

                entity.Property(e => e.Serverscanip)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("serverscanip");

                entity.Property(e => e.Siteid)
                    .HasMaxLength(100)
                    .HasColumnName("siteid")
                    .HasComment("站点ID");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(100)
                    .HasColumnName("updateuser");
            });

            modelBuilder.Entity<BaseCraneconfigPlcaddr>(entity =>
            {
                entity.ToTable("BASE_CRANECONFIG_PLCADDR");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.Ascription)
                    .HasMaxLength(50)
                    .HasColumnName("ASCRIPTION");

                entity.Property(e => e.Creatertime)
                    .HasColumnType("date")
                    .HasColumnName("CREATERTIME");

                entity.Property(e => e.Createruser)
                    .HasMaxLength(50)
                    .HasColumnName("CREATERUSER");

                entity.Property(e => e.Define1)
                    .HasMaxLength(50)
                    .HasColumnName("DEFINE1");

                entity.Property(e => e.Define2)
                    .HasColumnType("date")
                    .HasColumnName("DEFINE2");

                entity.Property(e => e.Define3)
                    .HasMaxLength(100)
                    .HasColumnName("DEFINE3");

                entity.Property(e => e.Define4)
                    .HasColumnType("date")
                    .HasColumnName("DEFINE4");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .HasColumnName("IDS");

                entity.Property(e => e.Meaning)
                    .HasMaxLength(200)
                    .HasColumnName("MEANING");

                entity.Property(e => e.Plcaddress)
                    .HasMaxLength(50)
                    .HasColumnName("PLCADDRESS");

                entity.Property(e => e.Plcregion)
                    .HasMaxLength(50)
                    .HasColumnName("PLCREGION");

                entity.Property(e => e.Remark)
                    .HasMaxLength(300)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("date")
                    .HasColumnName("UPDATETIME");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(50)
                    .HasColumnName("UPDATEUSER");
            });

            modelBuilder.Entity<BaseCraneconfigTradetype>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__BASE_CRA__C4971C3B5BC96DAD");

                entity.ToTable("BASE_CRANECONFIG_TRADETYPE");

                entity.Property(e => e.Ids)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.Cerpcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Inoroutcode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INOROUTCODE");

                entity.Property(e => e.Inoroutname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INOROUTNAME");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Typeid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPEID");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<BaseCraneconfigTradetypeD>(entity =>
            {
                entity.ToTable("BASE_CRANECONFIG_TRADETYPE_D");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Billname)
                    .HasMaxLength(50)
                    .HasColumnName("billname");

                entity.Property(e => e.Billno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("billno");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .HasColumnName("createuser");

                entity.Property(e => e.Siteid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("siteid");

                entity.Property(e => e.Tradetypeids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tradetypeids");
            });

            modelBuilder.Entity<BaseDeliverDepartment>(entity =>
            {
                entity.ToTable("BASE_DELIVER_DEPARTMENT");

                entity.HasIndex(e => e.Id, "SYS_C0014362")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Departmentname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("departmentname");

                entity.Property(e => e.Departmentno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("departmentno");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser");

                entity.Property(e => e.Operatorno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("operatorno");
            });

            modelBuilder.Entity<BaseDepartment>(entity =>
            {
                entity.ToTable("BASE_DEPARTMENT");

                entity.HasIndex(e => e.Id, "SYS_C0014364")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Departmentname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("departmentname");

                entity.Property(e => e.Departmentno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("departmentno");
            });

            modelBuilder.Entity<BaseDepartmentOtype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_DEPARTMENT_OTYPE");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Departmentname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("departmentname");

                entity.Property(e => e.Departmentno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("departmentno");

                entity.Property(e => e.Flag)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("flag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Typecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("typecode");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("updateuser");
            });

            modelBuilder.Entity<BaseDocuclass>(entity =>
            {
                entity.ToTable("BASE_DOCUCLASS");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(50)
                    .HasColumnName("CCREATEOWNERCODE")
                    .HasComment("创建人");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("date")
                    .HasColumnName("DCREATETIME")
                    .HasComment("创建时间");

                entity.Property(e => e.Docuname)
                    .HasMaxLength(500)
                    .HasColumnName("DOCUNAME")
                    .HasComment("单据名称");

                entity.Property(e => e.Docunature)
                    .HasMaxLength(100)
                    .HasColumnName("DOCUNATURE")
                    .HasComment("单据性质");

                entity.Property(e => e.Docutypecode)
                    .HasMaxLength(50)
                    .HasColumnName("DOCUTYPECODE")
                    .HasComment("单据别编号");

                entity.Property(e => e.Jobname)
                    .HasMaxLength(100)
                    .HasColumnName("JOBNAME")
                    .HasComment("作业名称");

                entity.Property(e => e.Jobnumber)
                    .HasMaxLength(50)
                    .HasColumnName("JOBNUMBER")
                    .HasComment("对应作业编号");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .HasColumnName("LASTUPDATEOWNER")
                    .HasComment("最后更新人");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("date")
                    .HasColumnName("LASTUPDATETIME")
                    .HasComment("最后更新时间");

                entity.Property(e => e.Modulename)
                    .HasMaxLength(100)
                    .HasColumnName("MODULENAME")
                    .HasComment("模组名称");

                entity.Property(e => e.Moduletype)
                    .HasMaxLength(50)
                    .HasColumnName("MODULETYPE")
                    .HasComment("模组别");
            });

            modelBuilder.Entity<BaseDocureason>(entity =>
            {
                entity.ToTable("BASE_DOCUREASON");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Actionscope)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("actionscope")
                    .HasComment("作用域 1：入库  2：出库");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode")
                    .HasComment("创建人");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime")
                    .HasComment("创建时间");

                entity.Property(e => e.Isfromerp)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("isfromerp");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner")
                    .HasComment("最后更新人");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime")
                    .HasComment("最后更新时间");

                entity.Property(e => e.Reasoncode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("reasoncode")
                    .HasComment("理由码编号");

                entity.Property(e => e.Reasoncontent)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reasoncontent")
                    .HasComment("理由码说明");

                entity.Property(e => e.States)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("states")
                    .HasComment("状态码 Y:可用 N：不可用");
            });

            modelBuilder.Entity<BaseFileuplod>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_FILEUPLOD");

                entity.Property(e => e.Filename)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("filename");

                entity.Property(e => e.Filesize)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("filesize");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Luno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("luno");

                entity.Property(e => e.Lusn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lusn");

                entity.Property(e => e.Newfilename)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("newfilename");

                entity.Property(e => e.Path)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("path");

                entity.Property(e => e.Po)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("po");

                entity.Property(e => e.Prantno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("prantno");

                entity.Property(e => e.Sn)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sn");

                entity.Property(e => e.Suffix)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("suffix");
            });

            modelBuilder.Entity<BaseInterfaceRunTime>(entity =>
            {
                entity.ToTable("Base_Interface_RunTime");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE3");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Jobdesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("JOBDESC");

                entity.Property(e => e.Jobname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOBNAME");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Runtime)
                    .HasColumnType("datetime")
                    .HasColumnName("RUNTIME");
            });

            modelBuilder.Entity<BaseInterfacelog>(entity =>
            {
                entity.ToTable("BASE_INTERFACELOG");

                entity.HasIndex(e => e.Createdate, "BASE_INTERFACELOG_CREATEDATE");

                entity.HasIndex(e => e.Ticketcode, "BASE_INTERFACELOG_TICKETCODE");

                entity.HasIndex(e => e.Typeid, "BASE_INTERFACELOG_TYPEID");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Bo).HasColumnName("BO");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATEDATE");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREATEOWNER");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Errormsg).HasColumnName("ERRORMSG");

                entity.Property(e => e.Methodname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("METHODNAME");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Ticketcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TICKETCODE");

                entity.Property(e => e.Typeid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPEID");

                entity.Property(e => e.Typename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<BaseInterfacelog202003>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_INTERFACELOG_202003");

                entity.Property(e => e.Bo).HasColumnName("BO");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATEDATE");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREATEOWNER");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Errormsg).HasColumnName("ERRORMSG");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Methodname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("METHODNAME");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Ticketcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TICKETCODE");

                entity.Property(e => e.Typeid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPEID");

                entity.Property(e => e.Typename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<BaseInterfacelog202004>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_INTERFACELOG_202004");

                entity.Property(e => e.Bo).HasColumnName("BO");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATEDATE");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREATEOWNER");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Errormsg).HasColumnName("ERRORMSG");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Methodname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("METHODNAME");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Ticketcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TICKETCODE");

                entity.Property(e => e.Typeid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPEID");

                entity.Property(e => e.Typename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<BaseJobRunTime>(entity =>
            {
                entity.ToTable("Base_JOB_RunTime");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE3");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Jobdesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("JOBDESC");

                entity.Property(e => e.Jobname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("JOBNAME");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Runtime)
                    .HasColumnType("datetime")
                    .HasColumnName("RUNTIME");
            });

            modelBuilder.Entity<BaseLineInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_LINE_INFO");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.Type)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("type");

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("vendor_code");

                entity.Property(e => e.VendorName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("vendor_name");
            });

            modelBuilder.Entity<BaseLineList>(entity =>
            {
                entity.ToTable("BASE_LINE_LIST");

                entity.HasIndex(e => e.Id, "SYS_C0014371")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.Cstatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LastUpdDate)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_date");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("lineid");
            });

            modelBuilder.Entity<BaseLineVendor>(entity =>
            {
                entity.ToTable("BASE_LINE_VENDOR");

                entity.HasIndex(e => e.Id, "SYS_C0014373")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .HasColumnName("id");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(30)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(20)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(50)
                    .HasColumnName("vendor_code");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(50)
                    .HasColumnName("vendor_name");
            });

            modelBuilder.Entity<BaseMaterialsArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_MATERIALS_AREA");

                entity.Property(e => e.AreaName)
                    .HasMaxLength(100)
                    .HasColumnName("area_name");

                entity.Property(e => e.MaterialsDevelopmentArea)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("materials_development_area");
            });

            modelBuilder.Entity<BaseMrbMail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_MRB_MAIL");

                entity.Property(e => e.Cpn)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cpn");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Mail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mail");

                entity.Property(e => e.Memo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Sendtype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sendtype");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Userno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userno");
            });

            modelBuilder.Entity<BaseOfCc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_OF_CC");

                entity.Property(e => e.Cw)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cw");

                entity.Property(e => e.Item1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("item1");

                entity.Property(e => e.Item2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("item2");

                entity.Property(e => e.Qk)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("qk");
            });

            modelBuilder.Entity<BaseOp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_OP");

                entity.Property(e => e.Bh)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("bh");

                entity.Property(e => e.Bm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("bm");

                entity.Property(e => e.Xm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("xm");
            });

            modelBuilder.Entity<BaseOperator>(entity =>
            {
                entity.ToTable("BASE_OPERATOR");

                entity.HasIndex(e => e.Caccountid, "BASE_OPERATOR_INDEX_");

                entity.HasIndex(e => e.Id, "SYS_C0014378")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Caccountid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("caccountid");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Ccreateowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateowner");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cdepartment)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdepartment");

                entity.Property(e => e.Cduty)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cduty");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coperatorname)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coperatorname");

                entity.Property(e => e.Cphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cphone");

                entity.Property(e => e.Cshift)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cshift");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");
            });

            modelBuilder.Entity<BaseOperatorArea>(entity =>
            {
                entity.ToTable("BASE_OPERATOR_AREA");

                entity.HasIndex(e => new { e.Caccountid, e.Ccargoid }, "BASE_OPERATOR_AREA_INDEX_BASE");

                entity.HasIndex(e => e.Id, "SYS_C0014382")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Caccountid)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("caccountid");

                entity.Property(e => e.Ccargoid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccargoid");

                entity.Property(e => e.Ccreateowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateowner");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");
            });

            modelBuilder.Entity<BaseOperatorAreaBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_OPERATOR_AREA_BAK");

                entity.Property(e => e.Caccountid)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("caccountid");

                entity.Property(e => e.Ccargoid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccargoid");

                entity.Property(e => e.Ccreateowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateowner");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");
            });

            modelBuilder.Entity<BaseOperatorAreaNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_OPERATOR_AREA_NEW");

                entity.HasIndex(e => e.AreaId, "BASE_O_A_NEW_INDEX_AREAID");

                entity.HasIndex(e => e.Caccountid, "BASE_O_A_NEW_INDEX_CACCOUNTID");

                entity.Property(e => e.AreaId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("area_id");

                entity.Property(e => e.Caccountid)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("caccountid");

                entity.Property(e => e.Ccreateowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateowner");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");
            });

            modelBuilder.Entity<BasePackageScan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Base_PackageScan");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .HasColumnName("CDefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .HasColumnName("CDefine2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(50)
                    .HasColumnName("CDefine3");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUser).HasMaxLength(100);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("IP");

                entity.Property(e => e.MachineId)
                    .HasMaxLength(50)
                    .HasColumnName("MachineID");

                entity.Property(e => e.MachineName).HasMaxLength(50);

                entity.Property(e => e.PackageNo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("PackageNO");

                entity.Property(e => e.Remark).HasMaxLength(100);
            });

            modelBuilder.Entity<BasePackageScanNew>(entity =>
            {
                entity.ToTable("Base_PackageScan_New");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .HasColumnName("CDefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .HasColumnName("CDefine2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(50)
                    .HasColumnName("CDefine3");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUser).HasMaxLength(100);

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("IP");

                entity.Property(e => e.MachineId)
                    .HasMaxLength(50)
                    .HasColumnName("MachineID");

                entity.Property(e => e.MachineName).HasMaxLength(50);

                entity.Property(e => e.PackageNo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("PackageNO");

                entity.Property(e => e.Remark).HasMaxLength(100);
            });

            modelBuilder.Entity<BasePart>(entity =>
            {
                entity.ToTable("BASE_PART");

                entity.HasIndex(e => e.Cerpcode, "BASE_PART_INDEX_CERPCODE");

                entity.HasIndex(e => e.Cpartnumber, "BASE_PART_INDEX_CPARTNUMBER");

                entity.HasIndex(e => e.Id, "SYS_C0014393")
                    .IsUnique();

                entity.HasIndex(e => e.Cpartnumber, "uk_BASE_PART_cpartnumber")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Bonded)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("bonded")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Boxnum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("boxnum")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.Calias)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cbarrule)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cbarrule");

                entity.Property(e => e.Cdefaultcargo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cdefaultcargo");

                entity.Property(e => e.Cdefaultvendor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdefaultvendor");

                entity.Property(e => e.Cdefaultware)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cdefaultware");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinrule)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cinrule");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutrule)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("coutrule");

                entity.Property(e => e.Cpartname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpartname");

                entity.Property(e => e.Cpartnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpartnumber");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Csafeqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("csafeqty");

                entity.Property(e => e.Csafeqtyceiling)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("csafeqtyceiling");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ctype)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ctype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cversion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cversion");

                entity.Property(e => e.Cvolume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cvolume");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.ExpDays)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("exp_days");

                entity.Property(e => e.Icw)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("icw");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Ineedcheck)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ineedcheck")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ineedwarn)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ineedwarn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inw)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("inw");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Mtype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("mtype");

                entity.Property(e => e.Productcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("productcode");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<BasePartArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_PART_AREA");

                entity.HasIndex(e => e.AreaId, "BASE_P_A_INDEX_AREA_ID");

                entity.HasIndex(e => e.Partnumber, "BASE_P_A_INDEX_PARTNUMBER");

                entity.Property(e => e.AreaId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("area_id");

                entity.Property(e => e.Ccreateowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateowner");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Partnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("partnumber");
            });

            modelBuilder.Entity<BasePartAreaBack>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_PART_AREA_BACK");

                entity.Property(e => e.AreaId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("area_id");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority");

                entity.Property(e => e.Partnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("partnumber");
            });

            modelBuilder.Entity<BasePartAreaCx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_PART_AREA_CX");

                entity.Property(e => e.AreaId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("area_id");

                entity.Property(e => e.Ccreateowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateowner");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority");

                entity.Property(e => e.Partnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("partnumber");
            });

            modelBuilder.Entity<BasePartAreaXx>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_PART_AREA_XX");

                entity.Property(e => e.AreaId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("area_id");

                entity.Property(e => e.Ccreateowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateowner");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority");

                entity.Property(e => e.Partnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("partnumber");
            });

            modelBuilder.Entity<BasePartCargospace>(entity =>
            {
                entity.ToTable("BASE_PART_CARGOSPACE");

                entity.HasIndex(e => e.Cpartnumber, "BASE_P_C_INDEX_CPARTNUMBER");

                entity.HasIndex(e => e.Cpositioncode, "BASE_P_C_INDEX_CPOSITIONCODE");

                entity.HasIndex(e => e.Cwareid, "BASE_P_C_INDEX_CWAREID");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("cdatetime");

                entity.Property(e => e.Cpartnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpartnumber");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cwareid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");
            });

            modelBuilder.Entity<BasePartHis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_PART_HIS");

                entity.Property(e => e.Bonded)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("bonded")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cbarrule)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cbarrule");

                entity.Property(e => e.Cdefaultcargo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdefaultcargo");

                entity.Property(e => e.Cdefaultvendor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdefaultvendor");

                entity.Property(e => e.Cdefaultware)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdefaultware");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinrule)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cinrule");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutrule)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("coutrule");

                entity.Property(e => e.Cpartname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpartname");

                entity.Property(e => e.Cpartnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpartnumber");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Csafeqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("csafeqty");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ctype)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ctype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cversion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cversion");

                entity.Property(e => e.Cvolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cvolume");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.Icw)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("icw");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Ineedcheck)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ineedcheck")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ineedwarn)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ineedwarn")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inw)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("inw");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Mtype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("mtype");

                entity.Property(e => e.Upbonded)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("upbonded");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("updateuser");

                entity.Property(e => e.Updattype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("updattype");
            });

            modelBuilder.Entity<BasePartTemp>(entity =>
            {
                entity.ToTable("BASE_PART_TEMP");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Baseunit).HasColumnName("baseunit");

                entity.Property(e => e.Bonded).HasColumnName("bonded");

                entity.Property(e => e.Calias).HasColumnName("calias");

                entity.Property(e => e.Cbarrule).HasColumnName("cbarrule");

                entity.Property(e => e.Cdefaultcargo).HasColumnName("cdefaultcargo");

                entity.Property(e => e.Cdefaultvendor).HasColumnName("cdefaultvendor");

                entity.Property(e => e.Cdefaultware).HasColumnName("cdefaultware");

                entity.Property(e => e.Cdefine1).HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2).HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode).HasColumnName("cerpcode");

                entity.Property(e => e.Cinrule).HasColumnName("cinrule");

                entity.Property(e => e.Cmemo).HasColumnName("cmemo");

                entity.Property(e => e.Companyno).HasColumnName("companyno");

                entity.Property(e => e.Coutrule).HasColumnName("coutrule");

                entity.Property(e => e.Cpartname).HasColumnName("cpartname");

                entity.Property(e => e.Cpartnumber).HasColumnName("cpartnumber");

                entity.Property(e => e.Createowner).HasColumnName("createowner");

                entity.Property(e => e.Createtime).HasColumnName("createtime");

                entity.Property(e => e.Csafeqty).HasColumnName("csafeqty");

                entity.Property(e => e.Cspecifications).HasColumnName("cspecifications");

                entity.Property(e => e.Cstatus).HasColumnName("cstatus");

                entity.Property(e => e.Ctype).HasColumnName("ctype");

                entity.Property(e => e.Cunits).HasColumnName("cunits");

                entity.Property(e => e.Cusetype).HasColumnName("cusetype");

                entity.Property(e => e.Cversion).HasColumnName("cversion");

                entity.Property(e => e.Cvolume).HasColumnName("cvolume");

                entity.Property(e => e.Ddefine3).HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4).HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate).HasColumnName("dexpiredate");

                entity.Property(e => e.ExpDays).HasColumnName("exp_days");

                entity.Property(e => e.Flag)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("flag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Icw).HasColumnName("icw");

                entity.Property(e => e.Idefine5).HasColumnName("idefine5");

                entity.Property(e => e.Iheight).HasColumnName("iheight");

                entity.Property(e => e.Ilength).HasColumnName("ilength");

                entity.Property(e => e.Ineedcheck).HasColumnName("ineedcheck");

                entity.Property(e => e.Ineedwarn).HasColumnName("ineedwarn");

                entity.Property(e => e.Inw).HasColumnName("inw");

                entity.Property(e => e.Iwidth).HasColumnName("iwidth");

                entity.Property(e => e.Lastupdateowner).HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime).HasColumnName("lastupdatetime");

                entity.Property(e => e.Mtype).HasColumnName("mtype");

                entity.Property(e => e.Needserial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("needserial");

                entity.Property(e => e.Organizationno).HasColumnName("organizationno");

                entity.Property(e => e.Referunit).HasColumnName("referunit");

                entity.Property(e => e.Strongholdno).HasColumnName("strongholdno");

                entity.Property(e => e.Volumeunits).HasColumnName("volumeunits");
            });

            modelBuilder.Entity<BasePlcCurrentStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_PLC_CURRENT_STATUS");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CreateUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.LineId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BaseReplacepalletcodeRecord>(entity =>
            {
                entity.ToTable("BASE_REPLACEPALLETCODE_RECORD");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Defined1)
                    .HasMaxLength(50)
                    .HasColumnName("DEFINED1");

                entity.Property(e => e.Defined2)
                    .HasColumnType("date")
                    .HasColumnName("DEFINED2");

                entity.Property(e => e.Defined3)
                    .HasMaxLength(100)
                    .HasColumnName("DEFINED3");

                entity.Property(e => e.Defined4)
                    .HasColumnType("datetime")
                    .HasColumnName("DEFINED4");

                entity.Property(e => e.Defined5)
                    .HasMaxLength(100)
                    .HasColumnName("DEFINED5");

                entity.Property(e => e.Defined6)
                    .HasMaxLength(100)
                    .HasColumnName("DEFINED6");

                entity.Property(e => e.Number)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("NUMBER");

                entity.Property(e => e.OldPalletcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("OLD_PALLETCODE");

                entity.Property(e => e.Operationtime)
                    .HasColumnType("datetime")
                    .HasColumnName("OPERATIONTIME");

                entity.Property(e => e.Operationuser)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("OPERATIONUSER");

                entity.Property(e => e.Palletcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PALLETCODE");

                entity.Property(e => e.ReplacePalletcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("REPLACE_PALLETCODE");
            });

            modelBuilder.Entity<BaseResources>(entity =>
            {
                entity.ToTable("Base_Resources");

                entity.HasIndex(e => new { e.SourceKey, e.LanguageId }, "idx_key_lang")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.Cdefined1)
                    .HasMaxLength(200)
                    .HasColumnName("CDefined1");

                entity.Property(e => e.Cdefined2)
                    .HasMaxLength(200)
                    .HasColumnName("CDefined2");

                entity.Property(e => e.Cdefined3)
                    .HasMaxLength(200)
                    .HasColumnName("CDefined3");

                entity.Property(e => e.Cdefined4)
                    .HasMaxLength(200)
                    .HasColumnName("CDefined4");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CreateUser).HasMaxLength(100);

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CStatus")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.LanguageId).HasMaxLength(100);

                entity.Property(e => e.ModifyUser).HasMaxLength(100);

                entity.Property(e => e.Modifytime).HasColumnType("datetime");

                entity.Property(e => e.ModuleId).HasMaxLength(100);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.SourceKey).HasMaxLength(200);

                entity.Property(e => e.SourceValue).HasMaxLength(500);
            });

            modelBuilder.Entity<BaseRgvAreaPackageNo>(entity =>
            {
                entity.ToTable("BaseRGV_AREA_PackageNo");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LINEID")
                    .HasComment("线别");

                entity.Property(e => e.Modifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("MODIFYTIME");

                entity.Property(e => e.Packageno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGENO")
                    .HasComment("栈板编号");

                entity.Property(e => e.Remark)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Rgvareaid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RGVAREAID")
                    .HasComment("区域编号");
            });

            modelBuilder.Entity<BaseRgvTvPackageNo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BaseRGV_TV_PackageNo");

                entity.HasIndex(e => e.Createtime, "idx_BaseRGV_TV_PackageNo_CREATETIME");

                entity.HasIndex(e => e.Lineid, "idx_BaseRGV_TV_PackageNo_LINEID");

                entity.HasIndex(e => e.Packageno, "idx_BaseRGV_TV_PackageNo_PACKAGENO");

                entity.HasIndex(e => e.Rgvareaid, "idx_BaseRGV_TV_PackageNo_RGVAREAID");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LINEID");

                entity.Property(e => e.Packageno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGENO");

                entity.Property(e => e.Remark)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Rgvareaid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RGVAREAID");
            });

            modelBuilder.Entity<BaseRules>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_RULES");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ACTION");

                entity.Property(e => e.Cmd)
                    .HasMaxLength(500)
                    .HasColumnName("CMD");

                entity.Property(e => e.Rem)
                    .HasMaxLength(500)
                    .HasColumnName("REM");

                entity.Property(e => e.Rules)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("RULES");

                entity.Property(e => e.Seq).HasColumnName("SEQ");

                entity.Property(e => e.Trans)
                    .HasMaxLength(500)
                    .HasColumnName("TRANS");
            });

            modelBuilder.Entity<BaseSendemail>(entity =>
            {
                entity.ToTable("BASE_SENDEMAIL");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Billtype)
                    .HasMaxLength(50)
                    .HasColumnName("billtype")
                    .HasComment("单据类型，入还是出");

                entity.Property(e => e.Isuser)
                    .HasColumnName("isuser")
                    .HasComment("是否需要发送，0不发，1发送");

                entity.Property(e => e.Sendmsg)
                    .HasMaxLength(1000)
                    .HasColumnName("sendmsg")
                    .HasComment("发送内容");

                entity.Property(e => e.Sendpeople)
                    .HasMaxLength(2000)
                    .HasColumnName("sendpeople")
                    .HasComment("需要发送人，已,分割'");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasColumnName("type")
                    .HasComment("单别");
            });

            modelBuilder.Entity<BaseSendemailpelon>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_SENDEMAILPELON");

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .HasColumnName("email")
                    .HasComment("发件人邮件地址");

                entity.Property(e => e.Enablessl)
                    .HasColumnName("enablessl")
                    .HasComment("是否启用 0不启用，1启用");

                entity.Property(e => e.Host)
                    .HasMaxLength(500)
                    .HasColumnName("host");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("发件人邮件密码");

                entity.Property(e => e.Prot)
                    .HasMaxLength(20)
                    .HasColumnName("prot")
                    .HasComment("端口");
            });

            modelBuilder.Entity<BaseSerialNumber>(entity =>
            {
                entity.ToTable("BASE_SERIAL_NUMBER");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Billcticketcode)
                    .HasMaxLength(40)
                    .HasColumnName("billcticketcode");

                entity.Property(e => e.Ccreateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateuser");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine3");

                entity.Property(e => e.Cdefine4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine4");

                entity.Property(e => e.Cdefine5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine5");

                entity.Property(e => e.Cdefine6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine6");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(200)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(40)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Dtype)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dtype");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.Serialno)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("serialno");
            });

            modelBuilder.Entity<BaseStrongpickPart>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BASE_STRONGPICK_PART");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Parthead)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("parthead");

                entity.Property(e => e.Parttype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("parttype")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<BaseTvShowInfo>(entity =>
            {
                entity.ToTable("BASE_TV_ShowInfo");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime")
                    .HasComment("创建时间");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasComment("执行状态");

                entity.Property(e => e.Lineid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lineid")
                    .HasComment("线别");

                entity.Property(e => e.Mode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("mode")
                    .HasComment("信息模式 1：入库  2：出库");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode")
                    .HasComment("栈板号");

                entity.Property(e => e.Siteid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("siteid")
                    .HasComment("站点");

                entity.Property(e => e.Wmstskid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wmstskid")
                    .HasComment("执行的命令表命令号");
            });

            modelBuilder.Entity<BaseTypeMapping>(entity =>
            {
                entity.ToTable("BASE_TypeMapping");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CStatus");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Dcreateuser)
                    .HasMaxLength(50)
                    .HasColumnName("dcreateuser");

                entity.Property(e => e.ErpTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ERP_TypeCode");

                entity.Property(e => e.ErpTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("ERP_TypeName");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.WmsTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WMS_TypeCode");

                entity.Property(e => e.WmsTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("WMS_TypeName");
            });

            modelBuilder.Entity<BaseUserLanguage>(entity =>
            {
                entity.ToTable("Base_UserLanguage");

                entity.HasIndex(e => new { e.LoginTime, e.UserNo, e.LanguageId }, "idx_Base_UserLanguage_Info");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LanguageId).HasMaxLength(100);

                entity.Property(e => e.LoginTime).HasColumnType("datetime");

                entity.Property(e => e.Project).HasMaxLength(200);

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.UserName).HasMaxLength(200);

                entity.Property(e => e.UserNo).HasMaxLength(100);
            });

            modelBuilder.Entity<BaseVendor>(entity =>
            {
                entity.HasKey(e => e.Ids);

                entity.ToTable("BASE_VENDOR");

                entity.Property(e => e.Ids)
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Caddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("caddress");

                entity.Property(e => e.Calias)
                    .HasMaxLength(50)
                    .HasColumnName("calias");

                entity.Property(e => e.Ccontactperson)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccontactperson");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cphone");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ctnpe)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ctnpe");

                entity.Property(e => e.Cvendor)
                    .IsRequired()
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cvendor");

                entity.Property(e => e.Cvendorid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cvendorid");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ilevel)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ilevel");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");
            });

            modelBuilder.Entity<BaseWarehouse>(entity =>
            {
                entity.ToTable("BASE_WAREHOUSE");

                entity.HasIndex(e => e.Id, "SYS_C0014412")
                    .IsUnique();

                entity.HasIndex(e => e.Cwareid, "uk_base_warehouse_cwareid")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Bonded)
                    .HasMaxLength(1)
                    .HasColumnName("bonded")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Leader)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("leader");

                entity.Property(e => e.Leadercode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("leadercode");

                entity.Property(e => e.Leaderphone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("leaderphone");
            });

            modelBuilder.Entity<BaseWarehouseTemp>(entity =>
            {
                entity.ToTable("BASE_WAREHOUSE_TEMP");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Bonded).HasColumnName("bonded");

                entity.Property(e => e.Cdefine1).HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2).HasColumnName("cdefine2");

                entity.Property(e => e.Cmemo).HasColumnName("cmemo");

                entity.Property(e => e.Companyno).HasColumnName("companyno");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .HasColumnName("createowner");

                entity.Property(e => e.Cstatus).HasColumnName("cstatus");

                entity.Property(e => e.Cwareid).HasColumnName("cwareid");

                entity.Property(e => e.Cwarename).HasColumnName("cwarename");

                entity.Property(e => e.Flag)
                    .HasColumnName("flag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Leader).HasColumnName("leader");

                entity.Property(e => e.Leadercode).HasColumnName("leadercode");

                entity.Property(e => e.Leaderphone).HasColumnName("leaderphone");

                entity.Property(e => e.Organizationno).HasColumnName("organizationno");

                entity.Property(e => e.Strongholdno).HasColumnName("strongholdno");
            });

            modelBuilder.Entity<CerpCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CErpCode");

                entity.Property(e => e.Cerpcode1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");
            });

            modelBuilder.Entity<Checkerrormsg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CHECKERRORMSG");

                entity.HasIndex(e => e.Guid, "CHECKERRORMSG_guid");

                entity.HasIndex(e => e.Guid, "indexguid");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Errormsg).HasColumnName("errormsg");

                entity.Property(e => e.Guid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.Userno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userno");
            });

            modelBuilder.Entity<CheckerrormsgAppBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CHECKERRORMSG_APP_BAK");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Errormsg)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasColumnName("errormsg");

                entity.Property(e => e.Guid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.Opttime)
                    .HasColumnType("datetime")
                    .HasColumnName("opttime");

                entity.Property(e => e.Userno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userno");
            });

            modelBuilder.Entity<CmdAgvTask>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CMD_AgvTask");

                entity.HasIndex(e => e.Reqcode, "CMD_AGVTASK_reqCode")
                    .IsUnique();

                entity.Property(e => e.Agvcode)
                    .HasMaxLength(50)
                    .HasColumnName("agvcode")
                    .HasComment("AGV 编号，填写表示指定某一编号的 AGV 执行该任务");

                entity.Property(e => e.Clientcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("clientcode")
                    .HasComment("客户端编号，如 PDA，HCWMS 等。由 RCS告知上层系统");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(20)
                    .HasComment("任务生成者");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasComment("任务生成时间");

                entity.Property(e => e.Data)
                    .HasMaxLength(2000)
                    .HasColumnName("data");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("id")
                    .HasComment("主键");

                entity.Property(e => e.Interfacename)
                    .HasMaxLength(64)
                    .HasColumnName("interfacename")
                    .HasComment("TCP 协议必传，REST 协议不用传， 传了也不影响");

                entity.Property(e => e.Materiallot)
                    .HasMaxLength(32)
                    .HasColumnName("materiallot")
                    .HasComment("物料批次或货架上的物料唯一编码, 生成任务单时,货架与物料直接绑定时使用");

                entity.Property(e => e.Podcode)
                    .HasMaxLength(16)
                    .HasColumnName("podcode")
                    .HasComment("货架编号，不指定货架可以为空");

                entity.Property(e => e.Poddir)
                    .HasMaxLength(4)
                    .HasColumnName("poddir")
                    .HasComment("“180”,”0”,”90”,”-90” 分别代表”左”,”");

                entity.Property(e => e.Podtyp)
                    .HasMaxLength(50)
                    .HasColumnName("podtyp")
                    .HasComment("货架类型, 找满货架时传空, 找空货架时必传-1: 代表不关心货架类型, 找到空货架即可.-2: 代表从工作位获取关联货架类型, 如果未配置, 只找空货架.货架类型编号: 只找该货架类型的空货架");

                entity.Property(e => e.Priority)
                    .HasMaxLength(32)
                    .HasColumnName("priority")
                    .HasComment("优先级，从（1~5）级，最大优先级最高");

                entity.Property(e => e.Reqcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("reqcode")
                    .HasComment("请求编号");

                entity.Property(e => e.Reqtime)
                    .HasMaxLength(100)
                    .HasColumnName("reqtime")
                    .HasComment("请求时间截");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .HasColumnName("status")
                    .HasComment("0agv尚未调用, 1agv调用成功, 2小车状态任务开始，3小车状态走出储位，4小车状态任务结束   5小车任务单取消");

                entity.Property(e => e.Taskcode)
                    .HasMaxLength(32)
                    .HasColumnName("taskcode")
                    .HasComment("任务单号, 选填, 不填系统自动生成，必须为 32 位 UUID");

                entity.Property(e => e.Tasktyp)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasColumnName("tasktyp")
                    .HasComment("任务类型，与在 RCS端配置的主任务类型编号一致。");

                entity.Property(e => e.Tokencode)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("tokencode")
                    .HasComment("令牌号, 由调度系统颁发。 由RCS告知上层系统");

                entity.Property(e => e.Vendorname)
                    .HasMaxLength(50)
                    .HasColumnName("vendorname")
                    .HasDefaultValueSql("('hikvision')");

                entity.Property(e => e.Wbcode)
                    .HasMaxLength(32)
                    .HasColumnName("wbcode")
                    .HasComment("工作位");
            });

            modelBuilder.Entity<CmdAgvpositionCodeDetail>(entity =>
            {
                entity.ToTable("CMD_AGVPositionCodeDetail");

                entity.Property(e => e.Id)
                    .HasMaxLength(200)
                    .HasColumnName("id")
                    .HasComment("主键");

                entity.Property(e => e.Codepathorder)
                    .HasColumnName("codepathorder")
                    .HasComment("位置路径顺序，任务模板中如果2个位置点，将根据任务点的先后顺序默认为起点和终点。相同任务单顺序号不可重复。1开始 2结束");

                entity.Property(e => e.CreateOwner)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("任务生成者");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime")
                    .HasComment("创建日期");

                entity.Property(e => e.Positioncodepath)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("positioncodepath")
                    .HasComment("位置路径：AGV 关键路径位置集合，与任务类型中模板配置的位置路径一一对应。待现场地图部署、配置完成后可获取；");

                entity.Property(e => e.Taskid)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("taskid")
                    .HasComment("AGV任务单编号");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("type")
                    .HasComment("位置类型 00 表示：位置编号 01 表示：物料批次号 02 表示：策略编号（含多个区域） 如：第一个区域放不下, 可以放第二个区域 03 表示：货架编号，通过货架编号找到货架所在位置 04 表示：区域编号，在区域中查找可用位置");
            });

            modelBuilder.Entity<CmdEquipTask>(entity =>
            {
                entity.ToTable("CMD_EquipTask");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id")
                    .HasComment("主键，自增长");

                entity.Property(e => e.Acttime)
                    .HasMaxLength(20)
                    .HasColumnName("acttime")
                    .HasComment("命令下发时间，WCS自用");

                entity.Property(e => e.Cmdmode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("cmdmode")
                    .HasComment("1：入库 2：出库 3：拣料出 4：站对站（FROM） 5:拣料入 6：站对站（TO）7：盘点出 8：盘点入");

                entity.Property(e => e.Cmdsno)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnName("cmdsno")
                    .HasComment("命令编号：1～29998");

                entity.Property(e => e.CreateOwner)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("任务生成者");

                entity.Property(e => e.Createtime)
                    .HasColumnType("date")
                    .HasComment("任务生成时间");

                entity.Property(e => e.Endstnno)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasColumnName("endstnno")
                    .HasComment("终点站点编号");

                entity.Property(e => e.Endtime)
                    .HasMaxLength(20)
                    .HasColumnName("endtime")
                    .HasComment("命令完成时间，WCS自用");

                entity.Property(e => e.Equiptype)
                    .HasColumnName("equiptype")
                    .HasComment("设备类型0，RGV；1,升降机");

                entity.Property(e => e.Startstnno)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasColumnName("startstnno")
                    .HasComment("起点站点编号");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("status")
                    .HasComment("任务状态 0，未开始 1，已下发 7，已完成");

                entity.Property(e => e.Trnno)
                    .HasMaxLength(5)
                    .HasColumnName("trnno")
                    .HasComment("完成的命令编号，wcs自用");
            });

            modelBuilder.Entity<CmdLift>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CMD_LIFT");

                entity.Property(e => e.ActTime).HasMaxLength(20);

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .HasColumnName("CDEFINE1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .HasColumnName("CDEFINE2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(50)
                    .HasColumnName("CDEFINE3");

                entity.Property(e => e.CmdMode).HasMaxLength(1);

                entity.Property(e => e.CmdSno).HasMaxLength(5);

                entity.Property(e => e.CmdSts).HasMaxLength(1);

                entity.Property(e => e.CraneStataus).HasMaxLength(50);

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.EndTime).HasMaxLength(20);

                entity.Property(e => e.Lineid)
                    .HasMaxLength(20)
                    .HasColumnName("LINEID");

                entity.Property(e => e.Loc).HasMaxLength(7);

                entity.Property(e => e.LocSize).HasMaxLength(1);

                entity.Property(e => e.NewLoc).HasMaxLength(7);

                entity.Property(e => e.Packageno)
                    .HasMaxLength(100)
                    .HasColumnName("PACKAGENO");

                entity.Property(e => e.Pc)
                    .HasMaxLength(50)
                    .HasColumnName("PC");

                entity.Property(e => e.Prt)
                    .HasMaxLength(1)
                    .HasColumnName("PRT");

                entity.Property(e => e.Remark)
                    .HasMaxLength(800)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Result).HasMaxLength(3);

                entity.Property(e => e.RodId)
                    .HasMaxLength(30)
                    .HasColumnName("RodID");

                entity.Property(e => e.StnNo).HasMaxLength(4);

                entity.Property(e => e.Trace).HasMaxLength(2);

                entity.Property(e => e.TrnDate).HasMaxLength(20);

                entity.Property(e => e.TrnNo).HasMaxLength(20);
            });

            modelBuilder.Entity<CmdMst>(entity =>
            {
                entity.HasKey(e => e.WmsTskId)
                    .HasName("PK_WmsTskId");

                entity.ToTable("CMD_MST");

                entity.HasIndex(e => e.CmdMode, "idx_cmd_mst_CmdMode");

                entity.HasIndex(e => e.CmdSts, "idx_cmd_mst_CmdSts");

                entity.HasIndex(e => e.Lineid, "idx_cmd_mst_LINEID");

                entity.HasIndex(e => e.StnNo, "idx_cmd_mst_StnNo");

                entity.Property(e => e.WmsTskId)
                    .ValueGeneratedNever()
                    .HasComment("主键");

                entity.Property(e => e.ActTime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("命令送出时间");

                entity.Property(e => e.Apistatus)
                    .HasMaxLength(100)
                    .HasColumnName("APIStatus");

                entity.Property(e => e.BillingNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BillingNO");

                entity.Property(e => e.Billingstatus)
                    .HasColumnName("BILLINGSTATUS")
                    .HasComment("单据状态 判断订单（入库单\\出库单\\调拨单）是否扣账");

                entity.Property(e => e.CmdMode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("命令模式 1:入库 2:出库 3:盘点 5:库对库");

                entity.Property(e => e.CmdSno)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasComment("命令序号 00001~24999");

                entity.Property(e => e.CmdSts)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("命令状态 0:未处理 1:执行中 7:命令完成待过账");

                entity.Property(e => e.Cmdno)
                    .HasMaxLength(10)
                    .HasColumnName("CMDNO")
                    .HasComment("多条线的线别");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .HasColumnName("CREATEUSER")
                    .HasComment("创建人");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE")
                    .HasComment("入库单\\出库单\\调拨单");

                entity.Property(e => e.EndTime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("命令完成时间");

                entity.Property(e => e.IsPause).HasMaxLength(50);

                entity.Property(e => e.Jhsite)
                    .HasMaxLength(100)
                    .HasColumnName("JHSite");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(20)
                    .HasColumnName("LINEID")
                    .HasDefaultValueSql("('')")
                    .HasComment("多条线的线别");

                entity.Property(e => e.Loc)
                    .IsRequired()
                    .HasMaxLength(7)
                    .HasComment("命令存取储位: RRBBBLLL。 R:列(Row)，两码。B:格(Bay)，三码。L:层(Level)，两码。");

                entity.Property(e => e.LocSize)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("储位种类 1:小储位  2:大储位");

                entity.Property(e => e.Msg)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MSG");

                entity.Property(e => e.NewLoc)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasComment("目的储位 (库对库命令使用): RRBBBLL。 R:列(Row)，两码。B:格(Bay)，三码。L:层(Level)，两码。");

                entity.Property(e => e.Packageno)
                    .HasMaxLength(100)
                    .HasColumnName("PACKAGENO")
                    .HasComment("箱号");

                entity.Property(e => e.Plcd51)
                    .HasMaxLength(10)
                    .HasColumnName("PLCD51")
                    .HasDefaultValueSql("('')")
                    .HasComment("D51地址");

                entity.Property(e => e.Prt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("PRT")
                    .HasComment("优先顺位 1~9 (1最优先)");

                entity.Property(e => e.Remark)
                    .HasMaxLength(800)
                    .HasColumnName("REMARK")
                    .HasComment("备注");

                entity.Property(e => e.Result)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("命令结束结果 参考Result表,wcs自用");

                entity.Property(e => e.RodId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RodID")
                    .HasComment("盘元ID");

                entity.Property(e => e.SendApi)
                    .HasMaxLength(20)
                    .HasColumnName("SendAPI");

                entity.Property(e => e.SourceWmsTskId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StnNo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("站别 101:Crane1第1站(左边)  201:Crane2第2站(右边)");

                entity.Property(e => e.TaskNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TaskNO");

                entity.Property(e => e.Trace)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("命令执行进程");

                entity.Property(e => e.TrnDate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("命令产生时间");

                entity.Property(e => e.TrnNo)
                    .HasMaxLength(20)
                    .HasComment("WMS自定义");

                entity.Property(e => e.Updata).HasColumnName("UPDATA");
            });

            modelBuilder.Entity<CmdMstError>(entity =>
            {
                entity.ToTable("CMD_MST_Error");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Errorcode)
                    .HasMaxLength(200)
                    .HasColumnName("errorcode");

                entity.Property(e => e.Errorindex)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("errorindex");

                entity.Property(e => e.Errormsg)
                    .HasMaxLength(1000)
                    .HasColumnName("errormsg");

                entity.Property(e => e.Hexerrorcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("hexerrorcode");

                entity.Property(e => e.Lineid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lineid");
            });

            modelBuilder.Entity<CmdMstLog>(entity =>
            {
                entity.ToTable("CMD_MST_LOG");

                entity.HasIndex(e => e.WmsTaskId, "Idx_CMD_MST_LOG_WmsTaskId");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.LineId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Msg)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Packageno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGENO");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CmdMstRgv>(entity =>
            {
                entity.HasKey(e => e.WmsTskId)
                    .HasName("PK_RGVWmsTskId");

                entity.ToTable("CMD_MST_RGV");

                entity.Property(e => e.WmsTskId).ValueGeneratedNever();

                entity.Property(e => e.ActTime)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AreaId).HasMaxLength(50);

                entity.Property(e => e.BillingNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BillingNO");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .HasColumnName("CDEFINE1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .HasColumnName("CDEFINE2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(50)
                    .HasColumnName("CDEFINE3");

                entity.Property(e => e.CmdMode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CmdNo)
                    .HasMaxLength(10)
                    .HasColumnName("CmdNO");

                entity.Property(e => e.CmdSno)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CmdSts)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CraneStataus).HasMaxLength(50);

                entity.Property(e => e.CreateUser).HasMaxLength(100);

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(100)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.EndTime)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Height).HasMaxLength(50);

                entity.Property(e => e.LineId).HasMaxLength(10);

                entity.Property(e => e.Loc)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LocSize)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Msg)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("msg");

                entity.Property(e => e.NewLoc)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Packageno)
                    .HasMaxLength(100)
                    .HasColumnName("PACKAGENO");

                entity.Property(e => e.Pc)
                    .HasMaxLength(50)
                    .HasColumnName("PC");

                entity.Property(e => e.Plcd51)
                    .HasMaxLength(10)
                    .HasColumnName("PLCD51");

                entity.Property(e => e.Prt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRT");

                entity.Property(e => e.Reason).HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Result)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RodId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RodID");

                entity.Property(e => e.StnNo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Trace)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TrnDate)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TrnNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Updata).HasColumnName("updata");
            });

            modelBuilder.Entity<CmdMstScan>(entity =>
            {
                entity.ToTable("CMD_MST_Scan");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lineid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lineid")
                    .HasComment("台车线路");

                entity.Property(e => e.Palletcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode")
                    .HasComment("栈板号");

                entity.Property(e => e.Scantime)
                    .HasColumnType("datetime")
                    .HasColumnName("scantime")
                    .HasComment("扫描时间");

                entity.Property(e => e.Siteid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("siteid")
                    .HasComment("台车站点编号");
            });

            modelBuilder.Entity<CmdbyPalletCode>(entity =>
            {
                entity.ToTable("CMDByPalletCode");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Code)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("code")
                    .HasComment("返回码 0，成功 1，失败");

                entity.Property(e => e.Data)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("data")
                    .HasComment("自定义返回");

                entity.Property(e => e.Message)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("message")
                    .HasComment("返回信息，\"成功\"、\"失败\"");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("栈板编号");

                entity.Property(e => e.Stnno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("stnno")
                    .HasComment("RGV站点：一楼，101~109；2楼，201~210 提升机：1~4 立库：一号线，101~104；二号线，201~204；三号线，301~304 AGV：参考结构图。二楼，D01~D81；四楼以F开头");

                entity.Property(e => e.Stntype)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("stntype")
                    .HasComment("站点类型 0，立库 1，RGV 2，提升机 3，AGV");
            });

            modelBuilder.Entity<Createoutasn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CREATEOUTASN");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Outasnno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outasnno");
            });

            modelBuilder.Entity<Current001>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CURRENT001");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cwarehousecode)
                    .HasMaxLength(100)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");
            });

            modelBuilder.Entity<CxFlowSwrInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CX_FLOW_SWR_INFO");

                entity.Property(e => e.Bu)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("bu");

                entity.Property(e => e.CurrentOwner)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("current_owner");

                entity.Property(e => e.CurrentProcess)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("current_process");

                entity.Property(e => e.CurrentStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("current_status");

                entity.Property(e => e.Customer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("customer");

                entity.Property(e => e.EngDeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("eng_dept_name");

                entity.Property(e => e.FpmSignTime)
                    .HasColumnType("datetime")
                    .HasColumnName("fpm_sign_time");

                entity.Property(e => e.NewPn)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("new_pn");

                entity.Property(e => e.OldPn)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("old_pn");

                entity.Property(e => e.PmcSignTime)
                    .HasColumnType("datetime")
                    .HasColumnName("pmc_sign_time");

                entity.Property(e => e.Process)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("process");

                entity.Property(e => e.ReworkComment)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("rework_comment");

                entity.Property(e => e.ReworkDetialInfo)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("rework_detial_info");

                entity.Property(e => e.ReworkQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("rework_qty");

                entity.Property(e => e.So)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("so");

                entity.Property(e => e.Spec)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("spec");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("submit_date");

                entity.Property(e => e.SubmitEmp)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("submit_emp");

                entity.Property(e => e.SwrNo)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("swr_no");

                entity.Property(e => e.TwSignTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tw_sign_time");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("update_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.WorkOrder)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("work_order");
            });

            modelBuilder.Entity<DataInputTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DATA_INPUT_TEMP");

                entity.Property(e => e.Areaname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("areaname");

                entity.Property(e => e.Bcid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("bcid");

                entity.Property(e => e.Bcidname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bcidname");

                entity.Property(e => e.Item)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("item");

                entity.Property(e => e.Type)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<DateEmpTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DATE_EMP_TEMP");

                entity.Property(e => e.Memo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.仓库)
                    .HasMaxLength(82)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员10)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员11)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员12)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员13)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员14)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员15)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员16)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员17)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员18)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员19)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员20)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员6)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员7)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员8)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员9)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.优先级1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.优先级2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.储位)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.储位最大容易)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.区块)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.单位)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.单位最小数量)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.币别)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.料号)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DateEmpTempbak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DATE_EMP_TEMPBAK");

                entity.Property(e => e.Memo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.仓库)
                    .HasMaxLength(82)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员10)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员11)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员12)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员13)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员14)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员15)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员16)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员17)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员18)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员19)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员20)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员6)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员7)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员8)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.仓管员9)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.优先级1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.优先级2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.储位)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.储位最大容易)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.区块)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.单位)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.单位最小数量)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.币别)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.料号)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DatecodeStockCurrent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DATECODE_STOCK_CURRENT");

                entity.Property(e => e.Cbarcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbarcode");

                entity.Property(e => e.Cdatecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdatecode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Iplanin)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iplanin");

                entity.Property(e => e.Iplanout)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iplanout");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");
            });

            modelBuilder.Entity<DatecodeStockCurrentDetail>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__DATECODE__DC501A7D5322BE1C");

                entity.ToTable("DATECODE_STOCK_CURRENT_DETAIL");

                entity.HasIndex(e => e.Ids, "SYS_C0014484")
                    .IsUnique();

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Locktime)
                    .HasColumnType("datetime")
                    .HasColumnName("locktime");

                entity.Property(e => e.Lockuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lockuser");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<DepartmentLineInfo>(entity =>
            {
                entity.ToTable("DEPARTMENT_LINE_INFO");

                entity.HasIndex(e => e.Id, "SYS_C0014489")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Departmentno)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("departmentno");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Type)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("type");
            });

            modelBuilder.Entity<EbsMoEnd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EBS_MO_END");

                entity.Property(e => e.MoName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("mo_name");
            });

            modelBuilder.Entity<EbsYd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EBS_YD");

                entity.Property(e => e.Attribute7)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute7");

                entity.Property(e => e.TransactionQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("transaction_quantity");
            });

            modelBuilder.Entity<GPartMapWms>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("G_PART_MAP_WMS");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("flag");

                entity.Property(e => e.GrNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gr_no");

                entity.Property(e => e.ItemNo)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("item_no");

                entity.Property(e => e.PartNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("part_no");

                entity.Property(e => e.PartSn)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("part_sn");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<GPartMapWmsCache>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("G_PART_MAP_WMS_CACHE");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.Flag)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("flag");

                entity.Property(e => e.GrNo)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("gr_no");

                entity.Property(e => e.ItemNo)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("item_no");

                entity.Property(e => e.PartNo)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("part_no");

                entity.Property(e => e.PartSn)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("part_sn");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<HandleLog>(entity =>
            {
                entity.ToTable("HANDLE_LOG");

                entity.HasIndex(e => e.RecordId, "IDX_RECORD_IDS");

                entity.HasIndex(e => e.Id, "SYS_C0014503")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.HandleTable)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("handle_table");

                entity.Property(e => e.HandleType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("handle_type");

                entity.Property(e => e.Opttime)
                    .HasColumnType("datetime")
                    .HasColumnName("opttime");

                entity.Property(e => e.RecordId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("record_id");

                entity.Property(e => e.Reservefield1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservefield1");

                entity.Property(e => e.Reservefield2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservefield2");

                entity.Property(e => e.Reservefield3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservefield3");

                entity.Property(e => e.Reservefield4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservefield4");

                entity.Property(e => e.Reservefield5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservefield5");

                entity.Property(e => e.Reservefield6)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservefield6");

                entity.Property(e => e.Reservefield7)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservefield7");

                entity.Property(e => e.Reservefield8)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservefield8");

                entity.Property(e => e.Userno)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("userno");
            });

            modelBuilder.Entity<HdSqlmap>(entity =>
            {
                entity.HasKey(e => e.SqlOp)
                    .HasName("PK__HD_SQLMA__188A0AEB9D430A8C");

                entity.ToTable("HD_SQLMAP");

                entity.HasIndex(e => e.SqlOp, "SYS_C0014506")
                    .IsUnique();

                entity.Property(e => e.SqlOp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sql_op");

                entity.Property(e => e.SqlContent)
                    .IsRequired()
                    .HasMaxLength(1280)
                    .IsUnicode(false)
                    .HasColumnName("sql_content");

                entity.Property(e => e.SqlDate)
                    .HasColumnType("datetime")
                    .HasColumnName("sql_date");

                entity.Property(e => e.SqlDesc)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("sql_desc");

                entity.Property(e => e.SqlName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sql_name");

                entity.Property(e => e.SqlObligate1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sql_obligate1");

                entity.Property(e => e.SqlObligate2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sql_obligate2");

                entity.Property(e => e.SqlObligate3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sql_obligate3");

                entity.Property(e => e.SqlOwner)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sql_owner");

                entity.Property(e => e.SqlStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sql_status");
            });

            modelBuilder.Entity<InMergePallete>(entity =>
            {
                entity.ToTable("IN_MERGE_PALLETE");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE3");

                entity.Property(e => e.Cdefine4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE4");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME")
                    .HasComment("创建时间");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER")
                    .HasComment("创建人");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS")
                    .HasComment("状态（0=未处理，已生出库单  2=处理中，已生成入库通知单 3=已完成，已生出入库单）");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Inasncode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INASNCODE")
                    .HasComment("要做拼板入库的入库通知单号");

                entity.Property(e => e.InasncodePallet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INASNCODE_PALLET")
                    .HasComment("依据栈板号入库的入库通知单");

                entity.Property(e => e.InbillcodePallet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INBILLCODE_PALLET")
                    .HasComment("依据栈板号入库的入库单");

                entity.Property(e => e.Modifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("MODIFYTIME")
                    .HasComment("修改时间");

                entity.Property(e => e.Modifyuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MODIFYUSER")
                    .HasComment("修改人");

                entity.Property(e => e.OutasncodePallet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTASNCODE_PALLET")
                    .HasComment("依据栈板号出库的出库通知单");

                entity.Property(e => e.OutbillcodePallet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTBILLCODE_PALLET")
                    .HasComment("依据栈板号出库的出库单");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PALLETCODE")
                    .HasComment("栈板编号");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");
            });

            modelBuilder.Entity<InMoInfo>(entity =>
            {
                entity.ToTable("IN_MO_INFO");

                entity.HasIndex(e => new { e.Wo, e.Departmentno, e.StartDate }, "IN_MO_INFO_INDEX");

                entity.HasIndex(e => e.Id, "SYS_C0014510")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(30)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.Departmentno)
                    .HasMaxLength(100)
                    .HasColumnName("departmentno");

                entity.Property(e => e.Iscountjobtime)
                    .HasMaxLength(10)
                    .HasColumnName("iscountjobtime");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(30)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_time");

                entity.Property(e => e.Linebody)
                    .HasMaxLength(6)
                    .HasColumnName("linebody");

                entity.Property(e => e.Models)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("models");

                entity.Property(e => e.Onlinetime)
                    .HasColumnType("datetime")
                    .HasColumnName("onlinetime");

                entity.Property(e => e.SecCinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sec_cinvcode");

                entity.Property(e => e.Shift)
                    .HasMaxLength(20)
                    .HasColumnName("shift");

                entity.Property(e => e.Side)
                    .HasMaxLength(1)
                    .HasColumnName("side");

                entity.Property(e => e.Special)
                    .HasMaxLength(50)
                    .HasColumnName("special")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date");

                entity.Property(e => e.Wo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("wo");

                entity.Property(e => e.WoQty)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("wo_qty");
            });

            modelBuilder.Entity<Inasn>(entity =>
            {
                entity.ToTable("INASN");

                entity.HasIndex(e => new { e.Cerpcode, e.Cstatus, e.Itype }, "INASN_INDEX_CERPCODE");

                entity.HasIndex(e => e.Cticketcode, "INASN_INDEX_CTICKETCODE")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "SYS_C0014517")
                    .IsUnique();

                entity.HasIndex(e => e.Cstatus, "inasn_cstatus");

                entity.HasIndex(e => e.Dcreatetime, "inasn_dcreatetime");

                entity.HasIndex(e => e.Itype, "inasn_itype");

                entity.HasIndex(e => e.Cticketcode, "uk_inasn_cticketcode")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cauditpersoncode")
                    .HasComment("审核人");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode")
                    .HasComment("制单人");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1")
                    .HasComment("贸易代码");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2")
                    .HasComment("币别");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode")
                    .HasComment("主表ERP单号");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo")
                    .HasComment("备注");

                entity.Property(e => e.Cpo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpo")
                    .HasComment("po号");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("critical_part")
                    .HasDefaultValueSql("((0))")
                    .HasComment("0-一般 1 急料");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))")
                    .HasComment("状态（0 未处理,1,装箱中，2,入库中，3 已完成,）");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode")
                    .HasComment("单据号");

                entity.Property(e => e.Cvender)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cvender")
                    .HasComment("供应商名称");

                entity.Property(e => e.Cvendercode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cvendercode")
                    .HasComment("供应商编码");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate")
                    .HasComment("审核日期");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime")
                    .HasComment("制单日期");

                entity.Property(e => e.Ddefine3)
                    .HasMaxLength(1)
                    .HasColumnName("ddefine3")
                    .HasDefaultValueSql("('N')")
                    .HasComment("判退");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .HasColumnName("ddefine4")
                    .HasDefaultValueSql("((1))")
                    .HasComment("数量来源 ( 0 : WMS，1 :oracle ERP )");

                entity.Property(e => e.DocDueDate)
                    .HasColumnType("datetime")
                    .HasComment("到期日");

                entity.Property(e => e.Docdate)
                    .HasColumnType("datetime")
                    .HasComment("过账日期");

                entity.Property(e => e.Hynum)
                    .HasMaxLength(30)
                    .HasColumnName("HYNum")
                    .HasComment("合约单号");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5")
                    .HasComment("特殊元件退料 0:正常 1:特殊");

                entity.Property(e => e.InasnIaId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("inasn_ia_id")
                    .HasComment("预入库通知单ID");

                entity.Property(e => e.Itype)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("itype")
                    .HasComment("入库类型");

                entity.Property(e => e.Reasoncode)
                    .HasMaxLength(30)
                    .HasColumnName("reasoncode")
                    .HasComment("理由码编号");

                entity.Property(e => e.Reasoncontent)
                    .HasMaxLength(100)
                    .HasColumnName("reasoncontent")
                    .HasComment("理由码说明");

                entity.Property(e => e.Slpname)
                    .HasMaxLength(50)
                    .HasComment("采购员名称");

                entity.Property(e => e.SpecilReturn)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("specil_return")
                    .HasDefaultValueSql("((0))")
                    .HasComment("1-工单整盘退料 0-其他");

                entity.Property(e => e.Splitcaseno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPLITCASENO");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORKTYPE");
            });

            modelBuilder.Entity<InasnAppBak>(entity =>
            {
                entity.ToTable("INASN_APP_BAK");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cauditpersoncode")
                    .HasComment("审核人");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode")
                    .HasComment("制单人");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1")
                    .HasComment("贸易代码");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2")
                    .HasComment("币别");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode")
                    .HasComment("主表ERP单号");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo")
                    .HasComment("备注");

                entity.Property(e => e.Cpo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpo")
                    .HasComment("po号");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("critical_part")
                    .HasComment("0-一般 1 急料");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasComment("状态（0 未处理,1,装箱中，2,入库中，3 已完成,）");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode")
                    .HasComment("单据号");

                entity.Property(e => e.Cvender)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cvender")
                    .HasComment("供应商名称");

                entity.Property(e => e.Cvendercode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cvendercode")
                    .HasComment("供应商编码");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate")
                    .HasComment("审核日期");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime")
                    .HasComment("制单日期");

                entity.Property(e => e.Ddefine3)
                    .HasMaxLength(1)
                    .HasColumnName("ddefine3")
                    .HasComment("判退");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .HasColumnName("ddefine4")
                    .HasComment("数量来源 ( 0 : WMS，1 :oracle ERP )");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5")
                    .HasComment("特殊元件退料 0:正常 1:特殊");

                entity.Property(e => e.InasnIaId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("inasn_ia_id")
                    .HasComment("预入库通知单ID");

                entity.Property(e => e.Itype)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("itype")
                    .HasComment("入库类型");

                entity.Property(e => e.Reasoncode)
                    .HasMaxLength(30)
                    .HasColumnName("reasoncode")
                    .HasComment("理由码编号");

                entity.Property(e => e.Reasoncontent)
                    .HasMaxLength(100)
                    .HasColumnName("reasoncontent")
                    .HasComment("理由码说明");

                entity.Property(e => e.SpecilReturn)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("specil_return")
                    .HasComment("1-工单整盘退料 0-其他");

                entity.Property(e => e.Splitcaseno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPLITCASENO");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORKTYPE");
            });

            modelBuilder.Entity<InasnD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__INASN_D__DC501A7DA007F449");

                entity.ToTable("INASN_D");

                entity.HasIndex(e => e.Cinvcode, "INASN_D_INDEX_CINVCODE");

                entity.HasIndex(e => e.Id, "INASN_D_INDEX_ID");

                entity.HasIndex(e => e.Ids, "SYS_C0014531")
                    .IsUnique();

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cpo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpo");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.DfShscode)
                    .HasMaxLength(50)
                    .HasColumnName("DfSHSCode");

                entity.Property(e => e.DfWhscode)
                    .HasMaxLength(50)
                    .HasColumnName("DfWHSCode");

                entity.Property(e => e.Erpcodelinenum)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("erpcodelinenum");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.InasnIaDIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("inasn_ia_d_ids");

                entity.Property(e => e.Ipoline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipoline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineId).HasColumnName("LineID");

                entity.Property(e => e.Manual)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("manual")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PoLinenumbername)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("po_linenumbername");

                entity.Property(e => e.PoNumbername)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("po_numbername");

                entity.Property(e => e.Reasoncode)
                    .HasMaxLength(50)
                    .HasColumnName("REASONCODE");

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<InasnDAppBak>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__INASN_D___DC501A7D0161EE1E");

                entity.ToTable("INASN_D_APP_BAK");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cpo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpo");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.DfShscode)
                    .HasMaxLength(50)
                    .HasColumnName("DfSHSCode");

                entity.Property(e => e.DfWhscode)
                    .HasMaxLength(50)
                    .HasColumnName("DfWHSCode");

                entity.Property(e => e.Erpcodelinenum)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("erpcodelinenum");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.InasnIaDIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("inasn_ia_d_ids");

                entity.Property(e => e.Ipoline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipoline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineId).HasColumnName("LineID");

                entity.Property(e => e.Manual)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("manual");

                entity.Property(e => e.PoLinenumbername)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("po_linenumbername");

                entity.Property(e => e.PoNumbername)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("po_numbername");

                entity.Property(e => e.Reasoncode)
                    .HasMaxLength(50)
                    .HasColumnName("REASONCODE");

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<InasnDIstockSplit>(entity =>
            {
                entity.ToTable("INASN_D_ISTOCK_SPLIT");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.AsnDIds)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ASN_D_IDS");

                entity.Property(e => e.AsnId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ASN_ID");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cjqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("CJQTY");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Flag)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FLAG");

                entity.Property(e => e.Oldqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OLDQTY");
            });

            modelBuilder.Entity<InasnIa>(entity =>
            {
                entity.ToTable("INASN_IA");

                entity.HasIndex(e => new { e.Cstatus, e.Cauditpersoncode, e.Ccreateownercode }, "INASN_IA_INDEX_BASE");

                entity.HasIndex(e => e.Cticketcode, "INASN_IA_INDEX_CTICKETCODE")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "SYS_C0014537")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Batchno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("batchno");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cauditpersoncode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("currency");

                entity.Property(e => e.Cvender)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cvender");

                entity.Property(e => e.Cvendercode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cvendercode");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine1");

                entity.Property(e => e.Ddefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine2");

                entity.Property(e => e.Idefine3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("idefine3");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Pono)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pono");

                entity.Property(e => e.Tradecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tradecode");
            });

            modelBuilder.Entity<InasnIaD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__INASN_IA__DC501A7D32C801DB");

                entity.ToTable("INASN_IA_D");

                entity.HasIndex(e => e.Ids, "INASN_IA_D_INDEX_BASE")
                    .IsUnique();

                entity.HasIndex(e => new { e.Id, e.Cinvcode }, "INASN_IA_D_INDEX_IDS");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Datecodetype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("datecodetype");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Disposition)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("disposition");

                entity.Property(e => e.Erpcodeline)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("erpcodeline");

                entity.Property(e => e.Events)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("events");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iline)
                    .HasColumnName("iline")
                    .HasComment("预入库通知单明细的项次");

                entity.Property(e => e.InpoDIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("inpo_d_ids");

                entity.Property(e => e.IsMail)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_mail")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Mfg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("mfg");

                entity.Property(e => e.Mpn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("mpn");

                entity.Property(e => e.Ncrno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ncrno");

                entity.Property(e => e.Oridatecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("oridatecode");

                entity.Property(e => e.Poline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("poline");

                entity.Property(e => e.Pono)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pono");

                entity.Property(e => e.Qtypassed)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qtypassed")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Qtypending)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qtypending")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Qtysampling)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qtysampling");

                entity.Property(e => e.Qtytotal)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qtytotal");

                entity.Property(e => e.Qtyunpassed)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qtyunpassed")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Status)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("status");

                entity.Property(e => e.Vendorlotno)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("vendorlotno");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.InasnIaD)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("FK_INASN_IA_D");
            });

            modelBuilder.Entity<Inasnchange>(entity =>
            {
                entity.ToTable("INASNCHANGE");

                entity.HasIndex(e => e.Cticketcode, "INDX_IC_CTCODE");

                entity.HasIndex(e => e.Id, "SYS_C0014547")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Changetype)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("changetype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.DataSources)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("data_sources")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.ExecuteOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("execute_owner");

                entity.Property(e => e.ExecuteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("execute_time");

                entity.Property(e => e.InasnCticketcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inasn_cticketcode");

                entity.Property(e => e.InasnD)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inasn_d");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_time");
            });

            modelBuilder.Entity<InasnchangeD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__INASNCHA__DC501A7D49DD39AF");

                entity.ToTable("INASNCHANGE_D");

                entity.HasIndex(e => e.Ids, "SYS_C0014551")
                    .IsUnique();

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.AsnDIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("asn_d_ids");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_time");

                entity.Property(e => e.Nownum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("nownum");

                entity.Property(e => e.Oldnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldnum");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.InasnchangeD)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("PKICD_ID");
            });

            modelBuilder.Entity<Inassit>(entity =>
            {
                entity.ToTable("INASSIT");

                entity.HasIndex(e => e.Casnid, "INASSIT_INDEX_CASNID");

                entity.HasIndex(e => e.Cticketcode, "INASSIT_INDEX_CTICKETCODE")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "SYS_C0014553")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Casnid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("casnid");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cdefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("cdefine3");

                entity.Property(e => e.Cdefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("cdefine4");

                entity.Property(e => e.Cdefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cdefine5");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("critical_part")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");
            });

            modelBuilder.Entity<InassitD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__INASSIT___DC501A7D7F930D5A");

                entity.ToTable("INASSIT_D");

                entity.HasIndex(e => e.Id, "INASSIT_D_INDEX_ID");

                entity.HasIndex(e => e.Ids, "SYS_C0014563")
                    .IsUnique();

                entity.HasIndex(e => new { e.Cinvcode, e.Cpositioncode, e.Casnid }, "WMSDB01");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Casnid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("casnid");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coperator)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coperator");

                entity.Property(e => e.Coperatorcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coperatorcode");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.CriticalPart)
                    .HasColumnName("CRITICAL_PART")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Iasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("iasnline");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("inum");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.InassitD)
                    .HasForeignKey(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("INASSIT_D_FK");
            });

            modelBuilder.Entity<Inbill>(entity =>
            {
                entity.ToTable("INBILL");

                entity.HasIndex(e => e.Casnid, "INBILL_INDEX_CASNID");

                entity.HasIndex(e => new { e.Cerpcode, e.Ccreateownercode, e.Itype, e.Cstatus }, "INBILL_INDEX_CERPCODE");

                entity.HasIndex(e => e.Cticketcode, "INBILL_INDEX_CTICKETCODE")
                    .IsUnique();

                entity.HasIndex(e => e.Id, "SYS_C0014569")
                    .IsUnique();

                entity.HasIndex(e => e.Cstatus, "inbill_cstatus");

                entity.HasIndex(e => e.Dcreatetime, "inbill_dcreatetime");

                entity.HasIndex(e => e.Itype, "inbill_itype");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Casnid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("casnid");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Creatertype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("creatertype");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Cvender)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cvender");

                entity.Property(e => e.Cvendercode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cvendercode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Debitowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("debitowner");

                entity.Property(e => e.Debittime)
                    .HasColumnType("datetime")
                    .HasColumnName("debittime");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.IsTemporary)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.Operationtype).HasColumnName("operationtype");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<InbillD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__INBILL_D__DC501A7D353656F1");

                entity.ToTable("INBILL_D");

                entity.HasIndex(e => new { e.Cinvcode, e.Cstatus, e.Cpositioncode }, "INBILL_D_INDEX_CINVCODE");

                entity.HasIndex(e => e.Id, "INBILL_D_INDEX_ID");

                entity.HasIndex(e => e.Ids, "SYS_C0014577")
                    .IsUnique();

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.AsnDIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("asn_d_ids");

                entity.Property(e => e.AsndLineId).HasColumnName("AsndLineID");

                entity.Property(e => e.AsrsNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_num");

                entity.Property(e => e.AsrsStatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Callocateid)
                    .HasMaxLength(50)
                    .HasColumnName("callocateid");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinpersoncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cinpersoncode");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cnewpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cnewpositioncode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cstoppositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cstoppositioncode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Iasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("iasnline");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iline).HasColumnName("iline");

                entity.Property(e => e.Inbilltype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inbilltype");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineId).HasColumnName("LineID");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pallet_code");

                entity.Property(e => e.Partno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("partno");

                entity.Property(e => e.Space)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("space");

                entity.Property(e => e.SpaceStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("space_status");

                entity.Property(e => e.Wire)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wire");

                entity.Property(e => e.Wmstskid)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wmstskid");
            });

            modelBuilder.Entity<InbillDBn>(entity =>
            {
                entity.ToTable("INBILL_D_BN");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.BnCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BN_code");

                entity.Property(e => e.BnCode20)
                    .HasMaxLength(50)
                    .HasColumnName("BN_CODE20");

                entity.Property(e => e.Bntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("bntype");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Furnaceno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("furnaceno");

                entity.Property(e => e.Istransed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("istransed")
                    .IsFixedLength(true);

                entity.Property(e => e.Lastvpdowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastvpdowner");

                entity.Property(e => e.Lastvpdtime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastvpdtime");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.ScanIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("scan_ids");

                entity.Property(e => e.Snids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SNIDS");

                entity.Property(e => e.Transedtime)
                    .HasColumnType("datetime")
                    .HasColumnName("transedtime");

                entity.Property(e => e.UnionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("union_id");

                entity.Property(e => e.Worktype)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("worktype")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<InbillDSn>(entity =>
            {
                entity.ToTable("INBILL_D_SN");

                entity.HasIndex(e => e.Cinvcode, "INBILL_D_SN_IK");

                entity.HasIndex(e => e.SnCode, "INBILL_D_SN_IK1");

                entity.HasIndex(e => e.Id, "SYS_C0014585")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Furnaceno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("furnaceno");

                entity.Property(e => e.InbillDIds)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inbill_d_ids");

                entity.Property(e => e.InbillId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inbill_id");

                entity.Property(e => e.Istransed)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("istransed")
                    .IsFixedLength(true);

                entity.Property(e => e.Lastvpdowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastvpdowner");

                entity.Property(e => e.Lastvpdtime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastvpdtime");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.Rulecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULECODE");

                entity.Property(e => e.ScanIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("scan_ids");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");

                entity.Property(e => e.SnCode20)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE20");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Transedtime)
                    .HasColumnType("datetime")
                    .HasColumnName("transedtime");

                entity.Property(e => e.UnionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("union_id");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("worktype")
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Inpo>(entity =>
            {
                entity.ToTable("INPO");

                entity.HasIndex(e => e.Id, "SYS_C0014588")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("currency");

                entity.Property(e => e.Define1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("define1");

                entity.Property(e => e.Define2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("define2");

                entity.Property(e => e.Define3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("define3");

                entity.Property(e => e.Define4)
                    .HasColumnType("datetime")
                    .HasColumnName("define4");

                entity.Property(e => e.Define5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("define5");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Memo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Paymentterm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("paymentterm");

                entity.Property(e => e.Podate)
                    .HasColumnType("datetime")
                    .HasColumnName("podate");

                entity.Property(e => e.Pono)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pono");

                entity.Property(e => e.Potype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("potype");

                entity.Property(e => e.Shipfrom)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("shipfrom");

                entity.Property(e => e.Shipto)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("shipto");

                entity.Property(e => e.Source)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("source")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Status)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vendorid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("vendorid");

                entity.Property(e => e.Vendorname)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("vendorname");
            });

            modelBuilder.Entity<InpoD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__INPO_D__DC501A7D23D8E96B");

                entity.ToTable("INPO_D");

                entity.HasIndex(e => e.Ids, "SYS_C0014595")
                    .IsUnique();

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Define1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("define1");

                entity.Property(e => e.Define2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("define2");

                entity.Property(e => e.Define3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("define3");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Poline)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("poline");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("price");

                entity.Property(e => e.Qc)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("qc")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Status)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("status");

                entity.Property(e => e.Unit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("unit");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.InpoD)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("INPO_D_FK_ID");
            });

            modelBuilder.Entity<InterfaceLostTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INTERFACE_LOST_TEMP");

                entity.Property(e => e.Attribute11)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute11");

                entity.Property(e => e.Attribute7)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute7");

                entity.Property(e => e.InventoryItemId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("inventory_item_id");

                entity.Property(e => e.LocatorId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("locator_id");

                entity.Property(e => e.Qty1)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty1");

                entity.Property(e => e.Qty2)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty2");

                entity.Property(e => e.SubinventoryCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("subinventory_code");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transaction_date");

                entity.Property(e => e.TransactionSourceId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_source_id");
            });

            modelBuilder.Entity<Intype>(entity =>
            {
                entity.HasKey(e => e.Typeid)
                    .HasName("INTYPE_ID");

                entity.ToTable("INTYPE");

                entity.Property(e => e.Typeid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typeid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Attribute1)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("attribute1");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.DisableDate)
                    .HasColumnType("datetime")
                    .HasColumnName("disable_date");

                entity.Property(e => e.Enable)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("enable")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Enabledate)
                    .HasColumnType("datetime")
                    .HasColumnName("enabledate");

                entity.Property(e => e.Enableuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("enableuser");

                entity.Property(e => e.ErpSourceTypecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("erp_source_typecode");

                entity.Property(e => e.ErpSourceTypename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("erp_source_typename");

                entity.Property(e => e.IsMatchSo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsMatchVendor)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsQuery)
                    .HasColumnName("Is_Query")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsZf)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("is_zf");

                entity.Property(e => e.TransactionActionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_action_id");

                entity.Property(e => e.TransactionSourceTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_source_type_id");

                entity.Property(e => e.TypeClass)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type_class");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<IntypeBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INTYPE_BAK");

                entity.Property(e => e.Attribute1)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("attribute1");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.DisableDate)
                    .HasColumnType("datetime")
                    .HasColumnName("disable_date");

                entity.Property(e => e.IsZf)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("is_zf");

                entity.Property(e => e.TransactionActionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_action_id");

                entity.Property(e => e.TransactionSourceTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_source_type_id");

                entity.Property(e => e.TypeClass)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type_class");

                entity.Property(e => e.Typeid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typeid");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<Intypebak1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("INTYPEBAK");

                entity.Property(e => e.Attribute1)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("attribute1");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.TransactionActionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_action_id");

                entity.Property(e => e.TransactionSourceTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_source_type_id");

                entity.Property(e => e.TypeClass)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type_class");

                entity.Property(e => e.Typeid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typeid");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<LineExceptMo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LINE_EXCEPT_MO");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.Cstatus)
                    .HasColumnType("decimal(1, 0)")
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.LastUpdDate)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_date");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.Type)
                    .HasColumnType("decimal(2, 0)")
                    .HasColumnName("type");
            });

            modelBuilder.Entity<LogOutsnTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LOG_OUTSN_TEST");

                entity.Property(e => e.Datecode)
                    .HasMaxLength(50)
                    .HasColumnName("datecode");

                entity.Property(e => e.Furnaceno)
                    .HasMaxLength(50)
                    .HasColumnName("furnaceno");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Idate)
                    .HasColumnType("datetime")
                    .HasColumnName("idate");

                entity.Property(e => e.Qty)
                    .HasMaxLength(50)
                    .HasColumnName("qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.StockId)
                    .HasMaxLength(50)
                    .HasColumnName("stock_id");

                entity.Property(e => e.Stocktype)
                    .HasMaxLength(50)
                    .HasColumnName("stocktype");
            });

            modelBuilder.Entity<LogRevokeTempinbill>(entity =>
            {
                entity.ToTable("LOG_REVOKE_TEMPINBILL");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateUser).HasMaxLength(50);

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(50)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.ErrorMsg).HasMaxLength(2000);

                entity.Property(e => e.ErrorNumber).HasMaxLength(50);

                entity.Property(e => e.Inbillcode)
                    .HasMaxLength(50)
                    .HasColumnName("INBILLCODE");

                entity.Property(e => e.Palletdcode)
                    .HasMaxLength(50)
                    .HasColumnName("PALLETDCODE");
            });

            modelBuilder.Entity<LogSyserror>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LOG_SYSERROR");

                entity.HasIndex(e => e.SovrceNo, "LOG_SYSERROR_sovrce_no");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Errorcode)
                    .HasColumnName("errorcode")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Errormsg).HasColumnName("errormsg");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.SovrceNo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sovrce_no");

                entity.Property(e => e.Type)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("type")
                    .HasComment("0 : 系统日志 ，1: 上架指引，2: 拣货指引, 3 ：入库扣帐, 4：出库扣帐");
            });

            modelBuilder.Entity<LogSyserrorAppBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LOG_SYSERROR_APP_BAK");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Errormsg)
                    .IsRequired()
                    .HasColumnType("ntext")
                    .HasColumnName("errormsg");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Opttime)
                    .HasColumnType("datetime")
                    .HasColumnName("opttime");

                entity.Property(e => e.SovrceNo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sovrce_no");

                entity.Property(e => e.Type)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("type");
            });

            modelBuilder.Entity<MlogEbsOpenQuantity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MLOG$_EBS_OPEN_QUANTITY");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("change_vector$$");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("dmltype$$");

                entity.Property(e => e.MRow)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("m_row$$");

                entity.Property(e => e.OldNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("old_new$$");

                entity.Property(e => e.Snaptime)
                    .HasColumnType("datetime")
                    .HasColumnName("snaptime$$");

                entity.Property(e => e.Xid)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("xid$$");
            });

            modelBuilder.Entity<MlogStockCurrent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MLOG$_STOCK_CURRENT");

                entity.Property(e => e.ChangeVector)
                    .HasMaxLength(255)
                    .HasColumnName("change_vector$$");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cwarehousecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Dmltype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("dmltype$$");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.MRow)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("m_row$$");

                entity.Property(e => e.OldNew)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("old_new$$");

                entity.Property(e => e.Sequence)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sequence$$");

                entity.Property(e => e.Snaptime)
                    .HasColumnType("datetime")
                    .HasColumnName("snaptime$$");

                entity.Property(e => e.Xid)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("xid$$");
            });

            modelBuilder.Entity<MoCinvcodeFlag>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MO_CINVCODE_FLAG");

                entity.Property(e => e.AsnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("asn_code");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(30)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.DataSources)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("data_sources");

                entity.Property(e => e.Flag)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("flag");

                entity.Property(e => e.JobFlag)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("job_flag");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(30)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_time");

                entity.Property(e => e.Mo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("mo");

                entity.Property(e => e.Oracleid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oracleid");

                entity.Property(e => e.Sequence)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sequence");
            });

            modelBuilder.Entity<MoDepartment>(entity =>
            {
                entity.ToTable("MO_DEPARTMENT");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.DepartmentDescription)
                    .HasMaxLength(125)
                    .IsUnicode(false)
                    .HasColumnName("department_description");

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("department_name");

                entity.Property(e => e.Status)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("status")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<MtlInterfaceCache>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MTL_INTERFACE_CACHE");

                entity.Property(e => e.AccountingClass)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("accounting_class");

                entity.Property(e => e.AcctPeriodId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("acct_period_id");

                entity.Property(e => e.AlternateBomDesignator)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("alternate_bom_designator");

                entity.Property(e => e.AlternateRoutingDesignator)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("alternate_routing_designator");

                entity.Property(e => e.Attribute1)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute1");

                entity.Property(e => e.Attribute10)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute10");

                entity.Property(e => e.Attribute11)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute11");

                entity.Property(e => e.Attribute12)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute12");

                entity.Property(e => e.Attribute13)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute13");

                entity.Property(e => e.Attribute14)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute14");

                entity.Property(e => e.Attribute15)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute15");

                entity.Property(e => e.Attribute2)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute2");

                entity.Property(e => e.Attribute3)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute3");

                entity.Property(e => e.Attribute4)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute4");

                entity.Property(e => e.Attribute5)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute5");

                entity.Property(e => e.Attribute6)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute6");

                entity.Property(e => e.Attribute7)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute7");

                entity.Property(e => e.Attribute8)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute8");

                entity.Property(e => e.Attribute9)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute9");

                entity.Property(e => e.AttributeCategory)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("attribute_category");

                entity.Property(e => e.BomRevision)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("bom_revision");

                entity.Property(e => e.BomRevisionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bom_revision_date");

                entity.Property(e => e.BuildSequence)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("build_sequence");

                entity.Property(e => e.CompletionTransactionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("completion_transaction_id");

                entity.Property(e => e.Containers)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("containers");

                entity.Property(e => e.ContentLpnId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("content_lpn_id");

                entity.Property(e => e.CostGroupId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cost_group_id");

                entity.Property(e => e.CostTypeId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cost_type_id");

                entity.Property(e => e.CreatedBy)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("created_by");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("creation_date");

                entity.Property(e => e.CurrencyCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("currency_code");

                entity.Property(e => e.CurrencyConversionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("currency_conversion_date");

                entity.Property(e => e.CurrencyConversionRate)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("currency_conversion_rate");

                entity.Property(e => e.CurrencyConversionType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("currency_conversion_type");

                entity.Property(e => e.CustomerShipId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("customer_ship_id");

                entity.Property(e => e.DemandClass)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("demand_class");

                entity.Property(e => e.DemandId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("demand_id");

                entity.Property(e => e.DemandSourceDelivery)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("demand_source_delivery");

                entity.Property(e => e.DemandSourceHeaderId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("demand_source_header_id");

                entity.Property(e => e.DemandSourceLine)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("demand_source_line");

                entity.Property(e => e.DepartmentId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("department_id");

                entity.Property(e => e.DistributionAccountId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("distribution_account_id");

                entity.Property(e => e.DspSegment1)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment1");

                entity.Property(e => e.DspSegment10)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment10");

                entity.Property(e => e.DspSegment11)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment11");

                entity.Property(e => e.DspSegment12)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment12");

                entity.Property(e => e.DspSegment13)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment13");

                entity.Property(e => e.DspSegment14)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment14");

                entity.Property(e => e.DspSegment15)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment15");

                entity.Property(e => e.DspSegment16)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment16");

                entity.Property(e => e.DspSegment17)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment17");

                entity.Property(e => e.DspSegment18)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment18");

                entity.Property(e => e.DspSegment19)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment19");

                entity.Property(e => e.DspSegment2)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment2");

                entity.Property(e => e.DspSegment20)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment20");

                entity.Property(e => e.DspSegment21)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment21");

                entity.Property(e => e.DspSegment22)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment22");

                entity.Property(e => e.DspSegment23)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment23");

                entity.Property(e => e.DspSegment24)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment24");

                entity.Property(e => e.DspSegment25)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment25");

                entity.Property(e => e.DspSegment26)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment26");

                entity.Property(e => e.DspSegment27)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment27");

                entity.Property(e => e.DspSegment28)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment28");

                entity.Property(e => e.DspSegment29)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment29");

                entity.Property(e => e.DspSegment3)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment3");

                entity.Property(e => e.DspSegment30)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment30");

                entity.Property(e => e.DspSegment4)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment4");

                entity.Property(e => e.DspSegment5)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment5");

                entity.Property(e => e.DspSegment6)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment6");

                entity.Property(e => e.DspSegment7)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment7");

                entity.Property(e => e.DspSegment8)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment8");

                entity.Property(e => e.DspSegment9)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dsp_segment9");

                entity.Property(e => e.DstSegment1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment1");

                entity.Property(e => e.DstSegment10)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment10");

                entity.Property(e => e.DstSegment11)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment11");

                entity.Property(e => e.DstSegment12)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment12");

                entity.Property(e => e.DstSegment13)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment13");

                entity.Property(e => e.DstSegment14)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment14");

                entity.Property(e => e.DstSegment15)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment15");

                entity.Property(e => e.DstSegment16)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment16");

                entity.Property(e => e.DstSegment17)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment17");

                entity.Property(e => e.DstSegment18)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment18");

                entity.Property(e => e.DstSegment19)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment19");

                entity.Property(e => e.DstSegment2)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment2");

                entity.Property(e => e.DstSegment20)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment20");

                entity.Property(e => e.DstSegment21)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment21");

                entity.Property(e => e.DstSegment22)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment22");

                entity.Property(e => e.DstSegment23)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment23");

                entity.Property(e => e.DstSegment24)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment24");

                entity.Property(e => e.DstSegment25)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment25");

                entity.Property(e => e.DstSegment26)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment26");

                entity.Property(e => e.DstSegment27)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment27");

                entity.Property(e => e.DstSegment28)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment28");

                entity.Property(e => e.DstSegment29)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment29");

                entity.Property(e => e.DstSegment3)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment3");

                entity.Property(e => e.DstSegment30)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment30");

                entity.Property(e => e.DstSegment4)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment4");

                entity.Property(e => e.DstSegment5)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment5");

                entity.Property(e => e.DstSegment6)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment6");

                entity.Property(e => e.DstSegment7)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment7");

                entity.Property(e => e.DstSegment8)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment8");

                entity.Property(e => e.DstSegment9)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("dst_segment9");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("employee_code");

                entity.Property(e => e.EncumbranceAccount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("encumbrance_account");

                entity.Property(e => e.EncumbranceAmount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("encumbrance_amount");

                entity.Property(e => e.EndItemUnitNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("end_item_unit_number");

                entity.Property(e => e.ErrorCode)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("error_code");

                entity.Property(e => e.ErrorExplanation)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("error_explanation");

                entity.Property(e => e.ExpectedArrivalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("expected_arrival_date");

                entity.Property(e => e.ExpenditureType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("expenditure_type");

                entity.Property(e => e.FinalCompletionFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("final_completion_flag");

                entity.Property(e => e.FlowSchedule)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("flow_schedule");

                entity.Property(e => e.FreightCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("freight_code");

                entity.Property(e => e.InventoryItem)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("inventory_item");

                entity.Property(e => e.InventoryItemId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("inventory_item_id");

                entity.Property(e => e.ItemSegment1)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment1");

                entity.Property(e => e.ItemSegment10)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment10");

                entity.Property(e => e.ItemSegment11)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment11");

                entity.Property(e => e.ItemSegment12)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment12");

                entity.Property(e => e.ItemSegment13)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment13");

                entity.Property(e => e.ItemSegment14)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment14");

                entity.Property(e => e.ItemSegment15)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment15");

                entity.Property(e => e.ItemSegment16)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment16");

                entity.Property(e => e.ItemSegment17)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment17");

                entity.Property(e => e.ItemSegment18)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment18");

                entity.Property(e => e.ItemSegment19)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment19");

                entity.Property(e => e.ItemSegment2)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment2");

                entity.Property(e => e.ItemSegment20)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment20");

                entity.Property(e => e.ItemSegment3)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment3");

                entity.Property(e => e.ItemSegment4)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment4");

                entity.Property(e => e.ItemSegment5)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment5");

                entity.Property(e => e.ItemSegment6)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment6");

                entity.Property(e => e.ItemSegment7)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment7");

                entity.Property(e => e.ItemSegment8)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment8");

                entity.Property(e => e.ItemSegment9)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("item_segment9");

                entity.Property(e => e.KanbanCardId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("kanban_card_id");

                entity.Property(e => e.LastUpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("last_update_date");

                entity.Property(e => e.LastUpdateLogin)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("last_update_login");

                entity.Property(e => e.LastUpdatedBy)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LineItemNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("line_item_num");

                entity.Property(e => e.LocSegment1)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment1");

                entity.Property(e => e.LocSegment10)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment10");

                entity.Property(e => e.LocSegment11)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment11");

                entity.Property(e => e.LocSegment12)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment12");

                entity.Property(e => e.LocSegment13)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment13");

                entity.Property(e => e.LocSegment14)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment14");

                entity.Property(e => e.LocSegment15)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment15");

                entity.Property(e => e.LocSegment16)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment16");

                entity.Property(e => e.LocSegment17)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment17");

                entity.Property(e => e.LocSegment18)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment18");

                entity.Property(e => e.LocSegment19)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment19");

                entity.Property(e => e.LocSegment2)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment2");

                entity.Property(e => e.LocSegment20)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment20");

                entity.Property(e => e.LocSegment3)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment3");

                entity.Property(e => e.LocSegment4)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment4");

                entity.Property(e => e.LocSegment5)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment5");

                entity.Property(e => e.LocSegment6)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment6");

                entity.Property(e => e.LocSegment7)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment7");

                entity.Property(e => e.LocSegment8)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment8");

                entity.Property(e => e.LocSegment9)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("loc_segment9");

                entity.Property(e => e.LocatorId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("locator_id");

                entity.Property(e => e.LocatorName)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("locator_name");

                entity.Property(e => e.LockFlag)
                    .HasColumnType("decimal(1, 0)")
                    .HasColumnName("lock_flag");

                entity.Property(e => e.LpnId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("lpn_id");

                entity.Property(e => e.MaterialAccount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("material_account");

                entity.Property(e => e.MaterialExpenseAccount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("material_expense_account");

                entity.Property(e => e.MaterialOverheadAccount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("material_overhead_account");

                entity.Property(e => e.MoveTransactionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("move_transaction_id");

                entity.Property(e => e.MovementId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("movement_id");

                entity.Property(e => e.MrpCode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("mrp_code");

                entity.Property(e => e.NegativeReqFlag)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("negative_req_flag");

                entity.Property(e => e.NewAverageCost)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("new_average_cost");

                entity.Property(e => e.OperationSeqNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("operation_seq_num");

                entity.Property(e => e.OrgCostGroupId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("org_cost_group_id");

                entity.Property(e => e.OrganizationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("organization_id");

                entity.Property(e => e.OrganizationType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("organization_type");

                entity.Property(e => e.OutsideProcessingAccount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("outside_processing_account");

                entity.Property(e => e.OvercompletionPrimaryQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("overcompletion_primary_qty");

                entity.Property(e => e.OvercompletionTransactionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("overcompletion_transaction_id");

                entity.Property(e => e.OvercompletionTransactionQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("overcompletion_transaction_qty");

                entity.Property(e => e.OverheadAccount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("overhead_account");

                entity.Property(e => e.OwningOrganizationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("owning_organization_id");

                entity.Property(e => e.OwningTpType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("owning_tp_type");

                entity.Property(e => e.PaExpenditureOrgId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("pa_expenditure_org_id");

                entity.Property(e => e.ParentId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("parent_id");

                entity.Property(e => e.PercentageChange)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("percentage_change");

                entity.Property(e => e.PickingLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("picking_line_id");

                entity.Property(e => e.PlanningOrganizationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("planning_organization_id");

                entity.Property(e => e.PlanningTpType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("planning_tp_type");

                entity.Property(e => e.PrimaryQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("primary_quantity");

                entity.Property(e => e.PrimarySwitch)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("primary_switch");

                entity.Property(e => e.ProcessFlag)
                    .HasColumnType("decimal(1, 0)")
                    .HasColumnName("process_flag");

                entity.Property(e => e.ProgramApplicationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("program_application_id");

                entity.Property(e => e.ProgramId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("program_id");

                entity.Property(e => e.ProgramUpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("program_update_date");

                entity.Property(e => e.ProjectId)
                    .HasColumnType("decimal(15, 0)")
                    .HasColumnName("project_id");

                entity.Property(e => e.QaCollectionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("qa_collection_id");

                entity.Property(e => e.RcvTransactionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("rcv_transaction_id");

                entity.Property(e => e.ReasonId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("reason_id");

                entity.Property(e => e.RebuildActivityId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("rebuild_activity_id");

                entity.Property(e => e.RebuildItemId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("rebuild_item_id");

                entity.Property(e => e.RebuildJobName)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("rebuild_job_name");

                entity.Property(e => e.RebuildSerialNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("rebuild_serial_number");

                entity.Property(e => e.ReceivingDocument)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("receiving_document");

                entity.Property(e => e.RelieveHighLevelRsvFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("relieve_high_level_rsv_flag");

                entity.Property(e => e.RelieveReservationsFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("relieve_reservations_flag");

                entity.Property(e => e.RepetitiveLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("repetitive_line_id");

                entity.Property(e => e.RepresentativeLotNumber)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("representative_lot_number");

                entity.Property(e => e.RequestId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("request_id");

                entity.Property(e => e.RequiredFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("required_flag");

                entity.Property(e => e.RequisitionDistributionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("requisition_distribution_id");

                entity.Property(e => e.RequisitionLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("requisition_line_id");

                entity.Property(e => e.ReservationQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("reservation_quantity");

                entity.Property(e => e.ResourceAccount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("resource_account");

                entity.Property(e => e.Revision)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("revision");

                entity.Property(e => e.RoutingRevision)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("routing_revision");

                entity.Property(e => e.RoutingRevisionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("routing_revision_date");

                entity.Property(e => e.ScheduleGroup)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("schedule_group");

                entity.Property(e => e.ScheduleId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("schedule_id");

                entity.Property(e => e.ScheduleNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("schedule_number");

                entity.Property(e => e.ScheduleUpdateCode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("schedule_update_code");

                entity.Property(e => e.ScheduledFlag)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("scheduled_flag");

                entity.Property(e => e.ScheduledPaybackDate)
                    .HasColumnType("datetime")
                    .HasColumnName("scheduled_payback_date");

                entity.Property(e => e.SecondaryTransactionQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("secondary_transaction_quantity");

                entity.Property(e => e.SecondaryUomCode)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("secondary_uom_code");

                entity.Property(e => e.SetupTeardownCode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("setup_teardown_code");

                entity.Property(e => e.ShipToLocationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ship_to_location_id");

                entity.Property(e => e.ShipmentNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("shipment_number");

                entity.Property(e => e.ShippableFlag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("shippable_flag");

                entity.Property(e => e.ShippedQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("shipped_quantity");

                entity.Property(e => e.SourceCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("source_code");

                entity.Property(e => e.SourceHeaderId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("source_header_id");

                entity.Property(e => e.SourceLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("source_line_id");

                entity.Property(e => e.SourceLotNumber)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("source_lot_number");

                entity.Property(e => e.SourceProjectId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("source_project_id");

                entity.Property(e => e.SourceTaskId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("source_task_id");

                entity.Property(e => e.SubinventoryCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("subinventory_code");

                entity.Property(e => e.SubstitutionItemId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("substitution_item_id");

                entity.Property(e => e.SubstitutionTypeId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("substitution_type_id");

                entity.Property(e => e.TaskId)
                    .HasColumnType("decimal(15, 0)")
                    .HasColumnName("task_id");

                entity.Property(e => e.ToProjectId)
                    .HasColumnType("decimal(15, 0)")
                    .HasColumnName("to_project_id");

                entity.Property(e => e.ToTaskId)
                    .HasColumnType("decimal(15, 0)")
                    .HasColumnName("to_task_id");

                entity.Property(e => e.TransactionActionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_action_id");

                entity.Property(e => e.TransactionBatchId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_batch_id");

                entity.Property(e => e.TransactionBatchSeq)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_batch_seq");

                entity.Property(e => e.TransactionCost)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_cost");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transaction_date");

                entity.Property(e => e.TransactionGroupId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_group_id");

                entity.Property(e => e.TransactionGroupSeq)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_group_seq");

                entity.Property(e => e.TransactionHeaderId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_header_id");

                entity.Property(e => e.TransactionInterfaceId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_interface_id");

                entity.Property(e => e.TransactionMode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_mode");

                entity.Property(e => e.TransactionQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("transaction_quantity");

                entity.Property(e => e.TransactionReference)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("transaction_reference");

                entity.Property(e => e.TransactionSequenceId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_sequence_id");

                entity.Property(e => e.TransactionSourceId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_source_id");

                entity.Property(e => e.TransactionSourceName)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("transaction_source_name");

                entity.Property(e => e.TransactionSourceTypeId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_source_type_id");

                entity.Property(e => e.TransactionTypeId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_type_id");

                entity.Property(e => e.TransactionUom)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("transaction_uom");

                entity.Property(e => e.TransferCost)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_cost");

                entity.Property(e => e.TransferCostGroupId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_cost_group_id");

                entity.Property(e => e.TransferLocator)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_locator");

                entity.Property(e => e.TransferLpnId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_lpn_id");

                entity.Property(e => e.TransferOrganization)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_organization");

                entity.Property(e => e.TransferOrganizationType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_organization_type");

                entity.Property(e => e.TransferOwningTpType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_owning_tp_type");

                entity.Property(e => e.TransferPercentage)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_percentage");

                entity.Property(e => e.TransferPlanningTpType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_planning_tp_type");

                entity.Property(e => e.TransferPrice)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_price");

                entity.Property(e => e.TransferSubinventory)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("transfer_subinventory");

                entity.Property(e => e.TransportationAccount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transportation_account");

                entity.Property(e => e.TransportationCost)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transportation_cost");

                entity.Property(e => e.TrxSourceDeliveryId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("trx_source_delivery_id");

                entity.Property(e => e.TrxSourceLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("trx_source_line_id");

                entity.Property(e => e.UssglTransactionCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ussgl_transaction_code");

                entity.Property(e => e.ValidationRequired)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("validation_required");

                entity.Property(e => e.ValueChange)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("value_change");

                entity.Property(e => e.VendorLotNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("vendor_lot_number");

                entity.Property(e => e.WaybillAirbill)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("waybill_airbill");

                entity.Property(e => e.WipEntityType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wip_entity_type");

                entity.Property(e => e.WipSupplyType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wip_supply_type");

                entity.Property(e => e.XferLocSegment1)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment1");

                entity.Property(e => e.XferLocSegment10)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment10");

                entity.Property(e => e.XferLocSegment11)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment11");

                entity.Property(e => e.XferLocSegment12)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment12");

                entity.Property(e => e.XferLocSegment13)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment13");

                entity.Property(e => e.XferLocSegment14)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment14");

                entity.Property(e => e.XferLocSegment15)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment15");

                entity.Property(e => e.XferLocSegment16)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment16");

                entity.Property(e => e.XferLocSegment17)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment17");

                entity.Property(e => e.XferLocSegment18)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment18");

                entity.Property(e => e.XferLocSegment19)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment19");

                entity.Property(e => e.XferLocSegment2)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment2");

                entity.Property(e => e.XferLocSegment20)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment20");

                entity.Property(e => e.XferLocSegment3)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment3");

                entity.Property(e => e.XferLocSegment4)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment4");

                entity.Property(e => e.XferLocSegment5)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment5");

                entity.Property(e => e.XferLocSegment6)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment6");

                entity.Property(e => e.XferLocSegment7)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment7");

                entity.Property(e => e.XferLocSegment8)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment8");

                entity.Property(e => e.XferLocSegment9)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("xfer_loc_segment9");

                entity.Property(e => e.XfrOwningOrganizationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("xfr_owning_organization_id");

                entity.Property(e => e.XfrPlanningOrganizationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("xfr_planning_organization_id");

                entity.Property(e => e.XmlDocumentId)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("xml_document_id");
            });

            modelBuilder.Entity<OutGroup>(entity =>
            {
                entity.ToTable("OUT_GROUP");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.Cstatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("group_name");

                entity.Property(e => e.LastUpdDate)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_date");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("remark");
            });

            modelBuilder.Entity<OutGroupD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK_OGD_IDS");

                entity.ToTable("OUT_GROUP_D");

                entity.HasIndex(e => e.Cinvcode, "INDX_OGD_CINVCODE")
                    .IsUnique();

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(125)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.OutGroupD)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("FK_OGD_IDS");
            });

            modelBuilder.Entity<OutGroupDHis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUT_GROUP_D_HIS");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(125)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.LogId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("log_id");
            });

            modelBuilder.Entity<OutGroupHis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUT_GROUP_HIS");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.Cstatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("group_name");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.LastUpdDate)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_date");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LogId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("log_id");

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("remark");
            });

            modelBuilder.Entity<OutHandover>(entity =>
            {
                entity.ToTable("OUT_HANDOVER");

                entity.HasIndex(e => e.OutbillDId, "INDEX_OUTBILL_D_ID");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.OutbillDId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outbill_d_id");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<OutHandoverCheck>(entity =>
            {
                entity.ToTable("OUT_HANDOVER_CHECK");

                entity.HasIndex(e => new { e.Cerpcode, e.Cinvcode }, "OUT_HANDOVER_CHECK_ERPCINV");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.QtyDemand)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty_demand");

                entity.Property(e => e.QtyHandover)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty_handover");

                entity.Property(e => e.QtyOut)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty_out");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");
            });

            modelBuilder.Entity<OutHandoverHis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUT_HANDOVER_HIS");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Deletetime)
                    .HasColumnType("datetime")
                    .HasColumnName("deletetime");

                entity.Property(e => e.Deleteuser)
                    .HasMaxLength(50)
                    .HasColumnName("deleteuser");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.OutbillDId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outbill_d_id");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<OutPart>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUT_PART");

                entity.Property(e => e.PnHeader)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("pn_header");
            });

            modelBuilder.Entity<OutTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUT_TEST");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutasnid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.LogId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("log_id");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("otype");
            });

            modelBuilder.Entity<OutTestD>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUT_TEST_D");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutpersoncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coutpersoncode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Doutdate)
                    .HasColumnType("datetime")
                    .HasColumnName("doutdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.LogId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("log_id");
            });

            modelBuilder.Entity<OutTransportationplan>(entity =>
            {
                entity.ToTable("OUT_TRANSPORTATIONPLAN");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasComment("主键");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1")
                    .HasComment("自定义1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2")
                    .HasComment("自定义2");

                entity.Property(e => e.Cerpcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode")
                    .HasComment("销售单号");

                entity.Property(e => e.Cerpcodeline)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline")
                    .HasComment("销售单项次号");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode")
                    .HasComment("物料编码");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cinvname")
                    .HasComment("物料名称");

                entity.Property(e => e.Createtime)
                    .HasColumnType("date")
                    .HasColumnName("createtime")
                    .HasComment("创建日期(LN系统上传数据日期)");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("currency")
                    .HasComment("币种");

                entity.Property(e => e.Customeraddr)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("customeraddr")
                    .HasComment("客户地址");

                entity.Property(e => e.Customerno)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("customerno")
                    .HasComment("客户订单号");

                entity.Property(e => e.Cvender)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cvender")
                    .HasComment("客户名称");

                entity.Property(e => e.Cvendercode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cvendercode")
                    .HasComment("客户编码");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3")
                    .HasComment("自定义3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4")
                    .HasComment("自定义4");

                entity.Property(e => e.Docno)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("docno")
                    .HasComment("出运计划号");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5")
                    .HasComment("自定义5");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity")
                    .HasComment("数量");

                entity.Property(e => e.Issign)
                    .HasColumnName("ISSIGN")
                    .HasComment("是否确认（0：是，1：否）");

                entity.Property(e => e.Memo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("memo")
                    .HasComment("备注");

                entity.Property(e => e.Oaupdatetime)
                    .HasColumnType("date")
                    .HasColumnName("oaupdatetime")
                    .HasComment("最后修改时间(OA更新时间)");

                entity.Property(e => e.PackSntype).HasColumnName("PackSNType");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("palletcode")
                    .HasComment("箱号");

                entity.Property(e => e.Pladeliverydate)
                    .HasColumnType("datetime")
                    .HasColumnName("pladeliverydate")
                    .HasComment("计划提货日期");

                entity.Property(e => e.Producetime)
                    .HasColumnType("datetime")
                    .HasColumnName("PRODUCETIME")
                    .HasComment("出运单生成时间");

                entity.Property(e => e.Reqdeliverydate)
                    .HasColumnType("datetime")
                    .HasColumnName("reqdeliverydate")
                    .HasComment("要求交货日期");

                entity.Property(e => e.Singnowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SINGNOWNER")
                    .HasComment("确认人");

                entity.Property(e => e.Singtime)
                    .HasColumnType("datetime")
                    .HasColumnName("SINGTIME")
                    .HasComment("确认日期");

                entity.Property(e => e.Sntype).HasColumnName("SNType");

                entity.Property(e => e.Transtype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("transtype")
                    .HasComment("运输方式");

                entity.Property(e => e.Updatemark)
                    .HasColumnName("updatemark")
                    .HasComment("修改标记(WMS抓取数据并处理成功后回写。0-未处理；1-已处理;2-已发料)");

                entity.Property(e => e.Wmsupdatetime)
                    .HasColumnType("date")
                    .HasColumnName("wmsupdatetime")
                    .HasComment("最后修改时间(WMS更新时间)");
            });

            modelBuilder.Entity<OutUnpart>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUT_UNPART");

                entity.Property(e => e.PnHeader)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pn_header");
            });

            modelBuilder.Entity<Outasn>(entity =>
            {
                entity.ToTable("OUTASN");

                entity.HasIndex(e => new { e.Cerpcode, e.Ccreateownercode, e.Cstatus, e.Itype, e.IsSmt }, "OUTASN_INDEX_CERPCODE");

                entity.HasIndex(e => e.Cticketcode, "OUTASN_INDEX_CTICKETCODE")
                    .IsUnique();

                entity.HasIndex(e => e.Cstatus, "outasn_cstatus");

                entity.HasIndex(e => e.Dcreatetime, "outasn_dcreatetime");

                entity.HasIndex(e => e.Itype, "outasn_itype");

                entity.HasIndex(e => e.Cticketcode, "uk_outasn_cticketcode")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Billno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("billno");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .HasColumnName("cauditpersoncode");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.ClassCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("class_code");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("critical_part")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.DocDueDate)
                    .HasColumnType("datetime")
                    .HasComment("到期日");

                entity.Property(e => e.Docdate)
                    .HasColumnType("datetime")
                    .HasComment("过账日期");

                entity.Property(e => e.FgCinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fg_cinvcode");

                entity.Property(e => e.FgQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("fg_qty");

                entity.Property(e => e.Hynum)
                    .HasMaxLength(30)
                    .HasColumnName("HYNum")
                    .HasComment("合约单号");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsAssiting)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_assiting")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSemi)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_semi")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsWhole)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_whole")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.MergeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("merge_id");

                entity.Property(e => e.OutVendor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("out_vendor")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Reasoncode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("reasoncode");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");

                entity.Property(e => e.SpecialOut)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("special_out")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Wo)
                    .HasMaxLength(100)
                    .HasColumnName("wo");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype")
                    .HasComment("作业方式 0:平库 1:立库");
            });

            modelBuilder.Entity<Outasn2013>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTASN2013");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .HasColumnName("cauditpersoncode");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.ClassCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("class_code");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.FgCinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fg_cinvcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge");

                entity.Property(e => e.IsSemi)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_semi");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.MergeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("merge_id");

                entity.Property(e => e.OutVendor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("out_vendor");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");

                entity.Property(e => e.SpecialOut)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("special_out");
            });

            modelBuilder.Entity<OutasnAppBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTASN_APP_BAK");

                entity.Property(e => e.BakOwner)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("bak_owner");

                entity.Property(e => e.BakReason)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("bak_reason");

                entity.Property(e => e.BakTime)
                    .HasColumnType("datetime")
                    .HasColumnName("bak_time");

                entity.Property(e => e.BakType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("bak_type");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .HasColumnName("cauditpersoncode");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.ClassCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("class_code");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.FgCinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fg_cinvcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.MergeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("merge_id");

                entity.Property(e => e.OutVendor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("out_vendor")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");
            });

            modelBuilder.Entity<OutasnBuild>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTASN_BUILD");

                entity.Property(e => e.ClassCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("class_code");

                entity.Property(e => e.EndItem)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("end_item");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("item_id");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("item_name");

                entity.Property(e => e.MoId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("mo_id");

                entity.Property(e => e.MoName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("mo_name");

                entity.Property(e => e.Num)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("num");

                entity.Property(e => e.Oflag)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("oflag");

                entity.Property(e => e.SemiManufactures)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("semi_manufactures")
                    .IsFixedLength(true);

                entity.Property(e => e.Side)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("side");

                entity.Property(e => e.SmtFalg)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("smt_falg");

                entity.Property(e => e.TotalCount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("total_count");
            });

            modelBuilder.Entity<OutasnD>(entity =>
            {
                entity.HasKey(e => e.Ids);

                entity.ToTable("OUTASN_D");

                entity.HasIndex(e => new { e.Cinvcode, e.Cstatus, e.IsSmt }, "OUTASN_D_INDEX_CINVCODE");

                entity.HasIndex(e => e.Id, "OUTASN_D_INDEX_ID");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.DfShscode)
                    .HasMaxLength(50)
                    .HasColumnName("DfSHSCode")
                    .HasComment("预设储位");

                entity.Property(e => e.DfWhscode)
                    .HasMaxLength(50)
                    .HasColumnName("DfWHSCode")
                    .HasComment("预设仓库");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Isoline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("isoline");

                entity.Property(e => e.Lineid).HasColumnName("lineid");

                entity.Property(e => e.Manual)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("manual")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mergeqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("MERGEQTY")
                    .HasComment("合并数量");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .HasColumnName("unit")
                    .HasComment("单位名称");

                entity.Property(e => e.Wo)
                    .HasMaxLength(100)
                    .HasColumnName("wo");
            });

            modelBuilder.Entity<OutasnDAppBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTASN_D_APP_BAK");

                entity.Property(e => e.BakOwner)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("bak_owner");

                entity.Property(e => e.BakReason)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("bak_reason");

                entity.Property(e => e.BakTime)
                    .HasColumnType("datetime")
                    .HasColumnName("bak_time");

                entity.Property(e => e.BakType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("bak_type");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(20)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Isoline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("isoline");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");
            });

            modelBuilder.Entity<OutasnDHis>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("OUTASN_D_HIS_PK_ID");

                entity.ToTable("OUTASN_D_HIS");

                entity.HasIndex(e => e.Cinvcode, "OUTASN_D_HIS_INDEX_CINVCODE");

                entity.HasIndex(e => e.Id, "OUTASN_D_HIS_INDEX_ID");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(20)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Isoline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("isoline");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");
            });

            modelBuilder.Entity<OutasnDSplit>(entity =>
            {
                entity.ToTable("OUTASN_D_SPLIT");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CinvCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CjQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CreateUser).HasMaxLength(50);

                entity.Property(e => e.Flag).HasMaxLength(50);

                entity.Property(e => e.OldQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OutasnDIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Outasn_D_Ids");

                entity.Property(e => e.OutasnId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Outasn_Id");
            });

            modelBuilder.Entity<OutasnDTest>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("OUTASN_D_TEST_PK_ID");

                entity.ToTable("OUTASN_D_TEST");

                entity.HasIndex(e => e.Cinvcode, "OUTASN_D_TEST_INDEX_CINVCODE");

                entity.HasIndex(e => e.Id, "OUTASN_D_TEST_INDEX_ID");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(20)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Isoline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("isoline");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");
            });

            modelBuilder.Entity<OutasnDback>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTASN_DBACK");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(20)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt");

                entity.Property(e => e.Isoline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("isoline");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");
            });

            modelBuilder.Entity<OutasnHis>(entity =>
            {
                entity.ToTable("OUTASN_HIS");

                entity.HasIndex(e => e.Cerpcode, "OUTASN_HIS_INDEX_CERPCODE");

                entity.HasIndex(e => e.Cticketcode, "OUTASN_HIS_INDEX_CTICKETCODE");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .HasColumnName("cauditpersoncode");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Deletetime)
                    .HasColumnType("datetime")
                    .HasColumnName("deletetime");

                entity.Property(e => e.Deleteuser)
                    .HasMaxLength(50)
                    .HasColumnName("deleteuser");

                entity.Property(e => e.FgCinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fg_cinvcode");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.MergeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("merge_id");

                entity.Property(e => e.OutVendor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("out_vendor")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");
            });

            modelBuilder.Entity<OutasnTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTASN_TEMP");

                entity.Property(e => e.ClassCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("class_code");

                entity.Property(e => e.EndItem)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("end_item");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("item_id");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("item_name");

                entity.Property(e => e.MoId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("mo_id");

                entity.Property(e => e.MoName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("mo_name");

                entity.Property(e => e.Num)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("num");

                entity.Property(e => e.Oflag)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("oflag");

                entity.Property(e => e.Recordid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("recordid");

                entity.Property(e => e.SemiManufactures)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("semi_manufactures")
                    .IsFixedLength(true);

                entity.Property(e => e.Side)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("side");

                entity.Property(e => e.SmtFalg)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("smt_falg");

                entity.Property(e => e.TotalCount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("total_count");
            });

            modelBuilder.Entity<OutasnTempTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTASN_TEMP_TEST");

                entity.Property(e => e.EndItem)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("end_item");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("item_id");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("item_name");

                entity.Property(e => e.MoId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("mo_id");

                entity.Property(e => e.MoName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("mo_name");

                entity.Property(e => e.Num)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("num");

                entity.Property(e => e.Side)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("side");

                entity.Property(e => e.SmtFalg)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("smt_falg");

                entity.Property(e => e.TotalCount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("total_count");
            });

            modelBuilder.Entity<OutasnTest>(entity =>
            {
                entity.ToTable("OUTASN_TEST");

                entity.HasIndex(e => e.Cerpcode, "OUTASN_TEST_INDEX_CERPCODE");

                entity.HasIndex(e => e.Cticketcode, "OUTASN_TEST_INDEX_CTICKETCODE")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .HasColumnName("cauditpersoncode");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.FgCinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fg_cinvcode");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.MergeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("merge_id");

                entity.Property(e => e.OutVendor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("out_vendor")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");
            });

            modelBuilder.Entity<Outasnback>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTASNBACK");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .HasColumnName("cauditpersoncode");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.FgCinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fg_cinvcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.MergeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("merge_id");

                entity.Property(e => e.OutVendor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("out_vendor");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");
            });

            modelBuilder.Entity<Outasnchange>(entity =>
            {
                entity.ToTable("OUTASNCHANGE");

                entity.HasIndex(e => e.Cticketcode, "INDX_CTCODE");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Changetype)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("changetype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.DataSources)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("data_sources")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("erpcode");

                entity.Property(e => e.ExecuteOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("execute_owner");

                entity.Property(e => e.ExecuteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("execute_time");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_time");

                entity.Property(e => e.OutasnCticketcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("outasn_cticketcode");
            });

            modelBuilder.Entity<OutasnchangeD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PKOCD_IDS");

                entity.ToTable("OUTASNCHANGE_D");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.AsnDIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("asn_d_ids");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_time");

                entity.Property(e => e.Nownum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("nownum");

                entity.Property(e => e.Oldnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldnum");

                entity.Property(e => e.OutansId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outans_id");

                entity.Property(e => e.OutasnCticketcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("outasn_cticketcode");

                entity.Property(e => e.Reversealloid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("reversealloid");

                entity.Property(e => e.Transtype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("transtype");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.OutasnchangeD)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("PKOCD_ID");
            });

            modelBuilder.Entity<Outasnnotuseouttype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTASNNOTUSEOUTTYPE");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("erpcode");

                entity.Property(e => e.Typename)
                    .HasMaxLength(50)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<Outassit>(entity =>
            {
                entity.ToTable("OUTASSIT");

                entity.HasIndex(e => new { e.Coutasnid, e.Ccreateownercode, e.Cstatus, e.IsMerge }, "OUTASSIT_INDEX_COUTASNID");

                entity.HasIndex(e => e.Cticketcode, "OUTASSIT_INDEX_CTICKETCODE")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutasnid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("critical_part")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<OutassitD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("OUTASSIT_D_PK_IDS");

                entity.ToTable("OUTASSIT_D");

                entity.HasIndex(e => new { e.Cinvcode, e.Cstatus, e.Coutasnid, e.Ioutasnline, e.Coperatorcode }, "OUTASSIT_D_INDEX_CINVCODE");

                entity.HasIndex(e => e.Id, "OUTASSIT_D_INDEX_ID");

                entity.HasIndex(e => e.Cpositioncode, "OUTASSIT_D_PK_CPOSITIONCODE");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coperator)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coperator");

                entity.Property(e => e.Coperatorcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coperatorcode");

                entity.Property(e => e.Coutasnid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("inum");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");

                entity.Property(e => e.Sourcecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sourcecode");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.OutassitD)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("OUTASSIT_PK_ID1");
            });

            modelBuilder.Entity<OutassitDHis>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("OUTASSIT_D_HIS_PK_IDS");

                entity.ToTable("OUTASSIT_D_HIS");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coperator)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coperator");

                entity.Property(e => e.Coperatorcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coperatorcode");

                entity.Property(e => e.Coutasnid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("inum");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");
            });

            modelBuilder.Entity<OutassitHis>(entity =>
            {
                entity.ToTable("OUTASSIT_HIS");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutasnid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Deletetime)
                    .HasColumnType("datetime")
                    .HasColumnName("deletetime");

                entity.Property(e => e.Deleteuser)
                    .HasMaxLength(50)
                    .HasColumnName("deleteuser");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Outbill>(entity =>
            {
                entity.ToTable("OUTBILL");

                entity.HasIndex(e => new { e.Cerpcode, e.Cstatus, e.Ccreateownercode, e.Otype }, "OUTBILL_INDEX_CERPCODE");

                entity.HasIndex(e => e.Coutasnid, "OUTBILL_INDEX_COUTASNID");

                entity.HasIndex(e => e.Cticketcode, "OUTBILL_INDEX_CTICKETCODE")
                    .IsUnique();

                entity.HasIndex(e => e.Cstatus, "outbill_cstatus");

                entity.HasIndex(e => e.Dcreatetime, "outbill_dcreatetime");

                entity.HasIndex(e => e.Otype, "outbill_itype");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutasnid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Debitowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("debitowner");

                entity.Property(e => e.Debittime)
                    .HasColumnType("datetime")
                    .HasColumnName("debittime");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5")
                    .HasComment("是否整板出  0:部分出  1:整板出");

                entity.Property(e => e.IsTemporary)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Operationtype)
                    .HasColumnName("operationtype")
                    .HasComment("操作类型 0：正常流程 1：补单流程");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("otype");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Wo)
                    .HasMaxLength(100)
                    .HasColumnName("wo");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype")
                    .HasComment("作业方式 0：平库 1：立库");
            });

            modelBuilder.Entity<OutbillD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("OUTBILL_D_PK");

                entity.ToTable("OUTBILL_D");

                entity.HasIndex(e => e.Id, "IDOUTBILL_D_INDEX_ID");

                entity.HasIndex(e => new { e.Cinvcode, e.Cstatus, e.Cpositioncode, e.Cdefine1 }, "OUTBILL_D_INDEX_CINVCODE");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.AllocateDIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("allocate_d_ids");

                entity.Property(e => e.Allotype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("allotype");

                entity.Property(e => e.AsnDIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("asn_d_ids");

                entity.Property(e => e.AsrsNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_num");

                entity.Property(e => e.AsrsStatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Callocateid)
                    .HasMaxLength(50)
                    .HasColumnName("callocateid");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cnewpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cnewpositioncode");

                entity.Property(e => e.Coutpersoncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coutpersoncode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cstoppositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cstoppositioncode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Doutdate)
                    .HasColumnType("datetime")
                    .HasColumnName("doutdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Isgoback)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("isgoback");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.Lineid).HasColumnName("lineid");

                entity.Property(e => e.Outasndlineid).HasColumnName("outasndlineid");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pallet_code");

                entity.Property(e => e.PartBond)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("part_bond");

                entity.Property(e => e.Sourcecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sourcecode");

                entity.Property(e => e.Wire)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wire")
                    .HasComment("线别id");

                entity.Property(e => e.Wmstskid)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wmstskid");

                entity.Property(e => e.Wo)
                    .HasMaxLength(100)
                    .HasColumnName("wo");
            });

            modelBuilder.Entity<OutbillDBn>(entity =>
            {
                entity.ToTable("OUTBILL_D_BN");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.BnCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bn_code");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Furnaceno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("furnaceno");

                entity.Property(e => e.Lastvpdowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastvpdowner");

                entity.Property(e => e.Lastvpdtime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastvpdtime");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.OutbillDIds)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outbill_d_ids");

                entity.Property(e => e.OutbillDSnId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outbill_d_sn_id");

                entity.Property(e => e.OutbillId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outbill_id");

                entity.Property(e => e.Outbilltype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("outbilltype");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.ScanIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("scan_ids");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("worktype")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<OutbillDHis>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("OUTBILL_D_HIS_PK");

                entity.ToTable("OUTBILL_D_HIS");

                entity.HasIndex(e => e.Id, "IDOUTBILL_D_HIS_INDEX_ID");

                entity.HasIndex(e => e.Cinvcode, "OUTBILL_D_HIS_INDEX_CINVCODE");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutpersoncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coutpersoncode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Doutdate)
                    .HasColumnType("datetime")
                    .HasColumnName("doutdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.OutbillDHis)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("OUTBILL_HIS_FX_ID");
            });

            modelBuilder.Entity<OutbillDSn>(entity =>
            {
                entity.ToTable("OUTBILL_D_SN");

                entity.HasIndex(e => new { e.OutbillId, e.OutbillDIds, e.SnCode }, "idx_OUTBILL_D_SN_INFO");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Furnaceno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("furnaceno");

                entity.Property(e => e.Lastvpdowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastvpdowner");

                entity.Property(e => e.Lastvpdtime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastvpdtime");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.OutbillDIds)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outbill_d_ids");

                entity.Property(e => e.OutbillId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outbill_id");

                entity.Property(e => e.Outbilltype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("outbilltype");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode")
                    .HasComment("栈板号");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.Rulecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULECODE");

                entity.Property(e => e.ScanIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("scan_ids");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vendorcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("vendorcode");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("worktype")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<OutbillDTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTBILL_D_TEST");

                entity.Property(e => e.AllocateDIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("allocate_d_ids");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutpersoncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coutpersoncode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Doutdate)
                    .HasColumnType("datetime")
                    .HasColumnName("doutdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");
            });

            modelBuilder.Entity<OutbillHis>(entity =>
            {
                entity.ToTable("OUTBILL_HIS");

                entity.HasIndex(e => e.Cerpcode, "OUTBILL_HIS_INDEX_CERPCODE");

                entity.HasIndex(e => e.Coutasnid, "OUTBILL_HIS_INDEX_COUTASNID");

                entity.HasIndex(e => e.Cticketcode, "OUTBILL_HIS_INDEX_CTICKETCODE");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutasnid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Deletetime)
                    .HasColumnType("datetime")
                    .HasColumnName("deletetime");

                entity.Property(e => e.Deleteuser)
                    .HasMaxLength(50)
                    .HasColumnName("deleteuser");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("otype");
            });

            modelBuilder.Entity<OutbillTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTBILL_TEST");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutasnid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("otype");
            });

            modelBuilder.Entity<Outmixed>(entity =>
            {
                entity.ToTable("OUTMIXED");

                entity.HasIndex(e => e.Cinvbarcode, "IDX_OUTMIXED_CINVBARCODE");

                entity.HasIndex(e => e.Creatertime, "IDX_OUTMIXED_CREATERTIME");

                entity.HasIndex(e => e.Cstatus, "IDX_OUTMIXED_CSTATUS");

                entity.HasIndex(e => e.Erpcode, "IDX_OUTMIXED_ERPCODE");

                entity.HasIndex(e => e.Mixedcode, "IDX_OUTMIXED_MIXEDCODE")
                    .IsUnique();

                entity.HasIndex(e => e.Outcticketcode, "IDX_OUTMIXED_OUTCTICKETCODE");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Cdefiend1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND1");

                entity.Property(e => e.Cdefiend2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND2");

                entity.Property(e => e.Cdefiend3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND3");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CINVBARCODE");

                entity.Property(e => e.Creatertime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATERTIME");

                entity.Property(e => e.Createruser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATERUSER");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Endsite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENDSITE");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Mixedcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("MIXEDCODE");

                entity.Property(e => e.Mixedsite)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MIXEDSITE");

                entity.Property(e => e.Modifytime)
                    .HasColumnType("datetime")
                    .HasColumnName("MODIFYTIME");

                entity.Property(e => e.Modifyuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MODIFYUSER");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OTYPE");

                entity.Property(e => e.Outcticketcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("OUTCTICKETCODE");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Startsite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STARTSITE");
            });

            modelBuilder.Entity<OutmixedD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__OUTMIXED__C4971C3B8EAB2247");

                entity.ToTable("OUTMIXED_D");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.Agvsite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AGVSite");

                entity.Property(e => e.Cdefiend1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND1");

                entity.Property(e => e.Cdefiend2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND2");

                entity.Property(e => e.Cdefiend3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND3");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CINVBARCODE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Creatertime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATERTIME");

                entity.Property(e => e.Createruser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATERUSER");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Outcticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTCTICKETCODE");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QTY");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Updateruser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UPDATERUSER");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATETIME");
            });

            modelBuilder.Entity<Outorder>(entity =>
            {
                entity.ToTable("OUTORDER");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.AfterTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("税后总额");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("总价");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("创建人");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CustomId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("客户编号");

                entity.Property(e => e.CustomName)
                    .HasMaxLength(100)
                    .HasComment("客户名称");

                entity.Property(e => e.CustomOrderNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("客户订单编号");

                entity.Property(e => e.Define1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("预留字段1");

                entity.Property(e => e.Define2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("预留字段2");

                entity.Property(e => e.Define3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("预留字段3");

                entity.Property(e => e.Define4)
                    .HasColumnType("datetime")
                    .HasComment("预留字段4");

                entity.Property(e => e.Define5)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预留字段5");

                entity.Property(e => e.DeliveryAddress)
                    .HasMaxLength(200)
                    .HasComment("发货地址");

                entity.Property(e => e.LastUpdateOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("最后更新人");

                entity.Property(e => e.LastUpdateTime)
                    .HasColumnType("datetime")
                    .HasComment("最后更新时间");

                entity.Property(e => e.Memo)
                    .HasMaxLength(200)
                    .HasComment("备注");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasComment("订单日期");

                entity.Property(e => e.OrderNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("订单编号");

                entity.Property(e => e.OrderSource).HasComment("订单来源 0：接口  1：手动创建");

                entity.Property(e => e.OrderType).HasComment("订单类型");

                entity.Property(e => e.SalesMan)
                    .HasMaxLength(50)
                    .HasComment("业务员名称");

                entity.Property(e => e.Status).HasComment("订单状态");

                entity.Property(e => e.TaxRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("税率");
            });

            modelBuilder.Entity<OutorderD>(entity =>
            {
                entity.HasKey(e => e.Ids);

                entity.ToTable("OUTORDER_D");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CinvCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("料号");

                entity.Property(e => e.CinvName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasComment("料名称");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("创建人");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.Define1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("预留字段1");

                entity.Property(e => e.Define2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("预留字段2");

                entity.Property(e => e.Define3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("预留字段3");

                entity.Property(e => e.FinishQty).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("数量");

                entity.Property(e => e.LastUpdateOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("最后修改人");

                entity.Property(e => e.LastUpdateTime)
                    .HasColumnType("datetime")
                    .HasComment("最后修改时间");

                entity.Property(e => e.OrderLine).HasComment("项次");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SaleDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasComment("状态");
            });

            modelBuilder.Entity<Outtype>(entity =>
            {
                entity.HasKey(e => e.Typeid)
                    .HasName("OUTTYPE_ID");

                entity.ToTable("OUTTYPE");

                entity.Property(e => e.Typeid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typeid");

                entity.Property(e => e.Attribute1)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("attribute1");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.DisableDate)
                    .HasColumnType("datetime")
                    .HasColumnName("disable_date");

                entity.Property(e => e.Enable)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("enable")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Enabledate)
                    .HasColumnType("datetime")
                    .HasColumnName("enabledate");

                entity.Property(e => e.Enableuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("enableuser");

                entity.Property(e => e.ErpSourceTypecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("erp_source_typecode");

                entity.Property(e => e.ErpSourceTypename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("erp_source_typename");

                entity.Property(e => e.IsMatchSo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsMatchVendor)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsQuery)
                    .HasColumnName("Is_Query")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsZf)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("is_zf");

                entity.Property(e => e.TransactionActionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_action_id");

                entity.Property(e => e.TransactionSourceTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_source_type_id");

                entity.Property(e => e.TypeClass)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type_class");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<OuttypeBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTTYPE_BAK");

                entity.Property(e => e.Attribute1)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("attribute1");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.DisableDate)
                    .HasColumnType("datetime")
                    .HasColumnName("disable_date");

                entity.Property(e => e.IsZf)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("is_zf");

                entity.Property(e => e.TransactionActionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_action_id");

                entity.Property(e => e.TransactionSourceTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_source_type_id");

                entity.Property(e => e.TypeClass)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type_class");

                entity.Property(e => e.Typeid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typeid");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<Outtypebak1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OUTTYPEBAK");

                entity.Property(e => e.Attribute1)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("attribute1");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.TransactionActionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_action_id");

                entity.Property(e => e.TransactionSourceTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_source_type_id");

                entity.Property(e => e.TypeClass)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type_class");

                entity.Property(e => e.Typeid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typeid");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<PInAsnCtCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("P_InAsnCT_Code");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");
            });

            modelBuilder.Entity<PSiteid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("P_SITEID");

                entity.Property(e => e.Siteid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("siteid");
            });

            modelBuilder.Entity<PWarehouseid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("P_WAREHOUSEID");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("id");
            });

            modelBuilder.Entity<PdaLessCinvcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PDA_LESS_CINVCODE");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Deptname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("deptname");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Issuednum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("issuednum");

                entity.Property(e => e.Lesscinnum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("lesscinnum");

                entity.Property(e => e.Noissuednum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("noissuednum");

                entity.Property(e => e.Nowstocklessnum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("nowstocklessnum");

                entity.Property(e => e.Requirenum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("requirenum");

                entity.Property(e => e.Searchuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("searchuser");

                entity.Property(e => e.Stockcannum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("stockcannum");
            });

            modelBuilder.Entity<PdaLessErpcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PDA_LESS_ERPCODE");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Searchuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("searchuser");
            });

            modelBuilder.Entity<PdaVInAsnList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDA_V_InAsnList");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("INUM");

                entity.Property(e => e.Synum)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("SYNUM");

                entity.Property(e => e.Yjnum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("YJNUM");
            });

            modelBuilder.Entity<PdaVInAssitDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDA_V_InAssitDetails");

                entity.Property(e => e.Asncticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("asncticketcode");

                entity.Property(e => e.Caccountid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("caccountid");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("inum");

                entity.Property(e => e.OcriticalPart)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("OCRITICAL_PART");

                entity.Property(e => e.Synum)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("SYNUM");

                entity.Property(e => e.Yjnum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("YJNUM");
            });

            modelBuilder.Entity<PdaVInAssitScan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDA_V_InAssitScan");

                entity.Property(e => e.Acticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("acticketcode");

                entity.Property(e => e.Asncticketcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("asncticketcode");

                entity.Property(e => e.Bz).HasColumnName("bz");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Dounted)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("dounted");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("inum");

                entity.Property(e => e.Synum)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("synum");
            });

            modelBuilder.Entity<PdaVSnpdstockInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDA_V_SNPDStockInfo");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<PdaVStockQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDA_V_StockQuery");

                entity.Property(e => e.Calias)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CALIAS");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CWAREHOUSECODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IQTY");

                entity.Property(e => e.Sn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SN");
            });

            modelBuilder.Entity<PdaVStockReset>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDA_V_StockReset");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.SnQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("sn_qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.Sntype)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("sntype");

                entity.Property(e => e.Typecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("typecode");

                entity.Property(e => e.Userno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userno");

                entity.Property(e => e.Weeks)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("weeks");
            });

            modelBuilder.Entity<PlanTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLAN_TABLE");

                entity.Property(e => e.AccessPredicates)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("access_predicates");

                entity.Property(e => e.Bytes)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("bytes");

                entity.Property(e => e.Cardinality)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cardinality");

                entity.Property(e => e.Cost)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cost");

                entity.Property(e => e.CpuCost)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cpu_cost");

                entity.Property(e => e.Distribution)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("distribution");

                entity.Property(e => e.FilterPredicates)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("filter_predicates");

                entity.Property(e => e.Id)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("id");

                entity.Property(e => e.IoCost)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("io_cost");

                entity.Property(e => e.ObjectInstance)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("object_instance");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("object_name");

                entity.Property(e => e.ObjectNode)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("object_node");

                entity.Property(e => e.ObjectOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("object_owner");

                entity.Property(e => e.ObjectType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("object_type");

                entity.Property(e => e.Operation)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("operation");

                entity.Property(e => e.Optimizer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("optimizer");

                entity.Property(e => e.Options)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("options");

                entity.Property(e => e.Other)
                    .HasColumnType("ntext")
                    .HasColumnName("other");

                entity.Property(e => e.OtherTag)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("other_tag");

                entity.Property(e => e.ParentId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("parent_id");

                entity.Property(e => e.PartitionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("partition_id");

                entity.Property(e => e.PartitionStart)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("partition_start");

                entity.Property(e => e.PartitionStop)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("partition_stop");

                entity.Property(e => e.Position)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("position");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("remarks");

                entity.Property(e => e.SearchColumns)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("search_columns");

                entity.Property(e => e.StatementId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("statement_id");

                entity.Property(e => e.TempSpace)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("temp_space");

                entity.Property(e => e.Timestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("timestamp");
            });

            modelBuilder.Entity<PlcCmdMst>(entity =>
            {
                entity.ToTable("PLC_CMD_MST");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.D500)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D501)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D502)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D503)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D504)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D505)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D506)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D507)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D508)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D509)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D510)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D511)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D512)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D513)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.D514)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LineId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LineID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PoGetCache>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PO_GET_CACHE");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpo");

                entity.Property(e => e.Erpcodelinenum)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("erpcodelinenum");

                entity.Property(e => e.GetDate)
                    .HasColumnType("datetime")
                    .HasColumnName("get_date");

                entity.Property(e => e.Ipoline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipoline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.PoLinenumbername)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("po_linenumbername");

                entity.Property(e => e.PoNumbername)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("po_numbername");

                entity.Property(e => e.ReceiptNum)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("receipt_num");
            });

            modelBuilder.Entity<ProcFunReturnInfo>(entity =>
            {
                entity.HasKey(e => new { e.FunProcName, e.InfoCode })
                    .HasName("PK_PFRI_PFN");

                entity.ToTable("PROC_FUN_RETURN_INFO");

                entity.Property(e => e.FunProcName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fun_proc_name");

                entity.Property(e => e.InfoCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("info_code");

                entity.Property(e => e.InfoMsg)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("info_msg");

                entity.Property(e => e.InfoResult)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("info_result");

                entity.Property(e => e.Memo)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Sequence)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sequence");
            });

            modelBuilder.Entity<Proclogs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PROCLOGS");

                entity.Property(e => e.Datetimes)
                    .HasColumnType("datetime")
                    .HasColumnName("datetimes");

                entity.Property(e => e.Guid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.Msg)
                    .HasColumnType("ntext")
                    .HasColumnName("msg");
            });

            modelBuilder.Entity<R09Stock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("R09_STOCK");

                entity.Property(e => e.Cell)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CELL");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.StockId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("stock_id");
            });

            modelBuilder.Entity<R09StockCell>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("R09_STOCK_CELL");

                entity.Property(e => e.Cell)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CELL");

                entity.Property(e => e.DistPart).HasColumnName("DIST_PART");

                entity.Property(e => e.DistSn).HasColumnName("DIST_SN");

                entity.Property(e => e.Dt)
                    .HasColumnType("datetime")
                    .HasColumnName("DT");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Part)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART");

                entity.Property(e => e.Partname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("PARTNAME");

                entity.Property(e => e.Stamp)
                    .HasMaxLength(4000)
                    .HasColumnName("STAMP");

                entity.Property(e => e.SumQty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("SUM_QTY");
            });

            modelBuilder.Entity<R09Wh>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("R09_WH");

                entity.Property(e => e.Cell)
                    .HasMaxLength(100)
                    .HasColumnName("CELL");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cx");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cy");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lineid");
            });

            modelBuilder.Entity<R09WhL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("R09_WH_L");

                entity.Property(e => e.CntCell).HasColumnName("CNT_CELL");

                entity.Property(e => e.CntZ).HasColumnName("CNT_Z");

                entity.Property(e => e.L)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<R09WhStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("R09_WH_STOCK");

                entity.Property(e => e.Cell)
                    .HasMaxLength(100)
                    .HasColumnName("CELL");

                entity.Property(e => e.Dt)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasColumnName("DT");

                entity.Property(e => e.Hr)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasColumnName("HR");

                entity.Property(e => e.L)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.P)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("QTY");
            });

            modelBuilder.Entity<R09WhStockDtLXCnt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("R09_WH_STOCK_DT_L_X_CNT");

                entity.Property(e => e.Cnt).HasColumnName("CNT");

                entity.Property(e => e.Dt)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasColumnName("DT");

                entity.Property(e => e.L)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<R09WhStockIsUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("R09_WH_STOCK_IS_USED");

                entity.Property(e => e.Cell)
                    .HasMaxLength(100)
                    .HasColumnName("CELL");

                entity.Property(e => e.IsUsed)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IS_USED");

                entity.Property(e => e.L)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.P)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("QTY");
            });

            modelBuilder.Entity<R09WhY>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("R09_WH_Y");

                entity.Property(e => e.CntX).HasColumnName("CNT_X");

                entity.Property(e => e.L)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MaxX).HasColumnName("MAX_X");

                entity.Property(e => e.MinX).HasColumnName("MIN_X");
            });

            modelBuilder.Entity<R09WhZ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("R09_WH_Z");

                entity.Property(e => e.CntCell).HasColumnName("CNT_CELL");

                entity.Property(e => e.CntY).HasColumnName("CNT_Y");

                entity.Property(e => e.L)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RcvInterfaceCache>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RCV_INTERFACE_CACHE");

                entity.Property(e => e.AccrualStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("accrual_status_code");

                entity.Property(e => e.ActualCost)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("actual_cost");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("amount");

                entity.Property(e => e.AmountShipped)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("amount_shipped");

                entity.Property(e => e.AsnAttachId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asn_attach_id");

                entity.Property(e => e.Attribute1)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute1");

                entity.Property(e => e.Attribute10)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute10");

                entity.Property(e => e.Attribute11)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute11");

                entity.Property(e => e.Attribute12)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute12");

                entity.Property(e => e.Attribute13)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute13");

                entity.Property(e => e.Attribute14)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute14");

                entity.Property(e => e.Attribute15)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute15");

                entity.Property(e => e.Attribute2)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute2");

                entity.Property(e => e.Attribute3)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute3");

                entity.Property(e => e.Attribute4)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute4");

                entity.Property(e => e.Attribute5)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute5");

                entity.Property(e => e.Attribute6)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute6");

                entity.Property(e => e.Attribute7)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute7");

                entity.Property(e => e.Attribute8)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute8");

                entity.Property(e => e.Attribute9)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("attribute9");

                entity.Property(e => e.AttributeCategory)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("attribute_category");

                entity.Property(e => e.AutoTransactCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("auto_transact_code");

                entity.Property(e => e.BarcodeLabel)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("barcode_label");

                entity.Property(e => e.BillOfLading)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bill_of_lading");

                entity.Property(e => e.BomResourceId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("bom_resource_id");

                entity.Property(e => e.CategoryId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("category_id");

                entity.Property(e => e.ChargeAccountId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("charge_account_id");

                entity.Property(e => e.Comments)
                    .HasMaxLength(480)
                    .IsUnicode(false)
                    .HasColumnName("comments");

                entity.Property(e => e.ContainerNum)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("container_num");

                entity.Property(e => e.CostGroupId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cost_group_id");

                entity.Property(e => e.CountryOfOriginCode)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("country_of_origin_code");

                entity.Property(e => e.CreateDebitMemoFlag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("create_debit_memo_flag");

                entity.Property(e => e.CreatedBy)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("created_by");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("creation_date");

                entity.Property(e => e.CurrencyCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("currency_code");

                entity.Property(e => e.CurrencyConversionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("currency_conversion_date");

                entity.Property(e => e.CurrencyConversionRate)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("currency_conversion_rate");

                entity.Property(e => e.CurrencyConversionType)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("currency_conversion_type");

                entity.Property(e => e.CustomerAccountNumber)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("customer_account_number");

                entity.Property(e => e.CustomerId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("customer_id");

                entity.Property(e => e.CustomerItemId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("customer_item_id");

                entity.Property(e => e.CustomerItemNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("customer_item_num");

                entity.Property(e => e.CustomerPartyName)
                    .HasMaxLength(720)
                    .IsUnicode(false)
                    .HasColumnName("customer_party_name");

                entity.Property(e => e.CustomerSiteId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("customer_site_id");

                entity.Property(e => e.DeliverToLocationCode)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("deliver_to_location_code");

                entity.Property(e => e.DeliverToLocationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("deliver_to_location_id");

                entity.Property(e => e.DeliverToPersonId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("deliver_to_person_id");

                entity.Property(e => e.DeliverToPersonName)
                    .HasMaxLength(480)
                    .IsUnicode(false)
                    .HasColumnName("deliver_to_person_name");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("department_code");

                entity.Property(e => e.DestinationContext)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("destination_context");

                entity.Property(e => e.DestinationTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("destination_type_code");

                entity.Property(e => e.DocumentDistributionNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("document_distribution_num");

                entity.Property(e => e.DocumentLineNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("document_line_num");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("document_num");

                entity.Property(e => e.DocumentShipmentLineNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("document_shipment_line_num");

                entity.Property(e => e.EmployeeId)
                    .HasColumnType("decimal(9, 0)")
                    .HasColumnName("employee_id");

                entity.Property(e => e.ErecordId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("erecord_id");

                entity.Property(e => e.ExpectedReceiptDate)
                    .HasColumnType("datetime")
                    .HasColumnName("expected_receipt_date");

                entity.Property(e => e.ExpressTransaction)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("express_transaction");

                entity.Property(e => e.FreightCarrierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("freight_carrier_code");

                entity.Property(e => e.FromLocator)
                    .HasMaxLength(162)
                    .IsUnicode(false)
                    .HasColumnName("from_locator");

                entity.Property(e => e.FromLocatorId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("from_locator_id");

                entity.Property(e => e.FromOrganizationCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("from_organization_code");

                entity.Property(e => e.FromOrganizationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("from_organization_id");

                entity.Property(e => e.FromSubinventory)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("from_subinventory");

                entity.Property(e => e.GovernmentContext)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("government_context");

                entity.Property(e => e.GroupId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("group_id");

                entity.Property(e => e.HeaderInterfaceId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("header_interface_id");

                entity.Property(e => e.InspectionQualityCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inspection_quality_code");

                entity.Property(e => e.InspectionStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inspection_status_code");

                entity.Property(e => e.InterfaceAvailableAmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("interface_available_amt");

                entity.Property(e => e.InterfaceAvailableQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("interface_available_qty");

                entity.Property(e => e.InterfaceSourceCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("interface_source_code");

                entity.Property(e => e.InterfaceSourceLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("interface_source_line_id");

                entity.Property(e => e.InterfaceTransactionAmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("interface_transaction_amt");

                entity.Property(e => e.InterfaceTransactionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("interface_transaction_id");

                entity.Property(e => e.InterfaceTransactionQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("interface_transaction_qty");

                entity.Property(e => e.IntransitOwningOrgCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("intransit_owning_org_code");

                entity.Property(e => e.IntransitOwningOrgId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("intransit_owning_org_id");

                entity.Property(e => e.InvTransactionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("inv_transaction_id");

                entity.Property(e => e.ItemCategory)
                    .HasMaxLength(162)
                    .IsUnicode(false)
                    .HasColumnName("item_category");

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(480)
                    .IsUnicode(false)
                    .HasColumnName("item_description");

                entity.Property(e => e.ItemId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("item_id");

                entity.Property(e => e.ItemNum)
                    .HasMaxLength(162)
                    .IsUnicode(false)
                    .HasColumnName("item_num");

                entity.Property(e => e.ItemRevision)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("item_revision");

                entity.Property(e => e.JobId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("job_id");

                entity.Property(e => e.LastUpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("last_update_date");

                entity.Property(e => e.LastUpdateLogin)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("last_update_login");

                entity.Property(e => e.LastUpdatedBy)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("last_updated_by");

                entity.Property(e => e.LcmAdjustmentNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("lcm_adjustment_num");

                entity.Property(e => e.LcmShipmentLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("lcm_shipment_line_id");

                entity.Property(e => e.LicensePlateNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("license_plate_number");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("location_code");

                entity.Property(e => e.LocationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("location_id");

                entity.Property(e => e.Locator)
                    .HasMaxLength(162)
                    .IsUnicode(false)
                    .HasColumnName("locator");

                entity.Property(e => e.LocatorId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("locator_id");

                entity.Property(e => e.LpnGroupId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("lpn_group_id");

                entity.Property(e => e.LpnId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("lpn_id");

                entity.Property(e => e.MatchingBasis)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("matching_basis");

                entity.Property(e => e.MaterialStoredAmount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("material_stored_amount");

                entity.Property(e => e.MmttTempId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("mmtt_temp_id");

                entity.Property(e => e.MobileTxn)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("mobile_txn");

                entity.Property(e => e.MovementId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("movement_id");

                entity.Property(e => e.NoticeUnitPrice)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("notice_unit_price");

                entity.Property(e => e.NumOfContainers)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("num_of_containers");

                entity.Property(e => e.OeOrderHeaderId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("oe_order_header_id");

                entity.Property(e => e.OeOrderLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("oe_order_line_id");

                entity.Property(e => e.OeOrderLineNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("oe_order_line_num");

                entity.Property(e => e.OeOrderNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("oe_order_num");

                entity.Property(e => e.OperatingUnit)
                    .HasMaxLength(480)
                    .IsUnicode(false)
                    .HasColumnName("operating_unit");

                entity.Property(e => e.OrderTransactionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("order_transaction_id");

                entity.Property(e => e.OrgId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("org_id");

                entity.Property(e => e.PackingSlip)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_slip");

                entity.Property(e => e.ParentInterfaceTxnId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("parent_interface_txn_id");

                entity.Property(e => e.ParentSourceTransactionNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("parent_source_transaction_num");

                entity.Property(e => e.ParentTransactionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("parent_transaction_id");

                entity.Property(e => e.PoDistributionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("po_distribution_id");

                entity.Property(e => e.PoHeaderId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("po_header_id");

                entity.Property(e => e.PoLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("po_line_id");

                entity.Property(e => e.PoLineLocationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("po_line_location_id");

                entity.Property(e => e.PoReleaseId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("po_release_id");

                entity.Property(e => e.PoRevisionNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("po_revision_num");

                entity.Property(e => e.PoUnitPrice)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("po_unit_price");

                entity.Property(e => e.PrimaryQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("primary_quantity");

                entity.Property(e => e.PrimaryUnitOfMeasure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("primary_unit_of_measure");

                entity.Property(e => e.ProcessingModeCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("processing_mode_code");

                entity.Property(e => e.ProcessingRequestId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("processing_request_id");

                entity.Property(e => e.ProcessingStatusCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("processing_status_code");

                entity.Property(e => e.ProgramApplicationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("program_application_id");

                entity.Property(e => e.ProgramId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("program_id");

                entity.Property(e => e.ProgramUpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("program_update_date");

                entity.Property(e => e.ProjectId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("project_id");

                entity.Property(e => e.PutAwayRuleId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("put_away_rule_id");

                entity.Property(e => e.PutAwayStrategyId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("put_away_strategy_id");

                entity.Property(e => e.QaCollectionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("qa_collection_id");

                entity.Property(e => e.QcGrade)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("qc_grade");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.QuantityInvoiced)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity_invoiced");

                entity.Property(e => e.QuantityShipped)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity_shipped");

                entity.Property(e => e.ReasonId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("reason_id");

                entity.Property(e => e.ReasonName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("reason_name");

                entity.Property(e => e.ReceiptExceptionFlag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("receipt_exception_flag");

                entity.Property(e => e.ReceiptSourceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("receipt_source_code");

                entity.Property(e => e.ReleaseNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("release_num");

                entity.Property(e => e.ReplenishOrderLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("replenish_order_line_id");

                entity.Property(e => e.ReqDistributionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("req_distribution_id");

                entity.Property(e => e.ReqDistributionNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("req_distribution_num");

                entity.Property(e => e.ReqLineNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("req_line_num");

                entity.Property(e => e.ReqNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("req_num");

                entity.Property(e => e.RequestId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("request_id");

                entity.Property(e => e.RequestedAmount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("requested_amount");

                entity.Property(e => e.RequisitionLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("requisition_line_id");

                entity.Property(e => e.ResourceCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("resource_code");

                entity.Property(e => e.RmaReference)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("rma_reference");

                entity.Property(e => e.RoutingCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("routing_code");

                entity.Property(e => e.RoutingHeaderId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("routing_header_id");

                entity.Property(e => e.RoutingStep)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("routing_step");

                entity.Property(e => e.RoutingStepId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("routing_step_id");

                entity.Property(e => e.SecondaryQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("secondary_quantity");

                entity.Property(e => e.SecondaryUnitOfMeasure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("secondary_unit_of_measure");

                entity.Property(e => e.SecondaryUomCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("secondary_uom_code");

                entity.Property(e => e.ShipHeadAttribute1)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute1");

                entity.Property(e => e.ShipHeadAttribute10)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute10");

                entity.Property(e => e.ShipHeadAttribute11)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute11");

                entity.Property(e => e.ShipHeadAttribute12)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute12");

                entity.Property(e => e.ShipHeadAttribute13)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute13");

                entity.Property(e => e.ShipHeadAttribute14)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute14");

                entity.Property(e => e.ShipHeadAttribute15)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute15");

                entity.Property(e => e.ShipHeadAttribute2)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute2");

                entity.Property(e => e.ShipHeadAttribute3)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute3");

                entity.Property(e => e.ShipHeadAttribute4)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute4");

                entity.Property(e => e.ShipHeadAttribute5)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute5");

                entity.Property(e => e.ShipHeadAttribute6)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute6");

                entity.Property(e => e.ShipHeadAttribute7)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute7");

                entity.Property(e => e.ShipHeadAttribute8)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute8");

                entity.Property(e => e.ShipHeadAttribute9)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute9");

                entity.Property(e => e.ShipHeadAttributeCategory)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ship_head_attribute_category");

                entity.Property(e => e.ShipLineAttribute1)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute1");

                entity.Property(e => e.ShipLineAttribute10)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute10");

                entity.Property(e => e.ShipLineAttribute11)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute11");

                entity.Property(e => e.ShipLineAttribute12)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute12");

                entity.Property(e => e.ShipLineAttribute13)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute13");

                entity.Property(e => e.ShipLineAttribute14)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute14");

                entity.Property(e => e.ShipLineAttribute15)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute15");

                entity.Property(e => e.ShipLineAttribute2)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute2");

                entity.Property(e => e.ShipLineAttribute3)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute3");

                entity.Property(e => e.ShipLineAttribute4)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute4");

                entity.Property(e => e.ShipLineAttribute5)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute5");

                entity.Property(e => e.ShipLineAttribute6)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute6");

                entity.Property(e => e.ShipLineAttribute7)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute7");

                entity.Property(e => e.ShipLineAttribute8)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute8");

                entity.Property(e => e.ShipLineAttribute9)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute9");

                entity.Property(e => e.ShipLineAttributeCategory)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ship_line_attribute_category");

                entity.Property(e => e.ShipToLocationCode)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("ship_to_location_code");

                entity.Property(e => e.ShipToLocationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ship_to_location_id");

                entity.Property(e => e.ShipmentHeaderId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("shipment_header_id");

                entity.Property(e => e.ShipmentLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("shipment_line_id");

                entity.Property(e => e.ShipmentLineStatusCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("shipment_line_status_code");

                entity.Property(e => e.ShipmentNum)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("shipment_num");

                entity.Property(e => e.ShippedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("shipped_date");

                entity.Property(e => e.SourceDocQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("source_doc_quantity");

                entity.Property(e => e.SourceDocUnitOfMeasure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("source_doc_unit_of_measure");

                entity.Property(e => e.SourceDocumentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("source_document_code");

                entity.Property(e => e.SourceTransactionNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("source_transaction_num");

                entity.Property(e => e.Subinventory)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("subinventory");

                entity.Property(e => e.SubstituteItemId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("substitute_item_id");

                entity.Property(e => e.SubstituteItemNum)
                    .HasMaxLength(162)
                    .IsUnicode(false)
                    .HasColumnName("substitute_item_num");

                entity.Property(e => e.SubstituteUnorderedCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("substitute_unordered_code");

                entity.Property(e => e.TaskId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("task_id");

                entity.Property(e => e.TaxAmount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("tax_amount");

                entity.Property(e => e.TaxName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tax_name");

                entity.Property(e => e.TimecardId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("timecard_id");

                entity.Property(e => e.TimecardOvn)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("timecard_ovn");

                entity.Property(e => e.ToOrganizationCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("to_organization_code");

                entity.Property(e => e.ToOrganizationId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("to_organization_id");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transaction_date");

                entity.Property(e => e.TransactionStatusCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_status_code");

                entity.Property(e => e.TransactionType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_type");

                entity.Property(e => e.TransferCost)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_cost");

                entity.Property(e => e.TransferCostGroupId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_cost_group_id");

                entity.Property(e => e.TransferLicensePlateNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("transfer_license_plate_number");

                entity.Property(e => e.TransferLpnId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_lpn_id");

                entity.Property(e => e.TransferPercentage)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transfer_percentage");

                entity.Property(e => e.TransportationAccountId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transportation_account_id");

                entity.Property(e => e.TransportationCost)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transportation_cost");

                entity.Property(e => e.TruckNum)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("truck_num");

                entity.Property(e => e.UnitLandedCost)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("unit_landed_cost");

                entity.Property(e => e.UnitOfMeasure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unit_of_measure");

                entity.Property(e => e.UomCode)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("uom_code");

                entity.Property(e => e.UseMtlLot)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("use_mtl_lot");

                entity.Property(e => e.UseMtlSerial)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("use_mtl_serial");

                entity.Property(e => e.UssglTransactionCode)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("ussgl_transaction_code");

                entity.Property(e => e.ValidationFlag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("validation_flag");

                entity.Property(e => e.VendorCumShippedQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("vendor_cum_shipped_qty");

                entity.Property(e => e.VendorId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("vendor_id");

                entity.Property(e => e.VendorItemNum)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("vendor_item_num");

                entity.Property(e => e.VendorLotNum)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("vendor_lot_num");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(480)
                    .IsUnicode(false)
                    .HasColumnName("vendor_name");

                entity.Property(e => e.VendorNum)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("vendor_num");

                entity.Property(e => e.VendorSiteCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("vendor_site_code");

                entity.Property(e => e.VendorSiteId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("vendor_site_id");

                entity.Property(e => e.WaybillAirbillNum)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("waybill_airbill_num");

                entity.Property(e => e.WipEntityId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wip_entity_id");

                entity.Property(e => e.WipEntityName)
                    .HasMaxLength(48)
                    .IsUnicode(false)
                    .HasColumnName("wip_entity_name");

                entity.Property(e => e.WipLineCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("wip_line_code");

                entity.Property(e => e.WipLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wip_line_id");

                entity.Property(e => e.WipOperationSeqNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wip_operation_seq_num");

                entity.Property(e => e.WipRepetitiveScheduleId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wip_repetitive_schedule_id");

                entity.Property(e => e.WipResourceSeqNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wip_resource_seq_num");
            });

            modelBuilder.Entity<ReportPartMoreSpace>(entity =>
            {
                entity.ToTable("REPORT_PART_MORE_SPACE");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cpositionname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cpositionname");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.Remainspace)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("remainspace");

                entity.Property(e => e.Warehouse)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("warehouse");
            });

            modelBuilder.Entity<Returntovendorpartlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RETURNTOVENDORPARTLIST");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Erpcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("erpcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Isgood)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("isgood")
                    .HasDefaultValueSql("('N')");
            });

            modelBuilder.Entity<RgvCurrentStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RGV_CURRENT_STATUS");

                entity.Property(e => e.AreaId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Height)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.LineId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.SiteId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptStockDiscrepency>(entity =>
            {
                entity.ToTable("RPT_STOCK_DISCREPENCY");

                entity.HasIndex(e => e.Cpartnumber, "RPT_S_D_INDEX_CPARTNUMBER");

                entity.HasIndex(e => e.Positionid, "RPT_S_D_INDEX_POSITIONID");

                entity.HasIndex(e => e.Warehouseid, "RPT_S_D_INDEX_WAREHOUSEID");

                entity.Property(e => e.Id)
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cpartname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpartname");

                entity.Property(e => e.Cpartnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpartnumber");

                entity.Property(e => e.CreateOwner)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("create_owner")
                    .HasDefaultValueSql("('wms')");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DiscrepencyQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("discrepency_qty");

                entity.Property(e => e.EbsStockQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ebs_stock_qty");

                entity.Property(e => e.Positionid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("positionid");

                entity.Property(e => e.Positionname)
                    .HasMaxLength(100)
                    .HasColumnName("positionname");

                entity.Property(e => e.Warehouseid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");

                entity.Property(e => e.WmsStockQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("wms_stock_qty");
            });

            modelBuilder.Entity<RptStockDiscrepencyTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RPT_STOCK_DISCREPENCY_TEST");

                entity.Property(e => e.Cpartname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpartname");

                entity.Property(e => e.Cpartnumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpartnumber");

                entity.Property(e => e.CreateOwner)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.DiscrepencyQty)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("discrepency_qty");

                entity.Property(e => e.EbsStockQty)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ebs_stock_qty");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Positionid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("positionid");

                entity.Property(e => e.Positionname)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("positionname");

                entity.Property(e => e.Warehouseid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");

                entity.Property(e => e.WmsStockQty)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("wms_stock_qty");
            });

            modelBuilder.Entity<SalesOrderD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__SalesOrd__C4971C3BCFEEC46B");

                entity.ToTable("SalesOrder_D");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.CreateOwer)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdTime).HasColumnType("datetime");

                entity.Property(e => e.PartNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("numeric(15, 5)");

                entity.Property(e => e.RequestShipDate).HasColumnType("date");

                entity.Property(e => e.ShipQty).HasColumnType("numeric(10, 3)");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.SalesOrderD)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("SalesOrder_D_FK");
            });

            modelBuilder.Entity<SalesOrderM>(entity =>
            {
                entity.ToTable("SalesOrder_M");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.CreateOwer)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CustomerId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastCancelOwner)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastCancelTime).HasColumnType("datetime");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdTime).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasColumnType("text");

                entity.Property(e => e.RequestShipDate).HasColumnType("date");

                entity.Property(e => e.SalesOrderNo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SnItemHeadConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SN_ITEM_HEAD_CONFIG");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(30)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("date")
                    .HasColumnName("create_time")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .IsFixedLength(true);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.IsControl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("is_control")
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.ItemHead)
                    .HasMaxLength(30)
                    .HasColumnName("item_head");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(30)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("date")
                    .HasColumnName("last_upd_time")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<SnResetOperateInfo>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1")
                    .HasComment("自定義1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2")
                    .HasComment("自定義2");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode")
                    .HasComment("料號");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode")
                    .HasComment("儲位");

                entity.Property(e => e.Cstatus)
                    .HasColumnName("cstatus")
                    .HasComment("凍結狀態 0凍結 1解凍");

                entity.Property(e => e.Inasncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inasncode")
                    .HasComment("入庫通知單號");

                entity.Property(e => e.IsDiff)
                    .HasColumnName("is_diff")
                    .HasComment("是否存在差異");

                entity.Property(e => e.Locktime)
                    .HasColumnType("datetime")
                    .HasColumnName("locktime")
                    .HasComment("凍結時間");

                entity.Property(e => e.Lockuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lockuser")
                    .HasComment("凍結人");

                entity.Property(e => e.Unlocktime)
                    .HasColumnType("datetime")
                    .HasColumnName("unlocktime")
                    .HasComment("解凍時間");

                entity.Property(e => e.Unlockuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unlockuser")
                    .HasComment("解凍人");
            });

            modelBuilder.Entity<SsxSiteMonitor>(entity =>
            {
                entity.ToTable("SSX_Site_Monitor");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lineid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.Monitortime)
                    .HasColumnType("datetime")
                    .HasColumnName("monitortime");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Plc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("plc");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("remark");

                entity.Property(e => e.Siteid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("siteid");
            });

            modelBuilder.Entity<StockAdjust>(entity =>
            {
                entity.ToTable("STOCK_ADJUST");

                entity.HasComment("库存调整单");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.Atype)
                    .HasColumnName("ATYPE")
                    .HasComment("调整类型( 0：调整入，1：调整出)");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("CAUDITPERSON")
                    .HasComment("审核人");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(50)
                    .HasColumnName("CCREATEOWNERCODE")
                    .HasComment("制单人");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .HasColumnName("CDEFINE1")
                    .HasComment("自定义1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .HasColumnName("CDEFINE2")
                    .HasComment("自定义2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .HasColumnName("CERPCODE")
                    .HasComment("ERP单号(生单过后返回)");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("CMEMO")
                    .HasComment("备注");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("CSTATUS")
                    .HasComment("状态（0 未处理,1 已完成,）");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("CTICKETCODE")
                    .HasComment("单据号");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("DAUDITTIME")
                    .HasComment("审核日期");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("DCREATETIME")
                    .HasComment("制单日期");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("DDEFINE3")
                    .HasComment("自定义3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("DDEFINE4")
                    .HasComment("自定义4");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("DINDATE")
                    .HasComment("调整日期");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IDEFINE5")
                    .HasComment("自定义5");
            });

            modelBuilder.Entity<StockAlloScanD>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STOCK_ALLO_SCAN_D");

                entity.Property(e => e.AlloId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("allo_id");

                entity.Property(e => e.AlloIds)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("allo_ids");

                entity.Property(e => e.Cdatecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cdatecode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinpersoncode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cinpersoncode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Csn)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("csn");

                entity.Property(e => e.Ctoposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ctoposition");

                entity.Property(e => e.Ctopositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ctopositioncode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("date")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("date")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dindate)
                    .HasColumnType("date")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Rulecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULECODE");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StockCheckPlan>(entity =>
            {
                entity.ToTable("STOCK_CHECK_PLAN");

                entity.HasIndex(e => new { e.Planid, e.PlanName, e.Cstatus, e.Flag, e.PlanDescribe }, "SC_PLAN_INDEX");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Flag)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("flag")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FreezeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("freeze_date");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_time");

                entity.Property(e => e.PlanDescribe)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("plan_describe");

                entity.Property(e => e.PlanName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("plan_name");

                entity.Property(e => e.Planid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("planid");
            });

            modelBuilder.Entity<StockCheckbill>(entity =>
            {
                entity.ToTable("STOCK_CHECKBILL");

                entity.HasIndex(e => e.Cticketcode, "UQ_STOCK_CHECKBILL")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .HasColumnName("id");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(20)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccheckname)
                    .HasMaxLength(30)
                    .HasColumnName("ccheckname");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(20)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Checktype)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("checktype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))")
                    .HasComment("状态（0:未处理,1.審核中，2.盤點中(初盤)，3.已完成(初盤)，4.盤點中（複盤），5.已完成（複盤）) 6.盘点中");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcheckdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcheckdate");

                entity.Property(e => e.Dcirclecheckbegindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcirclecheckbegindate");

                entity.Property(e => e.Dcirclecheckenddate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcirclecheckenddate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasMaxLength(50)
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.IsLxcheck)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("isLXCheck")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Isadjust)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("isadjust")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.MaxPartIum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("max_part_ium");

                entity.Property(e => e.Planname)
                    .HasMaxLength(100)
                    .HasColumnName("planname")
                    .HasComment("盘点计划名称");

                entity.Property(e => e.Statusf)
                    .HasMaxLength(20)
                    .HasColumnName("statusf")
                    .HasComment("复盘标记 1:初盘中 2:初盘完成 3:复盘中 4:复盘完成");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<StockCheckbillD>(entity =>
            {
                entity.HasKey(e => e.Ids);

                entity.ToTable("STOCK_CHECKBILL_D");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .HasColumnName("ids");

                entity.Property(e => e.AsrsStatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("date")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("date")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Wmstskid)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wmstskid");
            });

            modelBuilder.Entity<StockCheckbillPosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STOCK_CHECKBILL_POSITION");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cwareid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<StockCheckedbill>(entity =>
            {
                entity.ToTable("STOCK_CHECKEDBILL");

                entity.HasIndex(e => e.Cinvbarcode, "STOCK_CHECKEDBILL_INDEX");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ccheckpersoncode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("ccheckpersoncode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.CheckbillDIds)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("checkbill_d_ids");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dcheckdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcheckdate");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");
            });

            modelBuilder.Entity<StockCheckedbillHis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STOCK_CHECKEDBILL_HIS");

                entity.Property(e => e.Ccheckpersoncode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("ccheckpersoncode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.CheckIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("check_ids");

                entity.Property(e => e.CheckbillDIds)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("checkbill_d_ids");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Dcheckdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcheckdate");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");
            });

            modelBuilder.Entity<StockCheckedbillSn>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK_CHECKEDBILL_SN");

                entity.ToTable("STOCK_CHECKEDBILL_SN");

                entity.HasIndex(e => new { e.Sncode, e.Checktype }, "INDEC_CHECKEDBILL_SN_SNCODE");

                entity.HasIndex(e => e.StockCheckedbillId, "INDEX_CHECKEDBILL_SN_IDS");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Checktype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("checktype");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser");

                entity.Property(e => e.Planid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("planid");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.StockCheckbillDIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("stock_checkbill_d_ids");

                entity.Property(e => e.StockCheckedbillId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("stock_checkedbill_id");
            });

            modelBuilder.Entity<StockCurrent>(entity =>
            {
                entity.ToTable("STOCK_CURRENT");

                entity.HasIndex(e => new { e.Cpositioncode, e.Cinvcode }, "INDX_CP_CIN")
                    .IsUnique();

                entity.HasIndex(e => e.Cinvcode, "stock_current_cinvcode");

                entity.HasIndex(e => e.Cpositioncode, "stock_current_cpositioncode");

                entity.HasIndex(e => e.Cwarehousecode, "stock_current_cwarehousecode");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cbarcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbarcode");

                entity.Property(e => e.Cdatecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdatecode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Iplanin)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iplanin");

                entity.Property(e => e.Iplanout)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iplanout");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");
            });

            modelBuilder.Entity<StockCurrentAdjust>(entity =>
            {
                entity.ToTable("STOCK_CURRENT_ADJUST");

                entity.HasIndex(e => e.Cticketcode, "UQ_STOCK_CURRENT_ADJUST")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Createowner)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reason");

                entity.Property(e => e.Reviewtime)
                    .HasColumnType("datetime")
                    .HasColumnName("reviewtime");

                entity.Property(e => e.Reviewuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("reviewuser");
            });

            modelBuilder.Entity<StockCurrentAdjustD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__STOCK_CU__DC501A7D01EE4A54");

                entity.ToTable("STOCK_CURRENT_ADJUST_D");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cpositionname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cpositionname");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser");

                entity.Property(e => e.Newqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("newqty");

                entity.Property(e => e.Oriqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("oriqty");

                entity.Property(e => e.Sncode)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.StockCurrentAdjustD)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("STOCK_CURRENT_ADJUST_D_FK");
            });

            modelBuilder.Entity<StockCurrentBegin>(entity =>
            {
                entity.ToTable("STOCK_CURRENT_BEGIN");

                entity.HasIndex(e => new { e.Begindate, e.Cinvcode, e.Cpositioncode, e.Createtime }, "idx_STOCK_CURRENT_BEGIN");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.Begindate)
                    .HasMaxLength(50)
                    .HasColumnName("BEGINDATE");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(100)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.Remark).HasMaxLength(500);
            });

            modelBuilder.Entity<StockCurrentBn>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("STOCK_CURRENT_BN_PK_IDS");

                entity.ToTable("STOCK_CURRENT_BN");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Bncode)
                    .HasMaxLength(58)
                    .IsUnicode(false)
                    .HasColumnName("BNCODE");

                entity.Property(e => e.Cdefined1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefined1");

                entity.Property(e => e.Cdefined2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefined2");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser");

                entity.Property(e => e.Memo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Snids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("SNIDS");
            });

            modelBuilder.Entity<StockCurrentDetail>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("STOCK_CURRENT_DETAIL_PK");

                entity.ToTable("STOCK_CURRENT_DETAIL");

                entity.HasIndex(e => new { e.Id, e.Datecode }, "STOCK_C_DETANT_INDEX_BASE");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<StockCurrentDetailFun>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Stock_Current_Detail_Fun");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .HasColumnName("createuser");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Weeks)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("weeks");
            });

            modelBuilder.Entity<StockCurrentOld>(entity =>
            {
                entity.ToTable("STOCK_CURRENT_OLD");

                entity.HasIndex(e => new { e.Cpositioncode, e.Cinvcode }, "PK_SCO_CPOSITION_CINVCODE")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cbarcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cbarcode");

                entity.Property(e => e.Cdatecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdatecode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Iplanin)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iplanin");

                entity.Property(e => e.Iplanout)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iplanout");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.IqtyOut)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty_out")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StockCurrentPalletCode>(entity =>
            {
                entity.ToTable("Stock_CURRENT_PalletCode");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.AgvsiteCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AGVSiteCode");

                entity.Property(e => e.AgvsiteName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AGVSiteName");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.CinvName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DCreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dCreateDate");

                entity.Property(e => e.DCreateOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dCreateOwner");

                entity.Property(e => e.IQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iQuantity");

                entity.Property(e => e.IType).HasColumnName("iType");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StockCurrentSn>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("STOCK_SN_PK_IDS");

                entity.ToTable("STOCK_CURRENT_SN");

                entity.HasIndex(e => e.StockId, "STOCK_SN_ID");

                entity.HasIndex(e => e.Sncode, "STOCK_SN_SNCODE");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Default2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("default2");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Furnaceno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("furnaceno");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser");

                entity.Property(e => e.Memo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Rulecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULECODE");

                entity.Property(e => e.SnCode20)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE20");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StockId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("stock_id");

                entity.Property(e => e.Stocktype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("stocktype");

                entity.Property(e => e.Vendorcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VENDORCODE");
            });

            modelBuilder.Entity<StockCurrentSnFun>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("stock_current_sn_Fun");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .HasColumnName("createuser");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Default2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("default2");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Furnaceno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("furnaceno");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.InBillTypeName)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("inBillTypeName");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(100)
                    .HasColumnName("lastupdateuser");

                entity.Property(e => e.Memo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.SnCode20)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE20");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype");

                entity.Property(e => e.StockId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("stock_id");

                entity.Property(e => e.Stocktype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("stocktype");

                entity.Property(e => e.Vendorcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VENDORCODE");

                entity.Property(e => e.Weeks)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("weeks");
            });

            modelBuilder.Entity<StockCurrentSnReset>(entity =>
            {
                entity.ToTable("STOCK_CURRENT_SN_RESET");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasComment("主键");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode")
                    .HasComment("料号");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(1000)
                    .HasColumnName("cmemo")
                    .HasComment("备注");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode")
                    .HasComment("储位");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime")
                    .HasComment("创建时间");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser")
                    .HasComment("创建人");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasComment("状态");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode")
                    .HasComment("日期");

                entity.Property(e => e.Flag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("flag")
                    .HasComment("标签");

                entity.Property(e => e.Groupid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("groupid")
                    .HasComment("分组id");

                entity.Property(e => e.Grouptime)
                    .HasColumnType("datetime")
                    .HasColumnName("grouptime")
                    .HasComment("分组时间");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty")
                    .HasComment("数量");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode")
                    .HasComment("sn编号");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasComment("sn类型");

                entity.Property(e => e.StockId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("stock_id")
                    .HasComment("库存表id");
            });

            modelBuilder.Entity<StockDeductDetail>(entity =>
            {
                entity.ToTable("STOCK_DEDUCT_DETAIL");

                entity.HasIndex(e => e.Tickids, "TICKIDS_INDEX");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.BeginQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("begin_qty");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTimes)
                    .HasColumnType("datetime")
                    .HasColumnName("create_times");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Ctopositioncode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ctopositioncode");

                entity.Property(e => e.Ctowarehousecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ctowarehousecode");

                entity.Property(e => e.Cwarehousecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.FinalQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("final_qty");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("proc_name");

                entity.Property(e => e.Tickids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("tickids");

                entity.Property(e => e.TransQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("trans_qty");

                entity.Property(e => e.Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<StockDeductSnDetail>(entity =>
            {
                entity.ToTable("STOCK_DEDUCT_SN_DETAIL");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.BeginQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("begin_qty");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTimes)
                    .HasColumnType("datetime")
                    .HasColumnName("create_times");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Ctopositioncode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ctopositioncode");

                entity.Property(e => e.DeductPosition)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("deduct_position");

                entity.Property(e => e.FinalQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("final_qty");

                entity.Property(e => e.Memo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.ProcName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proc_name");

                entity.Property(e => e.SnId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("sn_id");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.TransQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("trans_qty");

                entity.Property(e => e.Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<StockDuration>(entity =>
            {
                entity.ToTable("STOCK_DURATION");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Beginqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("beginqty");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Datecode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("datecode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Durationbegin)
                    .HasColumnType("datetime")
                    .HasColumnName("durationbegin");

                entity.Property(e => e.Durationend)
                    .HasColumnType("datetime")
                    .HasColumnName("durationend");

                entity.Property(e => e.Endqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("endqty");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Inqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("inqty");

                entity.Property(e => e.Outqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("outqty");
            });

            modelBuilder.Entity<StockOccupancyRelease>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STOCK_OCCUPANCY_RELEASE");

                entity.HasIndex(e => new { e.ItemId, e.Billid }, "INDX_IB");

                entity.HasIndex(e => new { e.ItemId, e.Storage, e.Billid }, "INDX_IBS");

                entity.Property(e => e.AsnId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("asn_id");

                entity.Property(e => e.Billid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("billid");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("flag")
                    .IsFixedLength(true);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("item_id");

                entity.Property(e => e.Opttime)
                    .HasColumnType("datetime")
                    .HasColumnName("opttime");

                entity.Property(e => e.Storage)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("storage");

                entity.Property(e => e.Totalnum)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("totalnum");

                entity.Property(e => e.Type)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("type");
            });

            modelBuilder.Entity<StockRecheckSn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STOCK_RECHECK_SN");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(50)
                    .HasColumnName("CCREATEOWNERCODE")
                    .HasComment("创建人");

                entity.Property(e => e.Cdefind1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIND1")
                    .HasComment("自定义1");

                entity.Property(e => e.Cdefind2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIND2")
                    .HasComment("自定义2");

                entity.Property(e => e.Cdefind3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIND3")
                    .HasComment("自定义3");

                entity.Property(e => e.Cdefind4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIND4")
                    .HasComment("自定义4");

                entity.Property(e => e.Checkdays1)
                    .HasColumnName("CHECKDAYS1")
                    .HasComment("重验1天数");

                entity.Property(e => e.Checkdays1date)
                    .HasColumnType("date")
                    .HasColumnName("CHECKDAYS1DATE")
                    .HasComment("重验1的日期");

                entity.Property(e => e.Checkdays1result)
                    .HasColumnName("CHECKDAYS1RESULT")
                    .HasDefaultValueSql("((0))")
                    .HasComment("重验1结果");

                entity.Property(e => e.Checkdays1user)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKDAYS1USER")
                    .HasComment("重验1的人员");

                entity.Property(e => e.Checknum)
                    .HasColumnName("CHECKNUM")
                    .HasComment("重验次数");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE")
                    .HasComment("物料编码");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .HasColumnName("CINVNAME")
                    .HasComment("物料名称");

                entity.Property(e => e.Clastupdatedownercode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLASTUPDATEDOWNERCODE")
                    .HasComment("最后修改人");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .HasColumnName("CMEMO")
                    .HasComment("备注");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CPOSITIONCODE")
                    .HasComment("储位编码");

                entity.Property(e => e.Cpositionname)
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONNAME")
                    .HasComment("储位名称");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("date")
                    .HasColumnName("DCREATETIME")
                    .HasComment("创建日期");

                entity.Property(e => e.Dlastupdatedtime)
                    .HasColumnType("date")
                    .HasColumnName("DLASTUPDATEDTIME")
                    .HasComment("最后修改日期");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QTY")
                    .HasComment("数量");

                entity.Property(e => e.Sn)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN")
                    .HasComment("SN");
            });

            modelBuilder.Entity<StockSnErpunlock>(entity =>
            {
                entity.ToTable("STOCK_SN_ERPUNLOCK");

                entity.HasIndex(e => new { e.Sncode, e.Cinvcode, e.Erpcode, e.Cpositioncode }, "STOCK_SN_ERPCINV");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Assited)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("assited")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cpositionname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpositionname");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("erpcode");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<StockSnLock>(entity =>
            {
                entity.ToTable("STOCK_SN_LOCK");

                entity.HasIndex(e => new { e.Locktime, e.Unlocktime }, "STOCK_SN_LOCKTIME");

                entity.HasIndex(e => e.Sncode, "STOCK_SN_LOCK_SN");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cenable)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cenable")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Locktime)
                    .HasColumnType("datetime")
                    .HasColumnName("locktime");

                entity.Property(e => e.Positioncode)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("positioncode");

                entity.Property(e => e.Positionname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("positionname");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.Snqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("snqty");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Unlocktime)
                    .HasColumnType("datetime")
                    .HasColumnName("unlocktime");
            });

            modelBuilder.Entity<StockTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("stock_temp");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Palletcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.Status).HasColumnName("status");
            });

            modelBuilder.Entity<SysArea>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_AREA")
                    .IsClustered(false);

                entity.ToTable("Sys_Area");

                entity.HasComment("行政区域表");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("主键");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建日期");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户主键");

                entity.Property(e => e.FDeleteMark)
                    .HasColumnName("F_DeleteMark")
                    .HasComment("删除标志");

                entity.Property(e => e.FDeleteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_DeleteTime")
                    .HasComment("删除时间");

                entity.Property(e => e.FDeleteUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_DeleteUserId")
                    .HasComment("删除用户");

                entity.Property(e => e.FDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Description")
                    .HasComment("描述");

                entity.Property(e => e.FEnCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_EnCode")
                    .HasComment("编码");

                entity.Property(e => e.FEnabledMark)
                    .HasColumnName("F_EnabledMark")
                    .HasComment("有效标志");

                entity.Property(e => e.FFullName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_FullName")
                    .HasComment("名称");

                entity.Property(e => e.FLastModifyTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LastModifyTime")
                    .HasComment("最后修改时间");

                entity.Property(e => e.FLastModifyUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_LastModifyUserId")
                    .HasComment("最后修改用户");

                entity.Property(e => e.FLayers)
                    .HasColumnName("F_Layers")
                    .HasComment("层次");

                entity.Property(e => e.FParentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ParentId")
                    .HasComment("父级");

                entity.Property(e => e.FSimpleSpelling)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_SimpleSpelling")
                    .HasComment("简拼");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");
            });

            modelBuilder.Entity<SysBilllog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SYS_BILLLOG");

                entity.HasIndex(e => e.Caseno, "SYS_BILLLOG_caseno");

                entity.HasIndex(e => e.Createtime, "SYS_BILLLOG_createtime");

                entity.Property(e => e.Caseid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("caseid");

                entity.Property(e => e.Caseno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("caseno");

                entity.Property(e => e.Casetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("casetype");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("remark");

                entity.Property(e => e.Stepid).HasColumnName("stepid");

                entity.Property(e => e.Steplog)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("steplog");
            });

            modelBuilder.Entity<SysConfig>(entity =>
            {
                entity.ToTable("SYS_CONFIG");

                entity.HasIndex(e => e.Id, "SYS_C0017098")
                    .IsUnique();

                entity.HasIndex(e => e.Code, "uk_SYS_CONFIG_code")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.ConfigDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("config_desc");

                entity.Property(e => e.ConfigValue)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("config_value");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner")
                    .HasDefaultValueSql("('admin')");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner")
                    .HasDefaultValueSql("('admin')");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Memo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Status)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("status")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.TypeMemo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("type_memo");
            });

            modelBuilder.Entity<SysCountlog>(entity =>
            {
                entity.ToTable("SYS_COUNTLOG");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Caseid)
                    .HasMaxLength(50)
                    .HasColumnName("caseid");

                entity.Property(e => e.Caseno)
                    .HasMaxLength(50)
                    .HasColumnName("caseno");

                entity.Property(e => e.Casetype)
                    .HasMaxLength(50)
                    .HasColumnName("casetype");

                entity.Property(e => e.Countafter).HasColumnName("countafter");

                entity.Property(e => e.Countbefore).HasColumnName("countbefore");

                entity.Property(e => e.Createtime)
                    .HasColumnType("date")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .HasColumnName("createuser");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("date")
                    .HasColumnName("updatetime");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(50)
                    .HasColumnName("updateuser");
            });

            modelBuilder.Entity<SysDbBackup>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_DBBACKUP")
                    .IsClustered(false);

                entity.ToTable("Sys_DbBackup");

                entity.HasComment("数据库备份");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("备份主键");

                entity.Property(e => e.FBackupTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_BackupTime")
                    .HasComment("备份时间");

                entity.Property(e => e.FBackupType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_BackupType")
                    .HasComment("备份类型");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建时间");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户");

                entity.Property(e => e.FDbName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_DbName")
                    .HasComment("数据库名称");

                entity.Property(e => e.FDeleteMark)
                    .HasColumnName("F_DeleteMark")
                    .HasComment("删除标志");

                entity.Property(e => e.FDeleteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_DeleteTime")
                    .HasComment("删除时间");

                entity.Property(e => e.FDeleteUserId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_DeleteUserId")
                    .HasComment("删除用户");

                entity.Property(e => e.FDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Description")
                    .HasComment("描述");

                entity.Property(e => e.FEnabledMark)
                    .HasColumnName("F_EnabledMark")
                    .HasComment("有效标志");

                entity.Property(e => e.FFileName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_FileName")
                    .HasComment("文件名称");

                entity.Property(e => e.FFilePath)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_FilePath")
                    .HasComment("文件路径");

                entity.Property(e => e.FFileSize)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_FileSize")
                    .HasComment("文件大小");

                entity.Property(e => e.FLastModifyTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LastModifyTime")
                    .HasComment("最后修改时间");

                entity.Property(e => e.FLastModifyUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_LastModifyUserId")
                    .HasComment("最后修改用户");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");
            });

            modelBuilder.Entity<SysFilterIp>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_FILTERIP")
                    .IsClustered(false);

                entity.ToTable("Sys_FilterIP");

                entity.HasComment("过滤IP");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("过滤主键");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建时间");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户");

                entity.Property(e => e.FDeleteMark)
                    .HasColumnName("F_DeleteMark")
                    .HasComment("删除标志");

                entity.Property(e => e.FDeleteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_DeleteTime")
                    .HasComment("删除时间");

                entity.Property(e => e.FDeleteUserId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_DeleteUserId")
                    .HasComment("删除用户");

                entity.Property(e => e.FDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Description")
                    .HasComment("描述");

                entity.Property(e => e.FEnabledMark)
                    .HasColumnName("F_EnabledMark")
                    .HasComment("有效标志");

                entity.Property(e => e.FEndIp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_EndIP")
                    .HasComment("结束IP");

                entity.Property(e => e.FLastModifyTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LastModifyTime")
                    .HasComment("最后修改时间");

                entity.Property(e => e.FLastModifyUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_LastModifyUserId")
                    .HasComment("最后修改用户");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");

                entity.Property(e => e.FStartIp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_StartIP")
                    .HasComment("开始IP");

                entity.Property(e => e.FType)
                    .HasColumnName("F_Type")
                    .HasComment("类型");
            });

            modelBuilder.Entity<SysItems>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_ITEMS")
                    .IsClustered(false);

                entity.ToTable("Sys_Items");

                entity.HasComment("选项主表");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("主表主键");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建日期");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户主键");

                entity.Property(e => e.FDeleteMark)
                    .HasColumnName("F_DeleteMark")
                    .HasComment("删除标志");

                entity.Property(e => e.FDeleteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_DeleteTime")
                    .HasComment("删除时间");

                entity.Property(e => e.FDeleteUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_DeleteUserId")
                    .HasComment("删除用户");

                entity.Property(e => e.FDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Description")
                    .HasComment("描述");

                entity.Property(e => e.FEnCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_EnCode")
                    .HasComment("编码");

                entity.Property(e => e.FEnabledMark)
                    .HasColumnName("F_EnabledMark")
                    .HasComment("有效标志");

                entity.Property(e => e.FFullName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_FullName")
                    .HasComment("名称");

                entity.Property(e => e.FIsTree)
                    .HasColumnName("F_IsTree")
                    .HasComment("树型");

                entity.Property(e => e.FLastModifyTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LastModifyTime")
                    .HasComment("最后修改时间");

                entity.Property(e => e.FLastModifyUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_LastModifyUserId")
                    .HasComment("最后修改用户");

                entity.Property(e => e.FLayers)
                    .HasColumnName("F_Layers")
                    .HasComment("层次");

                entity.Property(e => e.FParentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ParentId")
                    .HasComment("父级");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");
            });

            modelBuilder.Entity<SysItemsDetail>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_ITEMDETAIL")
                    .IsClustered(false);

                entity.ToTable("Sys_ItemsDetail");

                entity.HasComment("选项明细表");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("明细主键");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建日期");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户主键");

                entity.Property(e => e.FDeleteMark)
                    .HasColumnName("F_DeleteMark")
                    .HasComment("删除标志");

                entity.Property(e => e.FDeleteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_DeleteTime")
                    .HasComment("删除时间");

                entity.Property(e => e.FDeleteUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_DeleteUserId")
                    .HasComment("删除用户");

                entity.Property(e => e.FDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Description")
                    .HasComment("描述");

                entity.Property(e => e.FEnabledMark)
                    .HasColumnName("F_EnabledMark")
                    .HasComment("有效标志");

                entity.Property(e => e.FIsDefault)
                    .HasColumnName("F_IsDefault")
                    .HasComment("默认");

                entity.Property(e => e.FItemCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ItemCode")
                    .HasComment("编码");

                entity.Property(e => e.FItemId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ItemId")
                    .HasComment("主表主键");

                entity.Property(e => e.FItemName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ItemName")
                    .HasComment("名称");

                entity.Property(e => e.FLastModifyTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LastModifyTime")
                    .HasComment("最后修改时间");

                entity.Property(e => e.FLastModifyUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_LastModifyUserId")
                    .HasComment("最后修改用户");

                entity.Property(e => e.FLayers)
                    .HasColumnName("F_Layers")
                    .HasComment("层次");

                entity.Property(e => e.FParentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ParentId")
                    .HasComment("父级");

                entity.Property(e => e.FSimpleSpelling)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_SimpleSpelling")
                    .HasComment("简拼");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");
            });

            modelBuilder.Entity<SysJob>(entity =>
            {
                entity.ToTable("SYS_Job");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Beginruntime)
                    .HasColumnType("datetime")
                    .HasColumnName("beginruntime")
                    .HasComment("开始运行时间");

                entity.Property(e => e.Classname)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("classname")
                    .HasComment("job类名称(包含命名空间)");

                entity.Property(e => e.Cstatus)
                    .HasColumnName("cstatus")
                    .HasComment("1：启用、0：禁用");

                entity.Property(e => e.Dayfretype)
                    .HasColumnName("dayfretype")
                    .HasComment("每天执行频率类型 1 执行一次 2 间隔执行");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasColumnName("description")
                    .HasComment("描述");

                entity.Property(e => e.Dllname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("dllname")
                    .HasComment("DLL 名称");

                entity.Property(e => e.Functionname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("functionname")
                    .HasComment("函数名称");

                entity.Property(e => e.Jobname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("jobname")
                    .HasComment("名称");

                entity.Property(e => e.Lastendtime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastendtime")
                    .HasComment("上次运行结束时间");

                entity.Property(e => e.Oncedayfre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oncedayfre")
                    .HasComment("每天执行一次的执行时间");

                entity.Property(e => e.Splittime)
                    .HasColumnName("splittime")
                    .HasComment("重复执行时的间隔(单位秒)");
            });

            modelBuilder.Entity<SysLanguage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SYS_LANGUAGE");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner")
                    .HasDefaultValueSql("('admin')");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.LangType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("lang_type");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner")
                    .HasDefaultValueSql("('admin')");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Memo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Text)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("text");
            });

            modelBuilder.Entity<SysLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SYS_LOG");

                entity.HasComment("系统日志");

                entity.Property(e => e.CaseNo)
                    .HasMaxLength(50)
                    .HasColumnName("CaseNO");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUser).HasMaxLength(50);

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(50)
                    .HasColumnName("ERPCode");

                entity.Property(e => e.ErrorMsg).HasMaxLength(4000);

                entity.Property(e => e.ErrorNumber).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ModuleType).HasMaxLength(50);

                entity.Property(e => e.SourceType).HasMaxLength(50);

                entity.Property(e => e.SubModuleType).HasMaxLength(50);
            });

            modelBuilder.Entity<SysLogType>(entity =>
            {
                entity.ToTable("SYS_LOG_Type");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GroupName).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.TypeId).HasMaxLength(50);

                entity.Property(e => e.TypeName).HasMaxLength(100);
            });

            modelBuilder.Entity<SysModule>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_MODULE")
                    .IsClustered(false);

                entity.ToTable("Sys_Module");

                entity.HasComment("系统模块");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("模块主键");

                entity.Property(e => e.FAllowDelete)
                    .HasColumnName("F_AllowDelete")
                    .HasComment("允许删除");

                entity.Property(e => e.FAllowEdit)
                    .HasColumnName("F_AllowEdit")
                    .HasComment("允许编辑");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建日期");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户主键");

                entity.Property(e => e.FDeleteMark)
                    .HasColumnName("F_DeleteMark")
                    .HasComment("删除标志");

                entity.Property(e => e.FDeleteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_DeleteTime")
                    .HasComment("删除时间");

                entity.Property(e => e.FDeleteUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_DeleteUserId")
                    .HasComment("删除用户");

                entity.Property(e => e.FDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Description")
                    .HasComment("描述");

                entity.Property(e => e.FEnCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_EnCode")
                    .HasComment("编码");

                entity.Property(e => e.FEnabledMark)
                    .HasColumnName("F_EnabledMark")
                    .HasComment("有效标志");

                entity.Property(e => e.FFullName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_FullName")
                    .HasComment("名称");

                entity.Property(e => e.FIcon)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Icon")
                    .HasComment("图标");

                entity.Property(e => e.FIsExpand)
                    .HasColumnName("F_IsExpand")
                    .HasComment("展开");

                entity.Property(e => e.FIsMenu)
                    .HasColumnName("F_IsMenu")
                    .HasComment("菜单");

                entity.Property(e => e.FIsPublic)
                    .HasColumnName("F_IsPublic")
                    .HasComment("公共");

                entity.Property(e => e.FLastModifyTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LastModifyTime")
                    .HasComment("最后修改时间");

                entity.Property(e => e.FLastModifyUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_LastModifyUserId")
                    .HasComment("最后修改用户");

                entity.Property(e => e.FLayers)
                    .HasColumnName("F_Layers")
                    .HasComment("层次");

                entity.Property(e => e.FParentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ParentId")
                    .HasComment("父级");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");

                entity.Property(e => e.FTarget)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Target")
                    .HasComment("目标");

                entity.Property(e => e.FUrlAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_UrlAddress")
                    .HasComment("连接");
            });

            modelBuilder.Entity<SysModuleButton>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_MODULEBUTTON")
                    .IsClustered(false);

                entity.ToTable("Sys_ModuleButton");

                entity.HasComment("模块按钮");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("按钮主键");

                entity.Property(e => e.FAllowDelete)
                    .HasColumnName("F_AllowDelete")
                    .HasComment("允许删除");

                entity.Property(e => e.FAllowEdit)
                    .HasColumnName("F_AllowEdit")
                    .HasComment("允许编辑");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建日期");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户主键");

                entity.Property(e => e.FDeleteMark)
                    .HasColumnName("F_DeleteMark")
                    .HasComment("删除标志");

                entity.Property(e => e.FDeleteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_DeleteTime")
                    .HasComment("删除时间");

                entity.Property(e => e.FDeleteUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_DeleteUserId")
                    .HasComment("删除用户");

                entity.Property(e => e.FDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Description")
                    .HasComment("描述");

                entity.Property(e => e.FEnCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_EnCode")
                    .HasComment("编码");

                entity.Property(e => e.FEnabledMark)
                    .HasColumnName("F_EnabledMark")
                    .HasComment("有效标志");

                entity.Property(e => e.FFullName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_FullName")
                    .HasComment("名称");

                entity.Property(e => e.FIcon)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Icon")
                    .HasComment("图标");

                entity.Property(e => e.FIsPublic)
                    .HasColumnName("F_IsPublic")
                    .HasComment("公共");

                entity.Property(e => e.FJsEvent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_JsEvent")
                    .HasComment("事件");

                entity.Property(e => e.FLastModifyTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LastModifyTime")
                    .HasComment("最后修改时间");

                entity.Property(e => e.FLastModifyUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_LastModifyUserId")
                    .HasComment("最后修改用户");

                entity.Property(e => e.FLayers)
                    .HasColumnName("F_Layers")
                    .HasComment("层次");

                entity.Property(e => e.FLocation)
                    .HasColumnName("F_Location")
                    .HasComment("位置");

                entity.Property(e => e.FModuleId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ModuleId")
                    .HasComment("模块主键");

                entity.Property(e => e.FParentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ParentId")
                    .HasComment("父级");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");

                entity.Property(e => e.FSplit)
                    .HasColumnName("F_Split")
                    .HasComment("分开线");

                entity.Property(e => e.FUrlAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_UrlAddress")
                    .HasComment("连接");
            });

            modelBuilder.Entity<SysModuleForm>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_MODULEFORM")
                    .IsClustered(false);

                entity.ToTable("Sys_ModuleForm");

                entity.HasComment("模块表单");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("表单主键");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建时间");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户");

                entity.Property(e => e.FDeleteMark)
                    .HasColumnName("F_DeleteMark")
                    .HasComment("删除标志");

                entity.Property(e => e.FDeleteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_DeleteTime")
                    .HasComment("删除时间");

                entity.Property(e => e.FDeleteUserId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_DeleteUserId")
                    .HasComment("删除用户");

                entity.Property(e => e.FDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Description")
                    .HasComment("描述");

                entity.Property(e => e.FEnCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_EnCode")
                    .HasComment("编码");

                entity.Property(e => e.FEnabledMark)
                    .HasColumnName("F_EnabledMark")
                    .HasComment("有效标志");

                entity.Property(e => e.FFormJson)
                    .IsUnicode(false)
                    .HasColumnName("F_FormJson")
                    .HasComment("表单控件Json");

                entity.Property(e => e.FFullName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_FullName")
                    .HasComment("名称");

                entity.Property(e => e.FLastModifyTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LastModifyTime")
                    .HasComment("最后修改时间");

                entity.Property(e => e.FLastModifyUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_LastModifyUserId")
                    .HasComment("最后修改用户");

                entity.Property(e => e.FModuleId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ModuleId")
                    .HasComment("模块主键");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");
            });

            modelBuilder.Entity<SysModuleFormInstance>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_MODULEFORMINSTANCE")
                    .IsClustered(false);

                entity.ToTable("Sys_ModuleFormInstance");

                entity.HasComment("模块表单实例");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("表单实例主键");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建时间");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户");

                entity.Property(e => e.FFormId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_FormId")
                    .HasComment("表单主键");

                entity.Property(e => e.FInstanceJson)
                    .IsUnicode(false)
                    .HasColumnName("F_InstanceJson")
                    .HasComment("表单实例Json");

                entity.Property(e => e.FObjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ObjectId")
                    .HasComment("对象主键");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");
            });

            modelBuilder.Entity<SysOrganize>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_ORGANIZE")
                    .IsClustered(false);

                entity.ToTable("Sys_Organize");

                entity.HasComment("组织表");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("组织主键");

                entity.Property(e => e.FAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Address")
                    .HasComment("联系地址");

                entity.Property(e => e.FAllowDelete)
                    .HasColumnName("F_AllowDelete")
                    .HasComment("允许删除");

                entity.Property(e => e.FAllowEdit)
                    .HasColumnName("F_AllowEdit")
                    .HasComment("允许编辑");

                entity.Property(e => e.FAreaId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_AreaId")
                    .HasComment("归属区域");

                entity.Property(e => e.FCategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CategoryId")
                    .HasComment("分类");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建时间");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户");

                entity.Property(e => e.FDeleteMark)
                    .HasColumnName("F_DeleteMark")
                    .HasComment("删除标志");

                entity.Property(e => e.FDeleteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_DeleteTime")
                    .HasComment("删除时间");

                entity.Property(e => e.FDeleteUserId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_DeleteUserId")
                    .HasComment("删除用户");

                entity.Property(e => e.FDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Description")
                    .HasComment("描述");

                entity.Property(e => e.FEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Email")
                    .HasComment("邮箱");

                entity.Property(e => e.FEnCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_EnCode")
                    .HasComment("编码");

                entity.Property(e => e.FEnabledMark)
                    .HasColumnName("F_EnabledMark")
                    .HasComment("有效标志");

                entity.Property(e => e.FFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("F_Fax")
                    .HasComment("传真");

                entity.Property(e => e.FFullName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_FullName")
                    .HasComment("名称");

                entity.Property(e => e.FLastModifyTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LastModifyTime")
                    .HasComment("最后修改时间");

                entity.Property(e => e.FLastModifyUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_LastModifyUserId")
                    .HasComment("最后修改用户");

                entity.Property(e => e.FLayers)
                    .HasColumnName("F_Layers")
                    .HasComment("层次");

                entity.Property(e => e.FManagerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ManagerId")
                    .HasComment("负责人");

                entity.Property(e => e.FMobilePhone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("F_MobilePhone")
                    .HasComment("手机");

                entity.Property(e => e.FParentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ParentId")
                    .HasComment("父级");

                entity.Property(e => e.FShortName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ShortName")
                    .HasComment("简称");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");

                entity.Property(e => e.FTelePhone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("F_TelePhone")
                    .HasComment("电话");

                entity.Property(e => e.FWeChat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_WeChat")
                    .HasComment("微信");
            });

            modelBuilder.Entity<SysParameter>(entity =>
            {
                entity.ToTable("SYS_PARAMETER");

                entity.HasIndex(e => e.Id, "IDX_ID")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.FlagId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("flag_id");

                entity.Property(e => e.FlagName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flag_name");

                entity.Property(e => e.FlagType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flag_type");

                entity.Property(e => e.Memo)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Sortid)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sortid");
            });

            modelBuilder.Entity<SysParametergroup>(entity =>
            {
                entity.ToTable("SYS_PARAMETERGROUP");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.FlagType)
                    .HasMaxLength(100)
                    .HasColumnName("FLAG_TYPE");

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .HasColumnName("REMARK");
            });

            modelBuilder.Entity<SysParametername>(entity =>
            {
                entity.ToTable("SYS_PARAMETERNAME");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.FlagGuid)
                    .HasMaxLength(100)
                    .HasColumnName("FLAG_GUID");

                entity.Property(e => e.FlagId)
                    .HasMaxLength(100)
                    .HasColumnName("FLAG_ID");

                entity.Property(e => e.FlagName)
                    .HasMaxLength(100)
                    .HasColumnName("FLAG_NAME");

                entity.Property(e => e.Languageid)
                    .HasMaxLength(100)
                    .HasColumnName("LANGUAGEID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .HasColumnName("REMARK");
            });

            modelBuilder.Entity<SysPrinter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SYS_PRINTER");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Ip)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ip");

                entity.Property(e => e.Memo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Printname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("printname");
            });

            modelBuilder.Entity<SysRole>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_ROLE")
                    .IsClustered(false);

                entity.ToTable("Sys_Role");

                entity.HasComment("角色表");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("角色主键");

                entity.Property(e => e.FAllowDelete)
                    .HasColumnName("F_AllowDelete")
                    .HasComment("允许删除");

                entity.Property(e => e.FAllowEdit)
                    .HasColumnName("F_AllowEdit")
                    .HasComment("允许编辑");

                entity.Property(e => e.FCategory)
                    .HasColumnName("F_Category")
                    .HasComment("分类:1-角色2-岗位");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建时间");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户");

                entity.Property(e => e.FDeleteMark)
                    .HasColumnName("F_DeleteMark")
                    .HasComment("删除标志");

                entity.Property(e => e.FDeleteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_DeleteTime")
                    .HasComment("删除时间");

                entity.Property(e => e.FDeleteUserId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_DeleteUserId")
                    .HasComment("删除用户");

                entity.Property(e => e.FDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Description")
                    .HasComment("描述");

                entity.Property(e => e.FEnCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_EnCode")
                    .HasComment("编号");

                entity.Property(e => e.FEnabledMark)
                    .HasColumnName("F_EnabledMark")
                    .HasComment("有效标志");

                entity.Property(e => e.FFullName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_FullName")
                    .HasComment("名称");

                entity.Property(e => e.FLastModifyTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LastModifyTime")
                    .HasComment("最后修改时间");

                entity.Property(e => e.FLastModifyUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_LastModifyUserId")
                    .HasComment("最后修改用户");

                entity.Property(e => e.FOrganizeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_OrganizeId")
                    .HasComment("组织主键");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");

                entity.Property(e => e.FType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Type")
                    .HasComment("类型");
            });

            modelBuilder.Entity<SysRoleAuthorize>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_ROLEAUTHORIZE")
                    .IsClustered(false);

                entity.ToTable("Sys_RoleAuthorize");

                entity.HasComment("角色授权表");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("角色授权主键");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建时间");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户");

                entity.Property(e => e.FItemId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ItemId")
                    .HasComment("项目主键");

                entity.Property(e => e.FItemType)
                    .HasColumnName("F_ItemType")
                    .HasComment("项目类型1-模块2-按钮3-列表");

                entity.Property(e => e.FObjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ObjectId")
                    .HasComment("对象主键");

                entity.Property(e => e.FObjectType)
                    .HasColumnName("F_ObjectType")
                    .HasComment("对象分类1-角色2-部门-3用户");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");
            });

            modelBuilder.Entity<SysScaninlog>(entity =>
            {
                entity.ToTable("SYS_SCANINLOG");

                entity.HasIndex(e => new { e.LineId, e.SiteId, e.PalletCode, e.Createtime }, "IDX_SCAN_SYS_SCANINLOG");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Cdefined1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINED1");

                entity.Property(e => e.Cdefined2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINED2");

                entity.Property(e => e.Cdefined3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINED3");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Groupid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GROUPID");

                entity.Property(e => e.LineId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Msg)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MSG");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.SiteId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Step).HasColumnName("STEP");
            });

            modelBuilder.Entity<SysStockdiffLog>(entity =>
            {
                entity.ToTable("SYS_STOCKDIFF_LOG");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.AfSnQty)
                    .HasMaxLength(200)
                    .HasColumnName("af_sn_qty");

                entity.Property(e => e.AfStockQty)
                    .HasMaxLength(200)
                    .HasColumnName("af_stock_qty");

                entity.Property(e => e.Afterres)
                    .HasMaxLength(200)
                    .HasColumnName("afterres");

                entity.Property(e => e.BfSnQty)
                    .HasMaxLength(200)
                    .HasColumnName("bf_sn_qty");

                entity.Property(e => e.BfStockQty)
                    .HasMaxLength(200)
                    .HasColumnName("bf_stock_qty");

                entity.Property(e => e.Bfeforeres)
                    .HasMaxLength(200)
                    .HasColumnName("bfeforeres");

                entity.Property(e => e.Caseid)
                    .HasMaxLength(50)
                    .HasColumnName("caseid");

                entity.Property(e => e.Caseno)
                    .HasMaxLength(50)
                    .HasColumnName("caseno");

                entity.Property(e => e.Casetype)
                    .HasMaxLength(50)
                    .HasColumnName("casetype");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Partcode)
                    .HasMaxLength(200)
                    .HasColumnName("partcode");

                entity.Property(e => e.Positioncode)
                    .HasMaxLength(200)
                    .HasColumnName("positioncode");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime");

                entity.Property(e => e.Userno)
                    .HasMaxLength(200)
                    .HasColumnName("userno");
            });

            modelBuilder.Entity<SysUser>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_USER")
                    .IsClustered(false);

                entity.ToTable("Sys_User");

                entity.HasComment("用户表");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("用户主键");

                entity.Property(e => e.FAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Account")
                    .HasComment("账户");

                entity.Property(e => e.FBirthday)
                    .HasColumnType("datetime")
                    .HasColumnName("F_Birthday")
                    .HasComment("生日");

                entity.Property(e => e.FCreatorTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_CreatorTime")
                    .HasComment("创建时间");

                entity.Property(e => e.FCreatorUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_CreatorUserId")
                    .HasComment("创建用户");

                entity.Property(e => e.FDeleteMark)
                    .HasColumnName("F_DeleteMark")
                    .HasComment("删除标志");

                entity.Property(e => e.FDeleteTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_DeleteTime")
                    .HasComment("删除时间");

                entity.Property(e => e.FDeleteUserId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_DeleteUserId")
                    .HasComment("删除用户");

                entity.Property(e => e.FDepartmentId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_DepartmentId")
                    .HasComment("部门主键");

                entity.Property(e => e.FDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Description")
                    .HasComment("描述");

                entity.Property(e => e.FDutyId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_DutyId")
                    .HasComment("岗位主键");

                entity.Property(e => e.FEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Email")
                    .HasComment("邮箱");

                entity.Property(e => e.FEnabledMark)
                    .HasColumnName("F_EnabledMark")
                    .HasComment("有效标志");

                entity.Property(e => e.FGender)
                    .HasColumnName("F_Gender")
                    .HasComment("性别");

                entity.Property(e => e.FHeadIcon)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_HeadIcon")
                    .HasComment("头像");

                entity.Property(e => e.FIsAdministrator)
                    .HasColumnName("F_IsAdministrator")
                    .HasComment("是否管理员");

                entity.Property(e => e.FLastModifyTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LastModifyTime")
                    .HasComment("最后修改时间");

                entity.Property(e => e.FLastModifyUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_LastModifyUserId")
                    .HasComment("最后修改用户");

                entity.Property(e => e.FManagerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_ManagerId")
                    .HasComment("主管主键");

                entity.Property(e => e.FMobilePhone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("F_MobilePhone")
                    .HasComment("手机");

                entity.Property(e => e.FNickName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_NickName")
                    .HasComment("呢称");

                entity.Property(e => e.FOrganizeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_OrganizeId")
                    .HasComment("组织主键");

                entity.Property(e => e.FRealName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_RealName")
                    .HasComment("姓名");

                entity.Property(e => e.FRoleId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_RoleId")
                    .HasComment("角色主键");

                entity.Property(e => e.FSecurityLevel)
                    .HasColumnName("F_SecurityLevel")
                    .HasComment("安全级别");

                entity.Property(e => e.FSignature)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_Signature")
                    .HasComment("个性签名");

                entity.Property(e => e.FSortCode)
                    .HasColumnName("F_SortCode")
                    .HasComment("排序码");

                entity.Property(e => e.FWeChat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_WeChat")
                    .HasComment("微信");
            });

            modelBuilder.Entity<SysUserLogOn>(entity =>
            {
                entity.HasKey(e => e.FId)
                    .HasName("PK_SYS_USERLOGON")
                    .IsClustered(false);

                entity.ToTable("Sys_UserLogOn");

                entity.HasComment("用户登录信息表");

                entity.Property(e => e.FId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Id")
                    .HasComment("用户登录主键");

                entity.Property(e => e.FAllowEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_AllowEndTime")
                    .HasComment("允许登录时间结束");

                entity.Property(e => e.FAllowStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_AllowStartTime")
                    .HasComment("允许登录时间开始");

                entity.Property(e => e.FAnswerQuestion)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("F_AnswerQuestion")
                    .HasComment("密码提示答案");

                entity.Property(e => e.FChangePasswordDate)
                    .HasColumnType("datetime")
                    .HasColumnName("F_ChangePasswordDate")
                    .HasComment("最后修改密码日期");

                entity.Property(e => e.FCheckIpaddress)
                    .HasColumnName("F_CheckIPAddress")
                    .HasComment("是否访问限制");

                entity.Property(e => e.FFirstVisitTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_FirstVisitTime")
                    .HasComment("第一次访问时间");

                entity.Property(e => e.FLanguage)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Language")
                    .HasComment("系统语言");

                entity.Property(e => e.FLastVisitTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LastVisitTime")
                    .HasComment("最后访问时间");

                entity.Property(e => e.FLockEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LockEndDate")
                    .HasComment("暂停用户结束日期");

                entity.Property(e => e.FLockStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("F_LockStartDate")
                    .HasComment("暂停用户开始日期");

                entity.Property(e => e.FLogOnCount)
                    .HasColumnName("F_LogOnCount")
                    .HasComment("登录次数");

                entity.Property(e => e.FMultiUserLogin)
                    .HasColumnName("F_MultiUserLogin")
                    .HasComment("允许同时有多用户登录");

                entity.Property(e => e.FPreviousVisitTime)
                    .HasColumnType("datetime")
                    .HasColumnName("F_PreviousVisitTime")
                    .HasComment("上一次访问时间");

                entity.Property(e => e.FQuestion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Question")
                    .HasComment("密码提示问题");

                entity.Property(e => e.FTheme)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_Theme")
                    .HasComment("系统样式");

                entity.Property(e => e.FUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_UserId")
                    .HasComment("用户主键");

                entity.Property(e => e.FUserOnLine)
                    .HasColumnName("F_UserOnLine")
                    .HasComment("在线状态");

                entity.Property(e => e.FUserPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_UserPassword")
                    .HasComment("用户密码");

                entity.Property(e => e.FUserSecretkey)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_UserSecretkey")
                    .HasComment("用户秘钥");
            });

            modelBuilder.Entity<SysVersion>(entity =>
            {
                entity.HasKey(e => e.Seq)
                    .HasName("VERSION_PK");

                entity.ToTable("SYS_VERSION");

                entity.Property(e => e.Seq)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("seq");

                entity.Property(e => e.Memo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("url");

                entity.Property(e => e.Versionno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("versionno");
            });

            modelBuilder.Entity<TOutReleaseofoccupied>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("T_OUT_RELEASEOFOCCUPIED");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvcode1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode1");

                entity.Property(e => e.Coutasnid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cpositioncode1)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode1");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Did)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("did");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("inum");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Occupied)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("occupied");
            });

            modelBuilder.Entity<TaskInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TASK_INFO");

                entity.Property(e => e.Actualdate)
                    .HasColumnType("datetime")
                    .HasColumnName("actualdate");

                entity.Property(e => e.Assigndate)
                    .HasColumnType("datetime")
                    .HasColumnName("assigndate");

                entity.Property(e => e.Assignfromid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("assignfromid");

                entity.Property(e => e.Assignfromname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("assignfromname");

                entity.Property(e => e.Assigntoid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("assigntoid");

                entity.Property(e => e.Assigntoname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("assigntoname");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cmodifiedownercode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cmodifiedownercode");

                entity.Property(e => e.Contexts)
                    .HasColumnType("ntext")
                    .HasColumnName("contexts");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Dmodifiedtime)
                    .HasColumnType("datetime")
                    .HasColumnName("dmodifiedtime");

                entity.Property(e => e.Exelevel)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("exelevel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Expectdate)
                    .HasColumnType("datetime")
                    .HasColumnName("expectdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Jobcontexts)
                    .HasColumnType("ntext")
                    .HasColumnName("jobcontexts");

                entity.Property(e => e.Percentage)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("percentage")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Status)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("status")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TbTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tb_test");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(200)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.RowNum).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TbTestFloat>(entity =>
            {
                entity.ToTable("TB_TEST_FLOAT");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Num).HasColumnName("num");

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.Remark)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("remark");
            });

            modelBuilder.Entity<TempAllocate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_ALLOCATE");

                entity.Property(e => e.Allocateid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("allocateid");

                entity.Property(e => e.Allotype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("allotype");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Ctopositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("ctopositioncode");

                entity.Property(e => e.Iquantity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("iquantity");

                entity.Property(e => e.Models)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("models");

                entity.Property(e => e.Nocode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nocode");

                entity.Property(e => e.Sptype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sptype");

                entity.Property(e => e.Totalqty)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("totalqty");
            });

            modelBuilder.Entity<TempAreaPaetWarehouse>(entity =>
            {
                entity.ToTable("TEMP_AREA_PAET_WAREHOUSE");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.AreaName).HasColumnName("area_name");

                entity.Property(e => e.Cpartnumber).HasColumnName("cpartnumber");

                entity.Property(e => e.Cpositioncode).HasColumnName("cpositioncode");

                entity.Property(e => e.Cwareid).HasColumnName("cwareid");

                entity.Property(e => e.Issave)
                    .HasMaxLength(20)
                    .HasColumnName("issave");
            });

            modelBuilder.Entity<TempBaseArea>(entity =>
            {
                entity.ToTable("TEMP_BASE_AREA");

                entity.Property(e => e.Id)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Areaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AREANAME");

                entity.Property(e => e.Backupcposition)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BACKUPCPOSITION");

                entity.Property(e => e.Backupcpositioncode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BACKUPCPOSITIONCODE");

                entity.Property(e => e.Flag)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FLAG");

                entity.Property(e => e.Issave).HasColumnName("issave");
            });

            modelBuilder.Entity<TempBaseCargospace>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_BASE_CARGOSPACE");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cx");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cy");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("imaxcapacity");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipermitmix")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority");

                entity.Property(e => e.IsAllo)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_allo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ivolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ivolume");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Lastcstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastcstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Warehouseid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");
            });

            modelBuilder.Entity<TempBaseClient>(entity =>
            {
                entity.ToTable("TEMP_BASE_CLIENT");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Caddress).HasColumnName("caddress");

                entity.Property(e => e.Calias).HasColumnName("calias");

                entity.Property(e => e.Cclientid).HasColumnName("cclientid");

                entity.Property(e => e.Cclientname).HasColumnName("cclientname");

                entity.Property(e => e.Ccontactperson).HasColumnName("ccontactperson");

                entity.Property(e => e.Cdefine1).HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2).HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode).HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo).HasColumnName("cmemo");

                entity.Property(e => e.Companyno).HasColumnName("companyno");

                entity.Property(e => e.Cphone).HasColumnName("cphone");

                entity.Property(e => e.Createowner).HasColumnName("createowner");

                entity.Property(e => e.Createtime).HasColumnName("createtime");

                entity.Property(e => e.Cstatus).HasColumnName("cstatus");

                entity.Property(e => e.Ctype).HasColumnName("ctype");

                entity.Property(e => e.Ddefine3).HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4).HasColumnName("ddefine4");

                entity.Property(e => e.Idefine5).HasColumnName("idefine5");

                entity.Property(e => e.Ilever).HasColumnName("ilever");

                entity.Property(e => e.Issave).HasColumnName("issave");

                entity.Property(e => e.Lastupdateowner).HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime).HasColumnName("lastupdatetime");

                entity.Property(e => e.Organizationno).HasColumnName("organizationno");

                entity.Property(e => e.Strongholdno).HasColumnName("strongholdno");
            });

            modelBuilder.Entity<TempBaseDepartment>(entity =>
            {
                entity.ToTable("TEMP_BASE_DEPARTMENT");

                entity.Property(e => e.Id)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Departmentname).HasColumnName("DEPARTMENTNAME");

                entity.Property(e => e.Departmentno).HasColumnName("DEPARTMENTNO");

                entity.Property(e => e.ErrorFlag).HasColumnName("error_flag");
            });

            modelBuilder.Entity<TempBaseLineList>(entity =>
            {
                entity.ToTable("TEMP_BASE_LINE_LIST");

                entity.Property(e => e.Id)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.ErrorFlag).HasColumnName("ERROR_FLAG");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");
            });

            modelBuilder.Entity<TempBasePartCargospace>(entity =>
            {
                entity.ToTable("TEMP_BASE_PART_CARGOSPACE");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cpartid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cpartid");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Guid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("guid");
            });

            modelBuilder.Entity<TempBaseStockCurrent>(entity =>
            {
                entity.ToTable("TEMP_BASE_STOCK_CURRENT");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(4000)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(4000)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(4000)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cwarehousecode)
                    .HasMaxLength(4000)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.ErrorFlag).HasColumnName("error_flag");

                entity.Property(e => e.Iqty)
                    .HasMaxLength(4000)
                    .HasColumnName("iqty");
            });

            modelBuilder.Entity<TempBaseVendor>(entity =>
            {
                entity.HasKey(e => e.Ids);

                entity.ToTable("TEMP_BASE_VENDOR");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .HasColumnName("ids");

                entity.Property(e => e.Caddress).HasColumnName("caddress");

                entity.Property(e => e.Calias).HasColumnName("calias");

                entity.Property(e => e.Ccontactperson).HasColumnName("ccontactperson");

                entity.Property(e => e.Cdefine1).HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2).HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode).HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo).HasColumnName("cmemo");

                entity.Property(e => e.Companyno).HasColumnName("companyno");

                entity.Property(e => e.Cphone).HasColumnName("cphone");

                entity.Property(e => e.Createowner).HasColumnName("createowner");

                entity.Property(e => e.Createtime).HasColumnName("createtime");

                entity.Property(e => e.Cstatus).HasColumnName("cstatus");

                entity.Property(e => e.Ctnpe).HasColumnName("ctnpe");

                entity.Property(e => e.Cvendor).HasColumnName("cvendor");

                entity.Property(e => e.Cvendorid).HasColumnName("cvendorid");

                entity.Property(e => e.Ddefine3).HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4).HasColumnName("ddefine4");

                entity.Property(e => e.Idefine5).HasColumnName("idefine5");

                entity.Property(e => e.Ilevel).HasColumnName("ilevel");

                entity.Property(e => e.Issave).HasColumnName("issave");

                entity.Property(e => e.Lastupdateowner).HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime).HasColumnName("lastupdatetime");

                entity.Property(e => e.Organizationno).HasColumnName("organizationno");

                entity.Property(e => e.Strongholdno).HasColumnName("strongholdno");
            });

            modelBuilder.Entity<TempBinCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_BIN_CARD");

                entity.Property(e => e.Balancenum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("balancenum");

                entity.Property(e => e.Binuserno)
                    .HasMaxLength(50)
                    .HasColumnName("binuserno");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Cwarename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("erpcode");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .HasColumnName("ids");

                entity.Property(e => e.Inqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("inqty");

                entity.Property(e => e.Iotype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("iotype");

                entity.Property(e => e.Managers)
                    .HasMaxLength(50)
                    .HasColumnName("managers");

                entity.Property(e => e.Memo)
                    .HasMaxLength(200)
                    .HasColumnName("memo");

                entity.Property(e => e.Outintype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outintype");

                entity.Property(e => e.Outqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("outqty");

                entity.Property(e => e.Tradtime)
                    .HasColumnType("datetime")
                    .HasColumnName("tradtime");

                entity.Property(e => e.Typecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("typecode");
            });

            modelBuilder.Entity<TempCpositioncode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_CPOSITIONCODE");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");
            });

            modelBuilder.Entity<TempDigitalsinge>(entity =>
            {
                entity.ToTable("TEMP_DIGITALSINGE");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("erpcode");

                entity.Property(e => e.Oassitallno)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("oassitallno");

                entity.Property(e => e.Oassitallyes)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("oassitallyes");

                entity.Property(e => e.Oassitpartno)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("oassitpartno");

                entity.Property(e => e.Obillallno)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("obillallno");

                entity.Property(e => e.Obillallyes)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("obillallyes");

                entity.Property(e => e.Obillpartno)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("obillpartno");

                entity.Property(e => e.Partcount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("partcount");

                entity.Property(e => e.Qallcinvcode)
                    .HasColumnType("ntext")
                    .HasColumnName("qallcinvcode");

                entity.Property(e => e.Qallyes)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("qallyes");

                entity.Property(e => e.RespDept)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("resp_dept");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date");

                entity.Property(e => e.StartQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("start_quantity");

                entity.Property(e => e.Statename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("statename");

                entity.Property(e => e.Tempbillallno)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("tempbillallno");

                entity.Property(e => e.Tempbillallyes)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("tempbillallyes");

                entity.Property(e => e.Tempbillpartno)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("tempbillpartno");
            });

            modelBuilder.Entity<TempEbsResult>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_EBS_RESULT");

                entity.Property(e => e.Attribute11)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute11");

                entity.Property(e => e.Attribute7)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("attribute7");

                entity.Property(e => e.InventoryItemId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("inventory_item_id");

                entity.Property(e => e.LocatorId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("locator_id");

                entity.Property(e => e.Qty1)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty1");

                entity.Property(e => e.Qty2)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty2");

                entity.Property(e => e.SubinventoryCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("subinventory_code");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transaction_date");

                entity.Property(e => e.TransactionSourceId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_source_id");
            });

            modelBuilder.Entity<TempEbsYd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_EBS_YD");

                entity.Property(e => e.Attribute7)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("attribute7");

                entity.Property(e => e.TransactionQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("transaction_quantity");
            });

            modelBuilder.Entity<TempImportSpacePartArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_IMPORT_SPACE_PART_AREA");

                entity.Property(e => e.AreaName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("area_name");

                entity.Property(e => e.Cpartnumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cpartnumber");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Imaxcapacity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("imaxcapacity");

                entity.Property(e => e.Ipermitmix)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ipermitmix");

                entity.Property(e => e.Ipriority1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ipriority_1");

                entity.Property(e => e.Ipriority2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ipriority_2");

                entity.Property(e => e.Ipriority3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ipriority_3");

                entity.Property(e => e.PartMinQty)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("part_min_qty");

                entity.Property(e => e.Rowindex)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("rowindex");

                entity.Property(e => e.Tablename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tablename");

                entity.Property(e => e.WarehouseNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("warehouse_no");
            });

            modelBuilder.Entity<TempImportoutasndetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_IMPORTOUTASNDETAIL");

                entity.Property(e => e.Asnid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("asnid");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Guid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");
            });

            modelBuilder.Entity<TempIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_IN");

                entity.Property(e => e.AreaName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("area_name");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");
            });

            modelBuilder.Entity<TempInMoInfo>(entity =>
            {
                entity.ToTable("TEMP_IN_MO_INFO");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.CreateOwner).HasColumnName("create_owner");

                entity.Property(e => e.CreateTime).HasColumnName("create_time");

                entity.Property(e => e.Departmentno).HasColumnName("departmentno");

                entity.Property(e => e.Iscountjobtime).HasColumnName("iscountjobtime");

                entity.Property(e => e.Issave)
                    .HasMaxLength(50)
                    .HasColumnName("issave");

                entity.Property(e => e.LastUpdOwner).HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime).HasColumnName("last_upd_time");

                entity.Property(e => e.Linebody).HasColumnName("linebody");

                entity.Property(e => e.Models).HasColumnName("models");

                entity.Property(e => e.Onlinetime).HasColumnName("onlinetime");

                entity.Property(e => e.SecCinvcode).HasColumnName("sec_cinvcode");

                entity.Property(e => e.Shift).HasColumnName("shift");

                entity.Property(e => e.Side).HasColumnName("side");

                entity.Property(e => e.Special)
                    .HasColumnName("special")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StartDate).HasColumnName("start_date");

                entity.Property(e => e.Wo)
                    .IsRequired()
                    .HasColumnName("wo");

                entity.Property(e => e.WoQty)
                    .IsRequired()
                    .HasColumnName("wo_qty");
            });

            modelBuilder.Entity<TempInandoutbill>(entity =>
            {
                entity.ToTable("TEMP_INANDOUTBILL");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .HasColumnName("createuser");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.CurrentStockQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("CurrentStockQTY");

                entity.Property(e => e.Cwarename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.OldCinvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Typecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typecode");

                entity.Property(e => e.Typename)
                    .HasMaxLength(50)
                    .HasColumnName("typename");

                entity.Property(e => e.WorkTypeName).HasMaxLength(50);

                entity.Property(e => e.Worktype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("worktype")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TempInassitBaseCargospace>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_INASSIT_BASE_CARGOSPACE");

                entity.Property(e => e.Caccountid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("caccountid");

                entity.Property(e => e.Casnid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("casnid");

                entity.Property(e => e.Coperatorname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coperatorname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Guid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<TempInbillD>(entity =>
            {
                entity.HasKey(e => e.Ids);

                entity.ToTable("TEMP_INBILL_D");

                entity.HasIndex(e => e.Id, "EMP_INBILL_D_INDEX_ID");

                entity.HasIndex(e => e.Ids, "TEMP_INBILL_D_INDEX_IDS");

                entity.HasIndex(e => e.Cinvbarcode, "TEMP_IN_D_INDEX_CINVBARCODE");

                entity.HasIndex(e => e.Cinvcode, "TEMP_IN_D_INDEX_CINVCODE");

                entity.HasIndex(e => e.Cpositioncode, "TEMP_IN_D_IN_CPOSITION");

                entity.HasIndex(e => e.Inbillcticketcode, "T_IN_D_INDEX_INBILLCTICKETCODE");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.AsnDIds)
                    .HasMaxLength(50)
                    .HasColumnName("asn_d_ids");

                entity.Property(e => e.Cdefine1)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinpersoncode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cinpersoncode");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Iasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("iasnline");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Inbillcticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inbillcticketcode");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.IsTemporary)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("是否暂存入  0： 不是  1：是");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Rulecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULECODE");

                entity.Property(e => e.Scantype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("scantype");

                entity.Property(e => e.Site)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("site");

                entity.Property(e => e.SnCode20)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE20");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stockcurrentdetailid)
                    .HasMaxLength(50)
                    .HasColumnName("stockcurrentdetailid");

                entity.Property(e => e.Wire)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("wire");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<TempInbilltotalqty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_INBILLTOTALQTY");

                entity.Property(e => e.Casnid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("casnid")
                    .IsFixedLength(true);

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Totalqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("totalqty");

                entity.Property(e => e.Userno)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("userno")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TempLessCinvcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_LESS_CINVCODE");

                entity.Property(e => e.Acceptancenum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("acceptancenum");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Deptname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("deptname");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Inbillnum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("inbillnum");

                entity.Property(e => e.Issuednum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("issuednum");

                entity.Property(e => e.Lesscinnum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("lesscinnum");

                entity.Property(e => e.Noissuednum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("noissuednum");

                entity.Property(e => e.Nowstocklessnum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("nowstocklessnum");

                entity.Property(e => e.Requirenum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("requirenum");

                entity.Property(e => e.Stockcannum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("stockcannum");
            });

            modelBuilder.Entity<TempLessDeptmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_LESS_DEPTMAIL");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.TDept)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("t_dept");

                entity.Property(e => e.TMail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("t_mail");

                entity.Property(e => e.TUser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("t_user");
            });

            modelBuilder.Entity<TempLessErpcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_LESS_ERPCODE");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");
            });

            modelBuilder.Entity<TempOasnErpcodeN>(entity =>
            {
                entity.HasKey(e => e.Cerpcode)
                    .HasName("TOEPC_KEY");

                entity.ToTable("TEMP_OASN_ERPCODE_N");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");
            });

            modelBuilder.Entity<TempOfZyl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_OF_ZYL");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("flag")
                    .IsFixedLength(true);

                entity.Property(e => e.ItemId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("item_id");

                entity.Property(e => e.Storage)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("storage");

                entity.Property(e => e.Totalnum)
                    .HasColumnType("decimal(12, 2)")
                    .HasColumnName("totalnum");
            });

            modelBuilder.Entity<TempOrdercompissue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_ORDERCOMPISSUE");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cfhdkznum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cfhdkznum");

                entity.Property(e => e.Cfhdwkznum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cfhdwkznum");

                entity.Property(e => e.Cfnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("cfnum");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Clcfnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("clcfnum");

                entity.Property(e => e.Clnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("clnum");

                entity.Property(e => e.Compcinvcode)
                    .HasMaxLength(100)
                    .HasColumnName("compcinvcode");

                entity.Property(e => e.Compnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("compnum");

                entity.Property(e => e.Ctnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ctnum");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Nocompnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("nocompnum");

                entity.Property(e => e.RequiredQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("required_quantity");

                entity.Property(e => e.Sfnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sfnum");

                entity.Property(e => e.Tlnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("tlnum");

                entity.Property(e => e.Tuserno)
                    .HasMaxLength(50)
                    .HasColumnName("tuserno");

                entity.Property(e => e.TypeSmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type_smt");

                entity.Property(e => e.Wfanum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("wfanum");

                entity.Property(e => e.Wlpsnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("wlpsnum");

                entity.Property(e => e.Wmsyfl)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("wmsyfl");
            });

            modelBuilder.Entity<TempOutTransportationplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_OUT_TRANSPORTATIONPLAN");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Newasncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("newasncode");

                entity.Property(e => e.Newasnids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("newasnids");

                entity.Property(e => e.Oldasncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("oldasncode");

                entity.Property(e => e.Oldasnids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oldasnids");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.So)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("so");

                entity.Property(e => e.Soline)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("soline");
            });

            modelBuilder.Entity<TempOutasnId>(entity =>
            {
                entity.ToTable("TEMP_OUTASN_ID");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Asnid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("asnid");

                entity.Property(e => e.Groupid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("groupid");
            });

            modelBuilder.Entity<TempOutbillD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__TEMP_OUT__DC501A7DD1C9F5BE");

                entity.ToTable("TEMP_OUTBILL_D");

                entity.HasIndex(e => e.Id, "TEMP_OUTBILL_D_IK1");

                entity.HasIndex(e => e.Cinvbarcode, "TEMP_OUT_D_INDEX_CINVBARCODE");

                entity.HasIndex(e => e.Cinvcode, "TEMP_OUT_D_INDEX_CINVCODE");

                entity.HasIndex(e => e.Cpositioncode, "TEMP_OUT_D_INDEX_CPOSITIONCODE");

                entity.HasIndex(e => e.Cerpcodeline, "TEMP_OUT_D_INDEX_ERPCODE");

                entity.HasIndex(e => e.Id, "TEMP_OUT_D_INDEX_ID");

                entity.HasIndex(e => e.Ids, "TEMP_OUT_D_INDEX_IDS");

                entity.HasIndex(e => e.Outbillcticketcode, "T_O_D_INDEX_OUTBILLCTICKETCODE");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AsnDIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("asn_d_ids");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutpersoncode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coutpersoncode");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Doutdate)
                    .HasColumnType("datetime")
                    .HasColumnName("doutdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.IsTemporary)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.Outassitcticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outassitcticketcode");

                entity.Property(e => e.Outbillcticketcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("outbillcticketcode");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Rulecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULECODE");

                entity.Property(e => e.Scantype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("scantype");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vendorcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("vendorcode");
            });

            modelBuilder.Entity<TempOutbillDHis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_OUTBILL_D_HIS");

                entity.HasIndex(e => e.Outbillcticketcode, "TEMP_OUT_HIS_BILLCODE");

                entity.HasIndex(e => e.Cinvcode, "TEMP_OUT_HIS_CINVCODE");

                entity.HasIndex(e => e.Id, "TEMP_OUT_HIS_ID");

                entity.HasIndex(e => e.Ids, "TEMP_OUT_HIS_IDS");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutpersoncode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coutpersoncode");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Deletetime)
                    .HasColumnType("datetime")
                    .HasColumnName("deletetime");

                entity.Property(e => e.Deleteuser)
                    .HasMaxLength(50)
                    .HasColumnName("deleteuser");

                entity.Property(e => e.Doutdate)
                    .HasColumnType("datetime")
                    .HasColumnName("doutdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.Outassitcticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outassitcticketcode");

                entity.Property(e => e.Outbillcticketcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("outbillcticketcode");
            });

            modelBuilder.Entity<TempOutbillDT>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__TEMP_OUT__DC501A7D03818D80");

                entity.ToTable("TEMP_OUTBILL_D_T");

                entity.HasIndex(e => e.Outbillcticketcode, "TEMP_OUTBILL_D_T_INDEX");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.AsnDIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("asn_d_ids");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutpersoncode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coutpersoncode");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Doutdate)
                    .HasColumnType("datetime")
                    .HasColumnName("doutdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.Outassitcticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outassitcticketcode");

                entity.Property(e => e.Outbillcticketcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("outbillcticketcode");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Rulecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULECODE");

                entity.Property(e => e.Scantype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("scantype");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vendorcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("vendorcode");
            });

            modelBuilder.Entity<TempOutbillDTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_OUTBILL_D_TEST");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutpersoncode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coutpersoncode");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Doutdate)
                    .HasColumnType("datetime")
                    .HasColumnName("doutdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.Outassitcticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outassitcticketcode");

                entity.Property(e => e.Outbillcticketcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("outbillcticketcode");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype");
            });

            modelBuilder.Entity<TempOutbilltotalqty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_OUTBILLTOTALQTY");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Coutasnid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid")
                    .IsFixedLength(true);

                entity.Property(e => e.Guid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.Totalqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("totalqty");

                entity.Property(e => e.Userno)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("userno")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TempOutmixedD>(entity =>
            {
                entity.ToTable("TEMP_OUTMIXED_D");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.AsnDIds)
                    .HasMaxLength(50)
                    .HasColumnName("asn_d_ids");

                entity.Property(e => e.Cdefine1)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinpersoncode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cinpersoncode");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Iasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("iasnline");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Inbillcticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inbillcticketcode");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.Outasncticketcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outasncticketcode");

                entity.Property(e => e.Outbillcticketcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outbillcticketcode");

                entity.Property(e => e.Outbilldids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outbilldids");

                entity.Property(e => e.Scantype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("scantype");

                entity.Property(e => e.Site)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("site");

                entity.Property(e => e.SnCode20)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE20");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Stockcurrentdetailid)
                    .HasMaxLength(50)
                    .HasColumnName("stockcurrentdetailid");

                entity.Property(e => e.Wire)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("wire");
            });

            modelBuilder.Entity<TempQueryInOutSummaryReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_QueryInOutSummaryReport");

                entity.HasIndex(e => new { e.Cinvcode, e.Cspecifications }, "idx_Temp_QueryInOutSummaryReport");

                entity.Property(e => e.Beginstocksummary)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("beginstocksummary");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(100)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Endstocksunmary)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("endstocksunmary");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.Insummary)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("insummary");

                entity.Property(e => e.Outsummary)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("outsummary");
            });

            modelBuilder.Entity<TempQueryInOutdetailsReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_QueryInOutdetailsReport");

                entity.HasIndex(e => new { e.CreateDate, e.Cinvcode }, "idx_Temp_QueryInOutdetailsReport");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.CreateDate)
                    .HasMaxLength(50)
                    .HasColumnName("createDate");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(100)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(100)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.Insummary)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("insummary");

                entity.Property(e => e.Outsummary)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("outsummary");

                entity.Property(e => e.Stocksummary)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("stocksummary");

                entity.Property(e => e.Typename)
                    .HasMaxLength(100)
                    .HasColumnName("typename");

                entity.Property(e => e.Ymonth)
                    .HasMaxLength(500)
                    .HasColumnName("ymonth");
            });

            modelBuilder.Entity<TempReportStockDuration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_REPORT_STOCK_DURATION");

                entity.Property(e => e.Beginqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("beginqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Cwareid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Endqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("endqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("inqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Outqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("outqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Workuserno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("workuserno");
            });

            modelBuilder.Entity<TempSelectasnd>(entity =>
            {
                entity.ToTable("TEMP_SELECTASND");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AsnId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("asn_id");

                entity.Property(e => e.AsnIds)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("asn_ids");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Guid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.Userno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userno");
            });

            modelBuilder.Entity<TempSnErpunlock>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_SN_ERPUNLOCK");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cpositionname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpositionname");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("erpcode");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.Pguid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("pguid");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");
            });

            modelBuilder.Entity<TempStockCheck>(entity =>
            {
                entity.ToTable("TEMP_STOCK_CHECK");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Updatemark).HasColumnName("updatemark");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime");

                entity.Property(e => e.Whid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("whid");
            });

            modelBuilder.Entity<TempStockCheckedbill>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_STOCK_CHECKEDBILL");

                entity.Property(e => e.Bz)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("bz");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Ctickecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ctickecode");

                entity.Property(e => e.Cwareid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Datecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("datecode");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Nocode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("nocode");

                entity.Property(e => e.Operatorno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("operatorno");

                entity.Property(e => e.Oraclecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("oraclecode");

                entity.Property(e => e.Qty)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");
            });

            modelBuilder.Entity<TempStockCheckedbillSn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_STOCK_CHECKEDBILL_SN");

                entity.Property(e => e.Checktype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("checktype");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.StockCheckbillDIds)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("stock_checkbill_d_ids");
            });

            modelBuilder.Entity<TempStockCurrent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_STOCK_CURRENT");

                entity.Property(e => e.Cbarcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cbarcode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Ddatecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ddatecode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.GuidId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("guid_id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Iplanin)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iplanin");

                entity.Property(e => e.Iplanout)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iplanout");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TempStockCurrentSn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_STOCK_CURRENT_SN");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Datecode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("datecode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.Weeks)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("weeks");
            });

            modelBuilder.Entity<TempStockDuration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_STOCK_DURATION");

                entity.Property(e => e.Beginqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("beginqty");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Durationbegin)
                    .HasColumnType("datetime")
                    .HasColumnName("durationbegin");

                entity.Property(e => e.Durationend)
                    .HasColumnType("datetime")
                    .HasColumnName("durationend");

                entity.Property(e => e.Endqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("endqty");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Inqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("inqty");

                entity.Property(e => e.Outqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("outqty");
            });

            modelBuilder.Entity<TempStockDuration1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_STOCK_DURATION1");

                entity.Property(e => e.Beginqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("beginqty");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Durationbegin)
                    .HasColumnType("datetime")
                    .HasColumnName("durationbegin");

                entity.Property(e => e.Durationend)
                    .HasColumnType("datetime")
                    .HasColumnName("durationend");

                entity.Property(e => e.Endqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("endqty");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Inqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("inqty");

                entity.Property(e => e.Outqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("outqty");
            });

            modelBuilder.Entity<TempStockSnreset>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("TEMP_STOCK_SNRESET_PK_IDS");

                entity.ToTable("TEMP_STOCK_SNRESET");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Flag)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("flag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.SnQty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("sn_qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TempStockcurrent1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_STOCKCURRENT");

                entity.Property(e => e.Asnid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("asnid");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Guid)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("guid");

                entity.Property(e => e.Totleqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("totleqty");

                entity.Property(e => e.Userno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userno");
            });

            modelBuilder.Entity<TempTableAllocateT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempTable_allocate_t");

                entity.Property(e => e.Cdatecode)
                    .HasMaxLength(200)
                    .HasColumnName("CDATECODE");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(200)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(200)
                    .HasColumnName("CPOSITION");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(200)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(200)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Cwarename)
                    .HasMaxLength(200)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Datecode)
                    .HasMaxLength(200)
                    .HasColumnName("datecode");

                entity.Property(e => e.Ioccupyqty)
                    .HasMaxLength(200)
                    .HasColumnName("IOCCUPYQTY");

                entity.Property(e => e.Iqty)
                    .HasMaxLength(200)
                    .HasColumnName("IQTY");

                entity.Property(e => e.Locknum)
                    .HasMaxLength(200)
                    .HasColumnName("LOCKNUM");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(200)
                    .HasColumnName("PALLETCODE");
            });

            modelBuilder.Entity<TempTableAsnInfoT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempTable_AsnInfo_t");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(200)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(200)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(200)
                    .HasColumnName("cinvname");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(200)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .HasMaxLength(200)
                    .HasColumnName("ID");

                entity.Property(e => e.Iquantity)
                    .HasMaxLength(200)
                    .HasColumnName("iquantity");

                entity.Property(e => e.Itype)
                    .HasMaxLength(200)
                    .HasColumnName("itype");
            });

            modelBuilder.Entity<TempTableInfoT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempTable_info_t");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(200)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(200)
                    .HasColumnName("cticketcode");
            });

            modelBuilder.Entity<TempTableStockPositionInfoT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempTable_StockPositionInfo_t");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(200)
                    .HasColumnName("CPOSITION");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(200)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.Datecode)
                    .HasMaxLength(200)
                    .HasColumnName("datecode");

                entity.Property(e => e.Ids)
                    .HasMaxLength(200)
                    .HasColumnName("IDS");

                entity.Property(e => e.Palletcode).HasMaxLength(200);

                entity.Property(e => e.Qty)
                    .HasMaxLength(200)
                    .HasColumnName("QTY");
            });

            modelBuilder.Entity<TempTableTempOutbillInfoT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempTable_TempOutbillInfo_t");

                entity.Property(e => e.Cdefine1).HasMaxLength(200);

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(200)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(200)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(200)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(200)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(200)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(200)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .HasMaxLength(200)
                    .HasColumnName("id");

                entity.Property(e => e.Iqty)
                    .HasMaxLength(200)
                    .HasColumnName("iqty");
            });

            modelBuilder.Entity<TempTvshowInfo>(entity =>
            {
                entity.ToTable("TEMP_TVShowInfo");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ERPCode");

                entity.Property(e => e.LineName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OutBillCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OutBillQty1).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OutBillQty2).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OutBillQty3).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OutBillQty4).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OutFb)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("OutFB");

                entity.Property(e => e.OutFkqty1)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OutFKQty1");

                entity.Property(e => e.OutFkqty2)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OutFKQty2");

                entity.Property(e => e.OutFkqty3)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OutFKQty3");

                entity.Property(e => e.OutFkqty4)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OutFKQty4");

                entity.Property(e => e.OutJhqty1)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OutJHQty1");

                entity.Property(e => e.OutJhqty2)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OutJHQty2");

                entity.Property(e => e.OutJhqty3)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OutJHQty3");

                entity.Property(e => e.OutJhqty4)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OutJHQty4");

                entity.Property(e => e.PallatCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pallatCode");

                entity.Property(e => e.PallatCodeCount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pallatCodeCount");

                entity.Property(e => e.PositionCodeOut)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PositionCode_out");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.StatusOut)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Status_out");

                entity.Property(e => e.Wl1Out)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WL1_out");

                entity.Property(e => e.Wl2Out)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WL2_out");

                entity.Property(e => e.Wl3Out)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WL3_out");

                entity.Property(e => e.Wl4Out)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WL4_out");
            });

            modelBuilder.Entity<TempUserArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMP_USER_AREA");

                entity.Property(e => e.Areaname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("areaname");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Userno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userno");
            });

            modelBuilder.Entity<Test1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("test1");

                entity.Property(e => e.Bfcount).HasColumnName("BFCount");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cranename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CRANENAME");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.CzsumCount).HasColumnName("CZSumCount");

                entity.Property(e => e.Djcount).HasColumnName("DJCount");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.PositionRate)
                    .HasColumnType("decimal(38, 16)")
                    .HasColumnName("positionRate");

                entity.Property(e => e.SpaceRate)
                    .HasColumnType("numeric(2, 2)")
                    .HasColumnName("spaceRate");

                entity.Property(e => e.Syzcount).HasColumnName("SYZCount");

                entity.Property(e => e.Totalqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("totalqty");

                entity.Property(e => e.Xzcount).HasColumnName("XZCount");
            });

            modelBuilder.Entity<TransLog>(entity =>
            {
                entity.HasKey(e => e.Sequence);

                entity.ToTable("TRANS_LOG");

                entity.Property(e => e.Sequence)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sequence");

                entity.Property(e => e.Errordate)
                    .HasColumnType("datetime")
                    .HasColumnName("errordate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Sqlcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sqlcode");

                entity.Property(e => e.Sqlerror)
                    .HasMaxLength(1256)
                    .IsUnicode(false)
                    .HasColumnName("sqlerror");
            });

            modelBuilder.Entity<TransactionTimeConfig>(entity =>
            {
                entity.ToTable("TRANSACTION_TIME_CONFIG");

                entity.HasIndex(e => e.Cticketcode, "INDX_CTICKETCODE");

                entity.HasIndex(e => new { e.TranErpcode, e.Cticketcode }, "INDX__TC");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.DisableTime)
                    .HasColumnType("datetime")
                    .HasColumnName("disable_time");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.TranErpcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tran_erpcode");

                entity.Property(e => e.TranTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tran_time");

                entity.Property(e => e.TranType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("tran_type");

                entity.Property(e => e.Typename)
                    .HasMaxLength(50)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<Transintefaceforasnchange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRANSINTEFACEFORASNCHANGE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinverpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinverpcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("entity_id");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("erpcode");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_time");

                entity.Property(e => e.Nownum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("nownum");

                entity.Property(e => e.Oldnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("oldnum");

                entity.Property(e => e.Transtype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transtype")
                    .HasDefaultValueSql("((35))");

                entity.Property(e => e.Type)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<TwBasePart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TW_BASE_PART");

                entity.Property(e => e.Bonded)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("bonded");

                entity.Property(e => e.Boxnum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("boxnum");

                entity.Property(e => e.Calias)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cbarrule)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cbarrule");

                entity.Property(e => e.Cdefaultcargo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cdefaultcargo");

                entity.Property(e => e.Cdefaultvendor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdefaultvendor");

                entity.Property(e => e.Cdefaultware)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cdefaultware");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinrule)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cinrule");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutrule)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("coutrule");

                entity.Property(e => e.Cpartname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpartname");

                entity.Property(e => e.Cpartnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpartnumber");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Csafeqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("csafeqty");

                entity.Property(e => e.Csafeqtyceiling)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("csafeqtyceiling");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ctype)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cversion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cversion");

                entity.Property(e => e.Cvolume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cvolume");

                entity.Property(e => e.Dash)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DASH");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.ExpDays)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("exp_days");

                entity.Property(e => e.Icw)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("icw");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Ineedcheck)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ineedcheck");

                entity.Property(e => e.Ineedwarn)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ineedwarn");

                entity.Property(e => e.Inw)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("inw");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Mtype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("mtype");

                entity.Property(e => e.Part)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART");

                entity.Property(e => e.PartFull)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART_FULL");

                entity.Property(e => e.PartLen).HasColumnName("PART_LEN");

                entity.Property(e => e.Productcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("productcode");

                entity.Property(e => e.RankFinal)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("RANK_FINAL");

                entity.Property(e => e.RankPre)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("RANK_PRE");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<TwBasePartPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TW_BASE_PART_PRE");

                entity.Property(e => e.Bonded)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("bonded");

                entity.Property(e => e.Boxnum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("boxnum");

                entity.Property(e => e.Calias)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cbarrule)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cbarrule");

                entity.Property(e => e.Cdefaultcargo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cdefaultcargo");

                entity.Property(e => e.Cdefaultvendor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdefaultvendor");

                entity.Property(e => e.Cdefaultware)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cdefaultware");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinrule)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cinrule");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutrule)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("coutrule");

                entity.Property(e => e.Cpartname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpartname");

                entity.Property(e => e.Cpartnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpartnumber");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Csafeqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("csafeqty");

                entity.Property(e => e.Csafeqtyceiling)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("csafeqtyceiling");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ctype)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cversion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cversion");

                entity.Property(e => e.Cvolume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cvolume");

                entity.Property(e => e.Dash)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DASH");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.ExpDays)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("exp_days");

                entity.Property(e => e.Icw)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("icw");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Ineedcheck)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ineedcheck");

                entity.Property(e => e.Ineedwarn)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ineedwarn");

                entity.Property(e => e.Inw)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("inw");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Mtype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("mtype");

                entity.Property(e => e.Part)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART");

                entity.Property(e => e.PartFull)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PART_FULL");

                entity.Property(e => e.PartLen).HasColumnName("PART_LEN");

                entity.Property(e => e.Productcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("productcode");

                entity.Property(e => e.RankPre)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("RANK_PRE");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNIT");
            });

            modelBuilder.Entity<TwBaseWh>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TW_BASE_WH");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cell)
                    .HasMaxLength(100)
                    .HasColumnName("CELL");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cx");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cy");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("imaxcapacity");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipermitmix");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority");

                entity.Property(e => e.IsAllo)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_allo");

                entity.Property(e => e.Islocked).HasColumnName("islocked");

                entity.Property(e => e.Ivolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ivolume");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.L)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Lastcstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastcstatus");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.Occupyvolume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("occupyvolume");

                entity.Property(e => e.Occupyweight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("occupyweight");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pallet_code");

                entity.Property(e => e.Productcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("productcode");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("volume");

                entity.Property(e => e.Volumeunit)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("volumeunit");

                entity.Property(e => e.Warehouseid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("weight");

                entity.Property(e => e.Weightunit)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("weightunit");

                entity.Property(e => e.X)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Y)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Z)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TwWh>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TW_WH");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cell)
                    .HasMaxLength(100)
                    .HasColumnName("CELL");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cx");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cy");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("imaxcapacity");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipermitmix");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority");

                entity.Property(e => e.IsAllo)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_allo");

                entity.Property(e => e.Islocked).HasColumnName("islocked");

                entity.Property(e => e.Ivolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ivolume");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Lastcstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastcstatus");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.Occupyvolume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("occupyvolume");

                entity.Property(e => e.Occupyweight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("occupyweight");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pallet_code");

                entity.Property(e => e.Productcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("productcode");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("volume");

                entity.Property(e => e.Volumeunit)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("volumeunit");

                entity.Property(e => e.Warehouseid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("weight");

                entity.Property(e => e.Weightunit)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("weightunit");
            });

            modelBuilder.Entity<TwWh01>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TW_WH01");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cell)
                    .HasMaxLength(100)
                    .HasColumnName("CELL");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cx");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cy");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("imaxcapacity");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipermitmix");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority");

                entity.Property(e => e.IsAllo)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_allo");

                entity.Property(e => e.Islocked).HasColumnName("islocked");

                entity.Property(e => e.Ivolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ivolume");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Lastcstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastcstatus");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.Occupyvolume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("occupyvolume");

                entity.Property(e => e.Occupyweight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("occupyweight");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pallet_code");

                entity.Property(e => e.Productcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("productcode");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("volume");

                entity.Property(e => e.Volumeunit)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("volumeunit");

                entity.Property(e => e.Warehouseid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("weight");

                entity.Property(e => e.Weightunit)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("weightunit");
            });

            modelBuilder.Entity<TwWh02>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TW_WH02");

                entity.Property(e => e.Cell)
                    .HasMaxLength(100)
                    .HasColumnName("CELL");

                entity.Property(e => e.Dt)
                    .HasMaxLength(4000)
                    .HasColumnName("DT");

                entity.Property(e => e.Hr)
                    .HasMaxLength(4000)
                    .HasColumnName("HR");

                entity.Property(e => e.P)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("QTY");
            });

            modelBuilder.Entity<TwWh03>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TW_WH03");

                entity.Property(e => e.Cell)
                    .HasMaxLength(100)
                    .HasColumnName("CELL");

                entity.Property(e => e.P)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("QTY");
            });

            modelBuilder.Entity<UserFunction>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Funcno, "CHECKERRORMSG_funcno");

                entity.HasIndex(e => e.Userno, "CHECKERRORMSG_userno");

                entity.Property(e => e.Extend1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("extend1");

                entity.Property(e => e.Funcname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("funcname");

                entity.Property(e => e.Funcno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("funcno");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Modno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("modno");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Userno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userno");
            });

            modelBuilder.Entity<UserFunction2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserFunction2");

                entity.Property(e => e.Extend1)
                    .HasMaxLength(20)
                    .HasColumnName("EXTEND1");

                entity.Property(e => e.Funcname)
                    .HasMaxLength(50)
                    .HasColumnName("FUNCNAME");

                entity.Property(e => e.Funcno)
                    .HasMaxLength(20)
                    .HasColumnName("FUNCNO");

                entity.Property(e => e.Modno)
                    .HasMaxLength(20)
                    .HasColumnName("MODNO");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .HasColumnName("USERNAME");

                entity.Property(e => e.Userno)
                    .HasMaxLength(50)
                    .HasColumnName("USERNO");
            });

            modelBuilder.Entity<V2Outasn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_OUTASN");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Ccreateownername)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownername");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cstatusname");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.Reasoncode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("reasoncode");

                entity.Property(e => e.Typename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<V2Outbill>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_OUTBILL");

                entity.Property(e => e.Ccreateownername)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownername");

                entity.Property(e => e.Coutasn)
                    .HasMaxLength(20)
                    .HasColumnName("coutasn");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cstatusname");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Debittime)
                    .HasColumnType("datetime")
                    .HasColumnName("debittime");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Outtype)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("outtype");
            });

            modelBuilder.Entity<V2OutbillD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_OUTBILL_D");

                entity.Property(e => e.AllocateDIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("allocate_d_ids");

                entity.Property(e => e.Allotype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("allotype");

                entity.Property(e => e.AsnDIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("asn_d_ids");

                entity.Property(e => e.AsrsNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_num");

                entity.Property(e => e.AsrsStatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_status");

                entity.Property(e => e.Callocateid)
                    .HasMaxLength(50)
                    .HasColumnName("callocateid");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cnewpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cnewpositioncode");

                entity.Property(e => e.Coutpersoncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coutpersoncode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstoppositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cstoppositioncode");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Doutdate)
                    .HasColumnType("datetime")
                    .HasColumnName("doutdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Isgoback)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("isgoback");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.Lineid).HasColumnName("lineid");

                entity.Property(e => e.Outasndlineid).HasColumnName("outasndlineid");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pallet_code");

                entity.Property(e => e.PartBond)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("part_bond");

                entity.Property(e => e.Sourcecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sourcecode");

                entity.Property(e => e.Wire)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wire");

                entity.Property(e => e.Wmstskid)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wmstskid");

                entity.Property(e => e.Wo)
                    .HasMaxLength(100)
                    .HasColumnName("wo");
            });

            modelBuilder.Entity<V2StockCurrentAdjust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_STOCK_CURRENT_ADJUST");

                entity.Property(e => e.Createowner)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createownername)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createownername");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cstatusname");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reason");

                entity.Property(e => e.Reviewtime)
                    .HasColumnType("datetime")
                    .HasColumnName("reviewtime");

                entity.Property(e => e.Reviewuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("reviewuser");
            });

            modelBuilder.Entity<VAllocate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ALLOCATE");

                entity.Property(e => e.Allotype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ALLOTYPE");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("critical_part");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Debitowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("debitowner");

                entity.Property(e => e.Debittime)
                    .HasColumnType("datetime")
                    .HasColumnName("debittime");

                entity.Property(e => e.Deliverytime)
                    .HasColumnType("datetime")
                    .HasColumnName("deliverytime");

                entity.Property(e => e.Deliveryuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("deliveryuser");

                entity.Property(e => e.Did)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("did");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Inasncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("inasncode");

                entity.Property(e => e.IsAllow)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_allow");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.MergeErp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("merge_erp");

                entity.Property(e => e.MergeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("merge_id");

                entity.Property(e => e.Otype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("otype");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Special)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("special");

                entity.Property(e => e.SpecialType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("special_type");
            });

            modelBuilder.Entity<VAllocateAuto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ALLOCATE_AUTO");

                entity.Property(e => e.Adcinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("adcinvcode");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Debitowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("debitowner");

                entity.Property(e => e.Debittime)
                    .HasColumnType("datetime")
                    .HasColumnName("debittime");

                entity.Property(e => e.Deliverytime)
                    .HasColumnType("datetime")
                    .HasColumnName("deliverytime");

                entity.Property(e => e.Deliveryuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("deliveryuser");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Typename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<VAllocateDreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ALLOCATE_DReport");

                entity.Property(e => e.Allotype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ALLOTYPE");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinpersoncode)
                    .HasMaxLength(100)
                    .HasColumnName("cinpersoncode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Ctoposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ctoposition");

                entity.Property(e => e.Ctopositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ctopositioncode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Rum).HasColumnName("rum");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");
            });

            modelBuilder.Entity<VAllocateL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ALLOCATE_L");

                entity.Property(e => e.Allotype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ALLOTYPE");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Cauditpersonname)
                    .HasMaxLength(100)
                    .HasColumnName("cauditpersonname");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("critical_part");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cstatusname");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Debitowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("debitowner");

                entity.Property(e => e.Debittime)
                    .HasColumnType("datetime")
                    .HasColumnName("debittime");

                entity.Property(e => e.Deliverytime)
                    .HasColumnType("datetime")
                    .HasColumnName("deliverytime");

                entity.Property(e => e.Deliveryuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("deliveryuser");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Inasncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("inasncode");

                entity.Property(e => e.IsAllow)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_allow");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.MergeErp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("merge_erp");

                entity.Property(e => e.MergeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("merge_id");

                entity.Property(e => e.Otype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("otype");

                entity.Property(e => e.Palletcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Special)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("special");

                entity.Property(e => e.SpecialType)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("special_type");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<VAsrsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_AsrsList");

                entity.Property(e => e.Acttime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("acttime");

                entity.Property(e => e.Billingstatus).HasColumnName("billingstatus");

                entity.Property(e => e.CaseType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("caseType");

                entity.Property(e => e.CaseTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("caseTypeName");

                entity.Property(e => e.Cmdmode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("cmdmode");

                entity.Property(e => e.CmdmodeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cmdmodeName");

                entity.Property(e => e.Cmdno)
                    .HasMaxLength(10)
                    .HasColumnName("cmdno");

                entity.Property(e => e.Cmdsno)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnName("cmdsno");

                entity.Property(e => e.Cmdsts)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("cmdsts");

                entity.Property(e => e.CmdstsName)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("cmdstsName");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .HasColumnName("createuser");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Endtime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("endtime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(20)
                    .HasColumnName("lineid");

                entity.Property(e => e.Loc)
                    .IsRequired()
                    .HasMaxLength(7)
                    .HasColumnName("loc");

                entity.Property(e => e.LocCode)
                    .HasMaxLength(100)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.LocName)
                    .HasMaxLength(100)
                    .HasColumnName("LOC_NAME");

                entity.Property(e => e.Locsize)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("locsize");

                entity.Property(e => e.Newloc)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("newloc");

                entity.Property(e => e.NewlocCode)
                    .HasMaxLength(100)
                    .HasColumnName("NEWLOC_CODE");

                entity.Property(e => e.NewlocName)
                    .HasMaxLength(100)
                    .HasColumnName("NEWLOC_NAME");

                entity.Property(e => e.Plcd51)
                    .HasMaxLength(10)
                    .HasColumnName("plcd51");

                entity.Property(e => e.Prt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("prt");

                entity.Property(e => e.Result)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("result");

                entity.Property(e => e.Rodid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("rodid");

                entity.Property(e => e.Stnno)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasColumnName("stnno");

                entity.Property(e => e.Trace)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("trace");

                entity.Property(e => e.Trndate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("trndate");

                entity.Property(e => e.Trnno)
                    .HasMaxLength(20)
                    .HasColumnName("trnno");

                entity.Property(e => e.Wmstskid).HasColumnName("wmstskid");
            });

            modelBuilder.Entity<VAsrsListNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_AsrsList_New");

                entity.Property(e => e.ActTime)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CaseType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("caseType");

                entity.Property(e => e.CaseTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("caseTypeName");

                entity.Property(e => e.CmdMode)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.CmdNo)
                    .HasMaxLength(10)
                    .HasColumnName("CmdNO");

                entity.Property(e => e.CmdSno)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.CmdSts)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.CmdmodeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cmdmodeName");

                entity.Property(e => e.CmdstsName)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("cmdstsName");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.CreateUser).HasMaxLength(100);

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(500)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.EndTime)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.LineId).HasMaxLength(20);

                entity.Property(e => e.Loc)
                    .IsRequired()
                    .HasMaxLength(7);

                entity.Property(e => e.LocCode)
                    .HasMaxLength(100)
                    .HasColumnName("LOC_CODE");

                entity.Property(e => e.LocName)
                    .HasMaxLength(100)
                    .HasColumnName("LOC_NAME");

                entity.Property(e => e.LocSize)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NewLoc)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.NewlocCode)
                    .HasMaxLength(100)
                    .HasColumnName("NEWLOC_CODE");

                entity.Property(e => e.NewlocName)
                    .HasMaxLength(100)
                    .HasColumnName("NEWLOC_NAME");

                entity.Property(e => e.Plcd51)
                    .HasMaxLength(10)
                    .HasColumnName("PLCD51");

                entity.Property(e => e.Prt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("PRT");

                entity.Property(e => e.Result)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RodId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RodID");

                entity.Property(e => e.StnNo)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.Trace)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TrnDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TrnNo).HasMaxLength(20);
            });

            modelBuilder.Entity<VBarCartonM>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_bar_carton_m");

                entity.Property(e => e.CartonName)
                    .HasMaxLength(50)
                    .HasColumnName("carton_name");

                entity.Property(e => e.CartonNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("carton_no");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");
            });

            modelBuilder.Entity<VBarPalletM>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_bar_pallet_m");

                entity.Property(e => e.CartonNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("carton_no");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Palletno)
                    .HasMaxLength(30)
                    .HasColumnName("palletno");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<VBarPalletMSn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_bar_pallet_m_sn");

                entity.Property(e => e.CartonNo)
                    .HasMaxLength(50)
                    .HasColumnName("carton_no");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Palletno)
                    .HasMaxLength(30)
                    .HasColumnName("palletno");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");
            });

            modelBuilder.Entity<VBarSnSplitDQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BAR_SN_SPLIT_D_Query");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.NewSn)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NEW_SN");

                entity.Property(e => e.NewSnQty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("NEW_SN_QTY");

                entity.Property(e => e.Sn)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN");

                entity.Property(e => e.SnQty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SN_QTY");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");
            });

            modelBuilder.Entity<VBarSnSplitsquery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BAR_SN_SPLITSQuery");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpartname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpartname");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.SplitSn)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("split_sn");

                entity.Property(e => e.SplitSnQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("split_sn_qty");
            });

            modelBuilder.Entity<VBaseArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE_AREA");

                entity.Property(e => e.AreaName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("area_name");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Flag)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("flag");

                entity.Property(e => e.HandoverCargo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("handover_cargo");

                entity.Property(e => e.HandoverCargoName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("handover_cargo_name");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.IsControl)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("is_control");

                entity.Property(e => e.IsControlNew)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("is_control_New");

                entity.Property(e => e.Memo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("memo");
            });

            modelBuilder.Entity<VBaseBarSn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_base_bar_sn");

                entity.Property(e => e.BarType)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("BAR_TYPE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.CinvcodeName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode_name");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.DateCode)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");

                entity.Property(e => e.SnType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SN_TYPE");

                entity.Property(e => e.Vendor)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VBaseBarSnquery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE_BAR_SNQuery");

                entity.Property(e => e.BarType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("bar_type")
                    .IsFixedLength(true);

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("batch_number");

                entity.Property(e => e.BatchQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("batch_qty");

                entity.Property(e => e.Bonded)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("bonded")
                    .IsFixedLength(true);

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.CinvcodeName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode_name");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(100)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.Datecode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("datecode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(100)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_time");

                entity.Property(e => e.PoNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("po_number");

                entity.Property(e => e.ProductionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("production_date");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.SerialNo).HasColumnName("serialNO");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");

                entity.Property(e => e.SnType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("sn_type")
                    .IsFixedLength(true);

                entity.Property(e => e.Validitydate)
                    .HasColumnType("decimal(6, 0)")
                    .HasColumnName("validitydate");

                entity.Property(e => e.Vendor)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("vendor");

                entity.Property(e => e.VendorName)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("vendor_name");
            });

            modelBuilder.Entity<VBaseCargospace>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BASE_CARGOSPACE");

                entity.Property(e => e.AreaName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("area_name");

                entity.Property(e => e.Bonded)
                    .HasMaxLength(1)
                    .HasColumnName("BONDED");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CALIAS");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CMEMO");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITION");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CTYPE");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUSETYPE");

                entity.Property(e => e.Cwarename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CWARENAME");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CX");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CY");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CZ");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("DEXPIREDATE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IHEIGHT");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ILENGTH");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IMAXCAPACITY");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("IOCCUPYQTY");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("IPERMITMIX");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("IPRIORITY");

                entity.Property(e => e.Ivolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IVOLUME");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IWIDTH");

                entity.Property(e => e.Warehouseid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WAREHOUSEID");
            });

            modelBuilder.Entity<VBaseCargospaceL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE_CARGOSPACE_L");

                entity.Property(e => e.Acdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("acdefine1");

                entity.Property(e => e.ApalletCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("apallet_code");

                entity.Property(e => e.AreaName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("area_name");

                entity.Property(e => e.Bonded)
                    .HasMaxLength(1)
                    .HasColumnName("bonded");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("cstatusname");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cwarename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cx");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cy");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("imaxcapacity");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipermitmix");

                entity.Property(e => e.Ipermitmixname)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ipermitmixname");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority");

                entity.Property(e => e.IsAllo)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_allo");

                entity.Property(e => e.IsAlloname)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("is_alloname");

                entity.Property(e => e.Ivolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ivolume");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.Qy).HasColumnName("qy");

                entity.Property(e => e.Vid)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("vid");

                entity.Property(e => e.Warehouseid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");

                entity.Property(e => e.Zdl).HasColumnName("zdl");
            });

            modelBuilder.Entity<VBaseCargospacePk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE_CARGOSPACE_PK");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.Isused)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISUSED");

                entity.Property(e => e.Wtype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wtype");
            });

            modelBuilder.Entity<VBaseCargospaceSc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE_CARGOSPACE_SC");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.IsTemporary)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Warehouseid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VBaseCargospaceT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE_CARGOSPACE_T");

                entity.Property(e => e.AreaName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("area_name");

                entity.Property(e => e.Bonded)
                    .HasMaxLength(1)
                    .HasColumnName("BONDED");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CALIAS");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE1");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CMEMO");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITION");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CTYPE");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUSETYPE");

                entity.Property(e => e.Cwarename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CWARENAME");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CX");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CY");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CZ");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("DEXPIREDATE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IHEIGHT");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ILENGTH");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IMAXCAPACITY");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("IOCCUPYQTY");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("IPERMITMIX");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("IPRIORITY");

                entity.Property(e => e.Ivolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IVOLUME");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IWIDTH");

                entity.Property(e => e.Warehouseid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WAREHOUSEID");
            });

            modelBuilder.Entity<VBaseCargospaceTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_base_cargospace_temp");

                entity.Property(e => e.Erp编码)
                    .IsUnicode(false)
                    .HasColumnName("ERP编码");

                entity.Property(e => e.X).IsUnicode(false);

                entity.Property(e => e.Y)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Z).IsUnicode(false);

                entity.Property(e => e.优先级).IsRequired();

                entity.Property(e => e.储位名称).IsRequired();

                entity.Property(e => e.储位编码).IsRequired();

                entity.Property(e => e.助记码).IsUnicode(false);

                entity.Property(e => e.区域).IsUnicode(false);

                entity.Property(e => e.所属仓库id)
                    .IsRequired()
                    .HasColumnName("所属仓库ID");

                entity.Property(e => e.状态)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.用途).IsUnicode(false);

                entity.Property(e => e.种类).IsUnicode(false);

                entity.Property(e => e.终止日期).IsRequired();
            });

            modelBuilder.Entity<VBaseCargospacelistQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE_CARGOSPACEListQuery");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cwareid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cx");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cy");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("imaxcapacity");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipermitmix");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority");

                entity.Property(e => e.IsAllo)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_allo");

                entity.Property(e => e.Ivolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ivolume");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Lastcstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastcstatus");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lineid");

                entity.Property(e => e.Occupyvolume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("occupyvolume");

                entity.Property(e => e.Occupyweight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("occupyweight");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pallet_code");

                entity.Property(e => e.Productcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("productcode");

                entity.Property(e => e.Volume)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("volume");

                entity.Property(e => e.Volumeunit)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("volumeunit");

                entity.Property(e => e.WId)
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("wID");

                entity.Property(e => e.WName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("wName");

                entity.Property(e => e.Warehouseid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("weight");

                entity.Property(e => e.Weightunit)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("weightunit");
            });

            modelBuilder.Entity<VBaseClient>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE_CLIENT");

                entity.Property(e => e.Caddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("caddress");

                entity.Property(e => e.Calias)
                    .HasMaxLength(50)
                    .HasColumnName("calias");

                entity.Property(e => e.Cclientid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientid");

                entity.Property(e => e.Cclientname)
                    .IsRequired()
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclientname");

                entity.Property(e => e.Ccontactperson)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccontactperson");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cphone");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("cstatusname");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ilever)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ilever");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");
            });

            modelBuilder.Entity<VBaseOperator>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE_OPERATOR");

                entity.Property(e => e.Caccountid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("caccountid");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Ccreateowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateowner");

                entity.Property(e => e.Cdepartment)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdepartment");

                entity.Property(e => e.Cduty)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cduty");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Coperatorname)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coperatorname");

                entity.Property(e => e.Cphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cphone");

                entity.Property(e => e.Cshift)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cshift");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.CstatusNew)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("cstatus_New");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");
            });

            modelBuilder.Entity<VBasePartBom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE_PART_BOM");

                entity.Property(e => e.Cpartname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CPARTNAME");

                entity.Property(e => e.Cpartnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CPARTNUMBER");

                entity.Property(e => e.Ctype)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CTYPE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<VBasePartTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_base_part_temp");

                entity.Property(e => e.Erp编码).HasColumnName("ERP编码");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");
            });

            modelBuilder.Entity<VBaseVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE_VENDOR");

                entity.Property(e => e.Caddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("caddress");

                entity.Property(e => e.Calias)
                    .HasMaxLength(50)
                    .HasColumnName("calias");

                entity.Property(e => e.Ccontactperson)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccontactperson");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cphone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cphone");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ctnpe)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ctnpe");

                entity.Property(e => e.Cvendor)
                    .IsRequired()
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cvendor");

                entity.Property(e => e.Cvendorid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cvendorid");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Ilevel)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ilevel");
            });

            modelBuilder.Entity<VBaseWarehouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BASE_WAREHOUSE");

                entity.Property(e => e.Bonded)
                    .HasMaxLength(1)
                    .HasColumnName("bonded");

                entity.Property(e => e.Bondedname)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("bondedname");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine1name)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1name");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cstatusname");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Leader)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("leader");

                entity.Property(e => e.Leadercode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("leadercode");

                entity.Property(e => e.Leaderphone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("leaderphone");
            });

            modelBuilder.Entity<VBaseWarehouseTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_base_warehouse_temp");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");
            });

            modelBuilder.Entity<VCargospaceReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CARGOSPACE_Report");

                entity.Property(e => e.Calias)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("imaxcapacity");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipermitmix");

                entity.Property(e => e.Ipermitmixname)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ipermitmixname");

                entity.Property(e => e.Statusname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("statusname");
            });

            modelBuilder.Entity<VChayireport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_CHAYIReport");

                entity.Property(e => e.Actualtime0)
                    .HasColumnType("datetime")
                    .HasColumnName("actualtime0");

                entity.Property(e => e.Actualtime1)
                    .HasColumnType("datetime")
                    .HasColumnName("actualtime1");

                entity.Property(e => e.Ccheckname)
                    .HasMaxLength(30)
                    .HasColumnName("ccheckname");

                entity.Property(e => e.Ccheckpersoncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccheckpersoncode");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Checkcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CHECKCode");

                entity.Property(e => e.Checktype)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("checktype");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Dcheckdate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("dcheckdate");

                entity.Property(e => e.Diffcount0)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("diffcount0");

                entity.Property(e => e.Diffcount1)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("diffcount1");

                entity.Property(e => e.Iqt)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("iqt");

                entity.Property(e => e.Iqtnow0)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("iqtnow0");

                entity.Property(e => e.Iqtnow1)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("iqtnow1");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VChayireportReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_CHAYIReport_Report");

                entity.Property(e => e.ActualTime0).HasColumnType("datetime");

                entity.Property(e => e.ActualTime1).HasColumnType("datetime");

                entity.Property(e => e.Ccheckname)
                    .HasMaxLength(30)
                    .HasColumnName("CCHECKNAME");

                entity.Property(e => e.Ccheckpersoncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccheckpersoncode");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cerpcode).HasMaxLength(30);

                entity.Property(e => e.Checkcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CHECKCode");

                entity.Property(e => e.Checktype)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKTYPE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITION");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CWAREID");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CWARENAME");

                entity.Property(e => e.Dcheckdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DCHECKDATE");

                entity.Property(e => e.DiffCount0)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("diffCount0");

                entity.Property(e => e.DiffCount1)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("diffCount1");

                entity.Property(e => e.Iqt)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("IQT");

                entity.Property(e => e.Iqtnow0)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("IQTNow0");

                entity.Property(e => e.Iqtnow1)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("IQTNow1");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VCinvcodeControl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_cinvcode_control");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Flag)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("flag");

                entity.Property(e => e.Mo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("mo");
            });

            modelBuilder.Entity<VCmdAgvTask>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CMD_AgvTask");

                entity.Property(e => e.Agvcode)
                    .HasMaxLength(50)
                    .HasColumnName("agvcode");

                entity.Property(e => e.Clientcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("clientcode");

                entity.Property(e => e.CreateOwner).HasMaxLength(20);

                entity.Property(e => e.Createtime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Data)
                    .HasMaxLength(2000)
                    .HasColumnName("data");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("id");

                entity.Property(e => e.Interfacename)
                    .HasMaxLength(64)
                    .HasColumnName("interfacename");

                entity.Property(e => e.Materiallot)
                    .HasMaxLength(32)
                    .HasColumnName("materiallot");

                entity.Property(e => e.Podcode)
                    .HasMaxLength(16)
                    .HasColumnName("podcode");

                entity.Property(e => e.Poddir)
                    .HasMaxLength(4)
                    .HasColumnName("poddir");

                entity.Property(e => e.Podtyp)
                    .HasMaxLength(50)
                    .HasColumnName("podtyp");

                entity.Property(e => e.Priority)
                    .HasMaxLength(32)
                    .HasColumnName("priority");

                entity.Property(e => e.Reqcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("reqcode");

                entity.Property(e => e.Reqtime)
                    .HasMaxLength(100)
                    .HasColumnName("reqtime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.Taskcode)
                    .HasMaxLength(32)
                    .HasColumnName("taskcode");

                entity.Property(e => e.Tasktyp)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasColumnName("tasktyp");

                entity.Property(e => e.Tokencode)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("tokencode");

                entity.Property(e => e.Value).HasColumnName("value");

                entity.Property(e => e.Vendorname)
                    .HasMaxLength(50)
                    .HasColumnName("vendorname");

                entity.Property(e => e.Wbcode)
                    .HasMaxLength(32)
                    .HasColumnName("wbcode");
            });

            modelBuilder.Entity<VCmdMst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CMD_MST");

                entity.Property(e => e.ActTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CmdMode)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.CmdSno)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.CmdSts)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.EndTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineId).HasMaxLength(20);

                entity.Property(e => e.Loc)
                    .HasMaxLength(11)
                    .HasColumnName("LOC");

                entity.Property(e => e.Msg)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MSG");

                entity.Property(e => e.NewLoc)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Packageno)
                    .HasMaxLength(100)
                    .HasColumnName("PACKAGENO");

                entity.Property(e => e.Prt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("PRT");

                entity.Property(e => e.Remark)
                    .HasMaxLength(800)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Result)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.StnNo)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.TaskNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TaskNO");

                entity.Property(e => e.TrnDate)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VCmdMstLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CMD_MST_LOG");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LineId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Msg)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Packageno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGENO");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VCmdMstRgv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_CMD_MST_RGV");

                entity.Property(e => e.ActTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AreaId).HasMaxLength(50);

                entity.Property(e => e.BillingNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BillingNO");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .HasColumnName("CDEFINE1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .HasColumnName("CDEFINE2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(50)
                    .HasColumnName("CDEFINE3");

                entity.Property(e => e.CmdMode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CmdNo)
                    .HasMaxLength(10)
                    .HasColumnName("CmdNO");

                entity.Property(e => e.CmdSno)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cmdsts)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CraneStataus).HasMaxLength(50);

                entity.Property(e => e.CreateUser).HasMaxLength(100);

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(100)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.EndTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Height).HasMaxLength(50);

                entity.Property(e => e.LineId).HasMaxLength(10);

                entity.Property(e => e.Loc)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.LocSize)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Msg)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("msg");

                entity.Property(e => e.NewLoc)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Packageno)
                    .HasMaxLength(100)
                    .HasColumnName("PACKAGENO");

                entity.Property(e => e.Pc)
                    .HasMaxLength(50)
                    .HasColumnName("PC");

                entity.Property(e => e.Plcd51)
                    .HasMaxLength(10)
                    .HasColumnName("PLCD51");

                entity.Property(e => e.Prt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PRT");

                entity.Property(e => e.Reason).HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Result)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RodId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RodID");

                entity.Property(e => e.StnNo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Trace)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TrnDate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TrnNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Updata).HasColumnName("updata");
            });

            modelBuilder.Entity<VDiffTimeReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_DiffTime_Report");

                entity.Property(e => e.Calias)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.LastDate).HasColumnType("datetime");

                entity.Property(e => e.LastInDate).HasColumnType("datetime");

                entity.Property(e => e.LastOutDate).HasColumnType("datetime");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QTY");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");
            });

            modelBuilder.Entity<VDigitalsignage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_digitalsignage");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Oassitallno)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OASSITALLNO");

                entity.Property(e => e.Oassitallyes)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OASSITALLYES");

                entity.Property(e => e.Oassitpartno)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OASSITPARTNO");

                entity.Property(e => e.Obillallno)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OBILLALLNO");

                entity.Property(e => e.Obillallyes)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OBILLALLYES");

                entity.Property(e => e.Obillpartno)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OBILLPARTNO");

                entity.Property(e => e.Partcount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("PARTCOUNT");

                entity.Property(e => e.Qallcinvcode)
                    .HasColumnType("ntext")
                    .HasColumnName("QALLCINVCODE");

                entity.Property(e => e.Qallyes)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("QALLYES");

                entity.Property(e => e.RespDept)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("RESP_DEPT");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.StartDateMo)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date_mo");

                entity.Property(e => e.StartQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("START_QUANTITY");

                entity.Property(e => e.Statename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATENAME");

                entity.Property(e => e.Tempbillallno)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("TEMPBILLALLNO");

                entity.Property(e => e.Tempbillallyes)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("TEMPBILLALLYES");

                entity.Property(e => e.Tempbillpartno)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("TEMPBILLPARTNO");
            });

            modelBuilder.Entity<VEbsTranTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("V_EBS_TRAN_TEST");

                entity.Property(e => e.DsNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ds_num");

                entity.Property(e => e.Item)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("item");

                entity.Property(e => e.Locator)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("locator");

                entity.Property(e => e.ReceiptNum)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("receipt_num");

                entity.Property(e => e.SourceCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("source_code");

                entity.Property(e => e.SourceName)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("source_name");

                entity.Property(e => e.SubinventoryCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("subinventory_code");

                entity.Property(e => e.TransactionActionName)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("transaction_action_name");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("transaction_date");

                entity.Property(e => e.TransactionId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_id");

                entity.Property(e => e.TransactionQuantity)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_quantity");

                entity.Property(e => e.TransactionReference)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("transaction_reference");

                entity.Property(e => e.TransactionSourceId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("transaction_source_id");

                entity.Property(e => e.TransactionSourceName)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("transaction_source_name");

                entity.Property(e => e.TransactionTypeName)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("transaction_type_name");

                entity.Property(e => e.TransferLocator)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("transfer_locator");

                entity.Property(e => e.TransferSubinventory)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("transfer_subinventory");

                entity.Property(e => e.TrxSourceLineId)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("trx_source_line_id");

                entity.Property(e => e.WmsNum)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("wms_num");

                entity.Property(e => e.WmsUser)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("wms_user");
            });

            modelBuilder.Entity<VEmtInasnlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_EMT_INASNList");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("DCREATETIME");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Extend1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("extend1");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.KeyId).HasColumnName("keyID");

                entity.Property(e => e.Ownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OWNERCODE");

                entity.Property(e => e.Userno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("userno");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORKTYPE");

                entity.Property(e => e.WorktypeName)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("worktypeName");
            });

            modelBuilder.Entity<VEmtInemtlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_EMT_INEMTList");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Creatertime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATERTIME");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("CRITICAL_PART");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PALLETCODE");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QTY");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORKTYPE");

                entity.Property(e => e.WorktypeName)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("worktypeName");
            });

            modelBuilder.Entity<VGdMinsets>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_gd_minsets");

                entity.Property(e => e.Gdno)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("gdno");

                entity.Property(e => e.Minsets)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("minsets");
            });

            modelBuilder.Entity<VGetInAsnTen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_GetInAsn_Ten");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CAUDITPERSONCODE");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CCREATEOWNERCODE");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Cpo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CPO");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DAUDITDATE");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("DCREATETIME");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Itype)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ITYPE");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORKTYPE");

                entity.Property(e => e.WorktypeName)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("worktypeName");
            });

            modelBuilder.Entity<VGetPoline>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_GetPOLine");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Poline)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("poline");

                entity.Property(e => e.Pono)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pono");
            });

            modelBuilder.Entity<VGetPolist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_GetPOList");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Pono)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pono");

                entity.Property(e => e.Vendorid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("vendorid");

                entity.Property(e => e.Vendorname)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("vendorname");
            });

            modelBuilder.Entity<VImportDateList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ImportDateList");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(30)
                    .HasColumnName("CREATE_OWNER");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATE_TIME");

                entity.Property(e => e.Departmentname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENTNAME");

                entity.Property(e => e.Departmentno)
                    .HasMaxLength(100)
                    .HasColumnName("DEPARTMENTNO");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.Iscountjobtime)
                    .HasMaxLength(10)
                    .HasColumnName("ISCOUNTJOBTIME");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(30)
                    .HasColumnName("LAST_UPD_OWNER");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPD_TIME");

                entity.Property(e => e.Linebody)
                    .HasMaxLength(6)
                    .HasColumnName("LINEBODY");

                entity.Property(e => e.Models)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Onlinetime)
                    .HasColumnType("datetime")
                    .HasColumnName("ONLINETIME");

                entity.Property(e => e.SecCinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SEC_CINVCODE");

                entity.Property(e => e.Shift)
                    .HasMaxLength(20)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.Special)
                    .HasMaxLength(50)
                    .HasColumnName("SPECIAL");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Wo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("WO");

                entity.Property(e => e.WoQty)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("WO_QTY");
            });

            modelBuilder.Entity<VInAsnEmt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_InAsnEmt");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(100)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Itype)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("itype");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORKTYPE");

                entity.Property(e => e.WorktypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("worktypeName");
            });

            modelBuilder.Entity<VInAsnPo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_InAsn_PO");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cpartname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpartname");

                entity.Property(e => e.Cpartnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpartnumber");

                entity.Property(e => e.LineNum)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LINE_NUM");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.ReceiptLineNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("RECEIPT_LINE_NUM");

                entity.Property(e => e.Segment1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENT1");
            });

            modelBuilder.Entity<VInAssitList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_InAssitList");

                entity.Property(e => e.Casnid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("casnid");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cpo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpo");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Cvender)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cvender");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Itype)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("itype");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<VInMergePallete>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IN_MERGE_PALLETE");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Inasncode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INASNCODE");

                entity.Property(e => e.InasncodePallet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INASNCODE_PALLET");

                entity.Property(e => e.Inasnid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INASNID");

                entity.Property(e => e.InbillcodePallet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INBILLCODE_PALLET");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.OutasncodePallet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTASNCODE_PALLET");

                entity.Property(e => e.OutbillcodePallet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTBILLCODE_PALLET");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");
            });

            modelBuilder.Entity<VInOrOutType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_InOrOutType");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Enable)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("enable");

                entity.Property(e => e.T)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Typeid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typeid");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<VInasn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INASN");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cauditpersoncode");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(100)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cpo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpo");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.InasnIaId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("inasn_ia_id");

                entity.Property(e => e.Isspecialwipreturn)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("isspecialwipreturn");

                entity.Property(e => e.Itype)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("itype");

                entity.Property(e => e.Oby).HasColumnName("oby");

                entity.Property(e => e.Reasoncode)
                    .HasMaxLength(30)
                    .HasColumnName("reasoncode");

                entity.Property(e => e.Reasoncontent)
                    .HasMaxLength(100)
                    .HasColumnName("reasoncontent");

                entity.Property(e => e.Statusname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("statusname");

                entity.Property(e => e.Typename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORKTYPE");

                entity.Property(e => e.WorktypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("worktypeName");
            });

            modelBuilder.Entity<VInasnD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Inasn_D");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineId).HasColumnName("lineId");
            });

            modelBuilder.Entity<VInasnDEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Inasn_D_Edit");

                entity.Property(e => e.Calias)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cpo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpo");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.InbillQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("inbill_qty");

                entity.Property(e => e.InbilledQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("inbilled_qty");

                entity.Property(e => e.Ipoline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipoline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineId).HasColumnName("lineId");

                entity.Property(e => e.Mstatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("mstatus");

                entity.Property(e => e.PoLinenumbername)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("po_linenumbername");

                entity.Property(e => e.PoNumbername)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("po_numbername");

                entity.Property(e => e.Productcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("productcode");
            });

            modelBuilder.Entity<VInasnReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INASN_REPORT");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cpo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpo");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InassitQty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("inassit_qty");

                entity.Property(e => e.InbillQty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("inbill_qty");

                entity.Property(e => e.InbilledQty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("inbilled_qty");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Iswebcreatebill).HasColumnName("iswebcreatebill");

                entity.Property(e => e.Iswebcreatebillname)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("iswebcreatebillname");

                entity.Property(e => e.Itype)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("itype");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VInasnsplit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INASNSplit");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CBATCH");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODELINE");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CINVBARCODE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.InBillQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("InBill_Qty");

                entity.Property(e => e.InBilledQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("InBilled_Qty");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("IQUANTITY");

                entity.Property(e => e.LessQty).HasColumnType("decimal(19, 6)");

                entity.Property(e => e.Mstatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MSTATUS");

                entity.Property(e => e.PoLinenumbername)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PO_LINENUMBERNAME");

                entity.Property(e => e.PoNumbername)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PO_NUMBERNAME");
            });

            modelBuilder.Entity<VInassitReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INASSIT_Report");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinpersoncode)
                    .HasMaxLength(100)
                    .HasColumnName("cinpersoncode");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cwareid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Inasncticketcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inasncticketcode");

                entity.Property(e => e.Inassicticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("inassicticketcode");

                entity.Property(e => e.Intype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("intype");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Typename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VInbill>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INBILL");

                entity.Property(e => e.Asncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("asncode");

                entity.Property(e => e.Casnid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("casnid");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(100)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(100)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Debitowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("debitowner");

                entity.Property(e => e.Debittime)
                    .HasColumnType("datetime")
                    .HasColumnName("debittime");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.Operationtype).HasColumnName("operationtype");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("status_name");

                entity.Property(e => e.Typename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .HasColumnName("WORKTYPE");

                entity.Property(e => e.WorktypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("worktypeName");
            });

            modelBuilder.Entity<VInbillD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INBILL_D");

                entity.Property(e => e.AsndLineId).HasColumnName("AsndLineID");

                entity.Property(e => e.AsrsStatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_status");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinpersoncode)
                    .HasMaxLength(100)
                    .HasColumnName("cinpersoncode");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Iasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("iasnline");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineId).HasColumnName("LineID");

                entity.Property(e => e.PalletCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pallet_code");
            });

            modelBuilder.Entity<VInbillDandSn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INBILL_DAndSN");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.CstatusName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cstatus_name");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Inbilltype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("inbilltype");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Lineid).HasColumnName("lineid");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");
            });

            modelBuilder.Entity<VInbillDsn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INBILL_DSN");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(100)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.DisplayType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DisplayTYPE");

                entity.Property(e => e.Furnaceno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("furnaceno");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.InbillDIds)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inbill_d_ids");

                entity.Property(e => e.InbillId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inbill_id");

                entity.Property(e => e.Lastvpdowner)
                    .HasMaxLength(100)
                    .HasColumnName("lastvpdowner");

                entity.Property(e => e.Lastvpdtime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastvpdtime");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.Rulecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULECODE");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");

                entity.Property(e => e.SnCode20)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE20");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype");

                entity.Property(e => e.Transedtime)
                    .HasColumnType("datetime")
                    .HasColumnName("transedtime");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("worktype")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VInbillReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INBILL_REPORT");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(100)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.TypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VInoutType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INOutType");

                entity.Property(e => e.Attribute1)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ATTRIBUTE1");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATEDATE");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.DisableDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DISABLE_DATE");

                entity.Property(e => e.Enable)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ENABLE");

                entity.Property(e => e.Enabledate)
                    .HasColumnType("datetime")
                    .HasColumnName("ENABLEDATE");

                entity.Property(e => e.Enableuser)
                    .HasMaxLength(100)
                    .HasColumnName("ENABLEUSER");

                entity.Property(e => e.IsMatchSo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsMatchVendor)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsZf)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IS_ZF");

                entity.Property(e => e.T)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionActionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTION_ACTION_ID");

                entity.Property(e => e.TransactionSourceTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANSACTION_SOURCE_TYPE_ID");

                entity.Property(e => e.TypeClass)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPE_CLASS");

                entity.Property(e => e.Typeid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPEID");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<VInpo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INPO");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Podate)
                    .HasColumnType("datetime")
                    .HasColumnName("podate");

                entity.Property(e => e.Pono)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pono");

                entity.Property(e => e.Potype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("potype");

                entity.Property(e => e.Vendorid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("vendorid");

                entity.Property(e => e.Vendorname)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("vendorname");
            });

            modelBuilder.Entity<VInpubomcount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_INPUBOMCOUNT");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<VJianhuoReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_JIANHUO_REPORT");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cerpcode1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode1");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Coutpersoncode)
                    .HasMaxLength(100)
                    .HasColumnName("coutpersoncode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Doutdate)
                    .HasColumnType("datetime")
                    .HasColumnName("doutdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.Outassitcticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outassitcticketcode");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VMergeErpCodeReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Merge_ErpCode_Report");

                entity.Property(e => e.Callback).HasColumnName("CALLBACK");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Mergecode).HasColumnName("MERGECODE");

                entity.Property(e => e.Nosmtcode).HasColumnName("NOSMTCODE");

                entity.Property(e => e.Psongcode).HasColumnName("PSONGCODE");

                entity.Property(e => e.Smtcode).HasColumnName("SMTCODE");

                entity.Property(e => e.Ultracode).HasColumnName("ULTRACODE");
            });

            modelBuilder.Entity<VMergeErpCodeReportTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Merge_ErpCode_Report_test");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");
            });

            modelBuilder.Entity<VMixedIngredients>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_MixedIngredients");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Kmixedqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("KMIXEDQTY");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OTYPE");

                entity.Property(e => e.Otypename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("OTYPENAME");

                entity.Property(e => e.Sumqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("SUMQTY");

                entity.Property(e => e.Wmixedqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("WMIXEDQTY");

                entity.Property(e => e.Ymixedqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("YMIXEDQTY");
            });

            modelBuilder.Entity<VNotusePositioncode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_notuse_positioncode");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.PositionCode).HasMaxLength(100);
            });

            modelBuilder.Entity<VOperatorArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_operator_area");

                entity.Property(e => e.Caccountid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("caccountid");

                entity.Property(e => e.Ccargoid)
                    .HasMaxLength(100)
                    .HasColumnName("ccargoid");
            });

            modelBuilder.Entity<VOraTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ORA_TEST");

                entity.Property(e => e.Cpo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CPO");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("DCREATETIME");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Itype)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("itype");

                entity.Property(e => e.Itype2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("itype2");
            });

            modelBuilder.Entity<VOrderFinishStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OrderFinish_Stock");

                entity.Property(e => e.AllQty).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CinvCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CinvName)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.CustomId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CustomName).HasMaxLength(100);

                entity.Property(e => e.CustomOrderNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.LastUpdateTime).HasColumnType("datetime");

                entity.Property(e => e.LockQty).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OrderNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VOutAsnAdj>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OutAsn_Adj");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .HasColumnName("CAUDITPERSONCODE");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CCREATEOWNERCODE");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CSO");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DAUDITDATE");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("DCREATETIME");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<VOutBillAdj>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OutBill_Adj");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .HasColumnName("cauditpersoncode");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.ClassCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("class_code");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("critical_part");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.FgCinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fg_cinvcode");

                entity.Property(e => e.FgQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("fg_qty");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.IsAssiting)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_assiting");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge");

                entity.Property(e => e.IsSemi)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_semi");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt");

                entity.Property(e => e.IsWhole)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_whole");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.MergeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("merge_id");

                entity.Property(e => e.OutVendor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("out_vendor");

                entity.Property(e => e.Reasoncode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("reasoncode");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");

                entity.Property(e => e.SpecialOut)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("special_out");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VOutMixedList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OutMixedList");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Ids).HasColumnName("IDS");

                entity.Property(e => e.Sumqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("SUMQTY");

                entity.Property(e => e.Ymixedqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("YMIXEDQTY");
            });

            modelBuilder.Entity<VOutReturnIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OutReturn_In");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<VOutasnD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Outasn_D");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("iquantity");
            });

            modelBuilder.Entity<VOutasnDL>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTASN_D_L");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.IsSmt)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_smt");

                entity.Property(e => e.Isoline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("isoline");

                entity.Property(e => e.Manual)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("manual");

                entity.Property(e => e.Site)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("site");
            });

            modelBuilder.Entity<VOutasnDl1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTASN_DL");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbatch");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Isoline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("isoline");

                entity.Property(e => e.Lineid).HasColumnName("lineid");

                entity.Property(e => e.Mstatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MSTATUS");

                entity.Property(e => e.OutBillQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OutBill_Qty");

                entity.Property(e => e.OutBilledQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OutBilled_Qty");
            });

            modelBuilder.Entity<VOutasnReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTASN_REPORT");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Iswebcreatebill).HasColumnName("iswebcreatebill");

                entity.Property(e => e.Iswebcreatebillname)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("iswebcreatebillname");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.OutassitQty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("outassit_qty");

                entity.Property(e => e.OutbillQty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("outbill_qty");

                entity.Property(e => e.OutbilledQty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("outbilled_qty");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VOutasnSplit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTASN_SPLIT");

                entity.Property(e => e.Cbatch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CBATCH");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("CERPCODELINE");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CINVBARCODE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CSO");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("IQUANTITY");

                entity.Property(e => e.Isoline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ISOLINE");

                entity.Property(e => e.LessQty).HasColumnType("decimal(19, 6)");

                entity.Property(e => e.OutBillQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OutBill_Qty");

                entity.Property(e => e.OutBilledQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("OutBilled_Qty");

                entity.Property(e => e.Outasnid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTASNID");
            });

            modelBuilder.Entity<VOutasnlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTASNList");

                entity.Property(e => e.Cauditpersoncode)
                    .HasMaxLength(50)
                    .HasColumnName("cauditpersoncode");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("cstatusname");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dauditdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dauditdate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.FlagName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flag_name");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.IsCj).HasColumnName("is_cj");

                entity.Property(e => e.IsMerge)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("is_merge");

                entity.Property(e => e.IsMergename)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("is_mergename");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.Shifts)
                    .HasMaxLength(20)
                    .HasColumnName("SHIFTS");

                entity.Property(e => e.Smttype)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("smttype");

                entity.Property(e => e.Smttypeint)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("smttypeint");

                entity.Property(e => e.SpecialOut)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("special_out");

                entity.Property(e => e.StartDates)
                    .HasColumnType("datetime")
                    .HasColumnName("START_DATES");

                entity.Property(e => e.Typename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VOutassitDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_outassit_detail");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Coutasnid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("inum");
            });

            modelBuilder.Entity<VOutassitDetailErp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_outassit_detail_erp");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Coutasnid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Erpline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("erpline");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("inum");
            });

            modelBuilder.Entity<VOutbill>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTBILL");

                entity.Property(e => e.Bccode)
                    .HasMaxLength(20)
                    .HasColumnName("bccode");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutasnid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.CstatusName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cstatus_name");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Debitowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("debitowner");

                entity.Property(e => e.Debittime)
                    .HasColumnType("datetime")
                    .HasColumnName("debittime");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Operationtype).HasColumnName("operationtype");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("otype");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");

                entity.Property(e => e.Typename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VOutbillDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_outbill_detail");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Coutasnid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("inum");

                entity.Property(e => e.Outbillqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("outbillqty");
            });

            modelBuilder.Entity<VOutbillDetailErp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_outbill_detail_erp");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Coutasnid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("erpcode");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("inum");

                entity.Property(e => e.Outbillqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("outbillqty");
            });

            modelBuilder.Entity<VOutbillReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTBILL_REPORT");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(100)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("otype");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VOutbillSn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTBILL_SN");

                entity.Property(e => e.Allqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("ALLQTY");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Furnaceno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("furnaceno");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastvpdowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastvpdowner");

                entity.Property(e => e.Lastvpdtime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastvpdtime");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.OutbillDIds)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outbill_d_ids");

                entity.Property(e => e.OutbillId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outbill_id");

                entity.Property(e => e.Outbilltype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("outbilltype");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity");

                entity.Property(e => e.Rulecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RULECODE");

                entity.Property(e => e.ScanIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("scan_ids");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype");

                entity.Property(e => e.Vendorcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("vendorcode");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("worktype")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VOutbilledit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTBILLEdit");

                entity.Property(e => e.BCcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bCCODE");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(50)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Cclient)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cclient");

                entity.Property(e => e.Cclientcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cclientcode");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutasnid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("coutasnid");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Debitowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("debitowner");

                entity.Property(e => e.Debittime)
                    .HasColumnType("datetime")
                    .HasColumnName("debittime");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("otype");

                entity.Property(e => e.Outasnno)
                    .HasMaxLength(20)
                    .HasColumnName("OUTASNNO");

                entity.Property(e => e.SpecialOut)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("special_out");
            });

            modelBuilder.Entity<VOutmixedD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTMIXED_D");

                entity.Property(e => e.Cdefiend1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND1");

                entity.Property(e => e.Cdefiend2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND2");

                entity.Property(e => e.Cdefiend3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND3");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CINVBARCODE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Creatertime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATERTIME");

                entity.Property(e => e.Createruser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATERUSER");

                entity.Property(e => e.Createrusername)
                    .HasMaxLength(100)
                    .HasColumnName("CREATERUSERName");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.Outcticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTCTICKETCODE");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QTY");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");
            });

            modelBuilder.Entity<VOutmixedJfDetialsDList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTMIXED_JF_Detials_D_List");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CINVBARCODE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Mixedcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("MIXEDCODE");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OTYPE");

                entity.Property(e => e.Otypename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("OTYPENAME");

                entity.Property(e => e.Rownum).HasColumnName("ROWNUM");

                entity.Property(e => e.Sumqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("SUMQTY");
            });

            modelBuilder.Entity<VOutmixedJfDetialsList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTMIXED_JF_Detials_List");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CINVBARCODE");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Mixedcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("MIXEDCODE");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OTYPE");

                entity.Property(e => e.Otypename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("OTYPENAME");

                entity.Property(e => e.Rownum).HasColumnName("ROWNUM");

                entity.Property(e => e.Sumqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("SUMQTY");
            });

            modelBuilder.Entity<VOutmixedJfList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_OUTMIXED_JF_List");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Kjfqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("KJFQTY");

                entity.Property(e => e.Kmixedqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("KMIXEDQTY");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OTYPE");

                entity.Property(e => e.Otypename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("OTYPENAME");

                entity.Property(e => e.Rownum).HasColumnName("ROWNUM");

                entity.Property(e => e.Sumqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("SUMQTY");

                entity.Property(e => e.Wmixedqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("WMIXEDQTY");

                entity.Property(e => e.Ymixedqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("YMIXEDQTY");
            });

            modelBuilder.Entity<VPandianreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PANDIANReport");

                entity.Property(e => e.Ccheckname)
                    .HasMaxLength(30)
                    .HasColumnName("ccheckname");

                entity.Property(e => e.Checktype)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("checktype");

                entity.Property(e => e.ChecktypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("checktypeName");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Dcheckdate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("dcheckdate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("id");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VPartInfoBasePart>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PartInfo_BasePart");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("IDS");
            });

            modelBuilder.Entity<VPartInfoInAsnD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PartInfo_InAsn_D");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDS");
            });

            modelBuilder.Entity<VPartInfoOutAsnD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PartInfo_OutAsn_D");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDS");
            });

            modelBuilder.Entity<VPartInfoWip>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PartInfo_WIP");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("IDS");
            });

            modelBuilder.Entity<VPartListByArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PartList_ByArea");

                entity.Property(e => e.AreaCode)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("area_code");

                entity.Property(e => e.AreaName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("area_name");

                entity.Property(e => e.Calias)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpartname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpartname");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Sumqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("sumqty");
            });

            modelBuilder.Entity<VPartListByWareHouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PartList_ByWareHouse");

                entity.Property(e => e.AreaCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("area_code");

                entity.Property(e => e.AreaName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("area_name");

                entity.Property(e => e.Calias)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpartname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpartname");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Sumqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("sumqty");
            });

            modelBuilder.Entity<VPartunionbom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PARTUNIONBOM");

                entity.Property(e => e.Cpartname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CPARTNAME");

                entity.Property(e => e.Cpartnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CPARTNUMBER");

                entity.Property(e => e.Ctype)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CTYPE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");
            });

            modelBuilder.Entity<VPdaAllocateD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_Allocate_D");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.CriticalPart)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CRITICAL_PART");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Ctopositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CTOPOSITIONCODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("IQUANTITY");

                entity.Property(e => e.Synum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("SYnum");

                entity.Property(e => e.Yjnum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("YJnum");
            });

            modelBuilder.Entity<VPdaAllocateEditShow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_ALLOCATE_EditShow");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Ctopositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CTOPOSITIONCODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("IQUANTITY");

                entity.Property(e => e.Synum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("SYnum");

                entity.Property(e => e.Yjsl)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("YJsl");
            });

            modelBuilder.Entity<VPdaAllocateList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_AllocateList");

                entity.Property(e => e.Allotype)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ALLOTYPE");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("CCREATEOWNERCODE");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Coperatorname)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COPERATORNAME");

                entity.Property(e => e.CriticalPart)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CRITICAL_PART");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Dcreatetime)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DCREATETIME");

                entity.Property(e => e.FlagName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FLAG_NAME");

                entity.Property(e => e.Special)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("SPECIAL");
            });

            modelBuilder.Entity<VPdaBaseCraneconfigDetiallist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_BASE_CRANECONFIG_DETIALList");

                entity.Property(e => e.Agvsite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AGVSITE");

                entity.Property(e => e.Agvsitetype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("AGVSITETYPE");

                entity.Property(e => e.Craneid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CRANEID");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Defulsite)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEFULSITE");

                entity.Property(e => e.Discontinuetime)
                    .HasColumnType("date")
                    .HasColumnName("DISCONTINUETIME");

                entity.Property(e => e.Discontinueuser)
                    .HasMaxLength(50)
                    .HasColumnName("DISCONTINUEUSER");

                entity.Property(e => e.Flag)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FLAG");

                entity.Property(e => e.Format)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORMAT");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Ids)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.IsDefaultIn)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_DEFAULT_IN");

                entity.Property(e => e.IsOccupy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_OCCUPY");

                entity.Property(e => e.Ismonitor)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ISMONITOR");

                entity.Property(e => e.Iswhole)
                    .HasMaxLength(20)
                    .HasColumnName("ISWHOLE");

                entity.Property(e => e.Monitortype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MONITORTYPE");

                entity.Property(e => e.Plcregion)
                    .HasMaxLength(50)
                    .HasColumnName("PLCREGION");

                entity.Property(e => e.Relationsite)
                    .HasMaxLength(50)
                    .HasColumnName("RELATIONSITE");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Rgvsite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RGVSITE");

                entity.Property(e => e.Siteid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SITEID");

                entity.Property(e => e.Sitename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SITENAME");

                entity.Property(e => e.Sitetype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SITETYPE");

                entity.Property(e => e.Storagesite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STORAGESITE");

                entity.Property(e => e.Storey)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STOREY");

                entity.Property(e => e.Storeylimit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STOREYLIMIT");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATETIME");

                entity.Property(e => e.Updateuser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UPDATEUSER");

                entity.Property(e => e.Yorderby)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("YORDERBY");
            });

            modelBuilder.Entity<VPdaInAsnEmtList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_InAsnEmtList");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("DCREATETIME");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Itype)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("itype");

                entity.Property(e => e.Ownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OWNERCODE");

                entity.Property(e => e.Typename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.Userno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userno");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORKTYPE");

                entity.Property(e => e.WorktypeName)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("worktypeName");
            });

            modelBuilder.Entity<VPdaInBillRevoke>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_InBillRevoke");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Creatertime)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREATERTIME");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("CRITICAL_PART");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Itype)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("itype");

                entity.Property(e => e.Palledcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PALLEDCODE");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORKTYPE");

                entity.Property(e => e.WorktypeName)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("worktypeName");
            });

            modelBuilder.Entity<VPdaInEmtList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_InEmtList");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineId).HasColumnName("LineID");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Statusname)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("STATUSNAME");

                entity.Property(e => e.Surplusqty).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Userno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userno");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORKTYPE");
            });

            modelBuilder.Entity<VPdaInassitAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_Inassit_All");

                entity.Property(e => e.Caccountid)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("caccountid");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("inum");

                entity.Property(e => e.OcriticalPart)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("OCRITICAL_PART");

                entity.Property(e => e.Synum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("synum");

                entity.Property(e => e.Yjnum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("yjnum");
            });

            modelBuilder.Entity<VPdaInemtQueryList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_INEmtQueryList");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Emttime)
                    .HasColumnType("datetime")
                    .HasColumnName("EMTTIME");

                entity.Property(e => e.Emtuserno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMTUSERNO");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Palledcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PALLEDCODE");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("QTY");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE");

                entity.Property(e => e.Statusname)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("STATUSNAME");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("WORKTYPE");

                entity.Property(e => e.Worktypename)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("WORKTYPENAME");
            });

            modelBuilder.Entity<VPdaMergeOutAssitList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_MergeOutAssitList");

                entity.Property(e => e.Asnqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("asnqty");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Itype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("itype");

                entity.Property(e => e.SecCinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sec_cinvcode");

                entity.Property(e => e.Shift)
                    .HasMaxLength(20)
                    .HasColumnName("shift");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date");

                entity.Property(e => e.Tempqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("tempqty");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<VPdaMergeOutBillDeliverList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_MergeOutBillDeliverList");

                entity.Property(e => e.Cerpcode).HasColumnName("cerpcode");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Otype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("otype");

                entity.Property(e => e.Outcticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("outcticketcode");
            });

            modelBuilder.Entity<VPdaOutAssitAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_OutAssit_All");

                entity.Property(e => e.Asncticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("asncticketcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CSPECIFICATIONS");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("inum");

                entity.Property(e => e.Synum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("synum");

                entity.Property(e => e.Yjnum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("yjnum");
            });

            modelBuilder.Entity<VPdaOutAssitList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_OutAssitList");

                entity.Property(e => e.Asnqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("asnqty");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Itype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("itype");

                entity.Property(e => e.SecCinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sec_cinvcode");

                entity.Property(e => e.Shift)
                    .HasMaxLength(20)
                    .HasColumnName("shift");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date");

                entity.Property(e => e.Tempqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("tempqty");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<VPdaOutBillDeliverList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_OutBillDeliverList");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Otype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("otype");

                entity.Property(e => e.Outcticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("outcticketcode");
            });

            modelBuilder.Entity<VPdaOutBillItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_OutBill_Items");

                entity.Property(e => e.Ccjfsl)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ccjfsl");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.Status)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("total");

                entity.Property(e => e.Yfnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("yfnum");

                entity.Property(e => e.Yjfsl)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("yjfsl");
            });

            modelBuilder.Entity<VPdaOutMixedDlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_OutMixed_DList");

                entity.Property(e => e.Agvsite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AGVSite");

                entity.Property(e => e.Calias)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CINVBARCODE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Creatertime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATERTIME");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.FgCinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fg_cinvcode");

                entity.Property(e => e.FgQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("fg_qty");

                entity.Property(e => e.FlagId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("flag_id");

                entity.Property(e => e.FlagName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flag_name");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.Iqty).HasColumnName("IQTY");

                entity.Property(e => e.MixStatusName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mixedcode)
                    .HasMaxLength(50)
                    .HasColumnName("MIXEDCODE");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OTYPE");

                entity.Property(e => e.Outcticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTCTICKETCODE");

                entity.Property(e => e.OutmixedDCstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("outmixed_dCstatus");

                entity.Property(e => e.OutmixedDCstatusName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("outmixed_dCstatusName");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QTY");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Wo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("wo");
            });

            modelBuilder.Entity<VPdaOutMixedList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_OutMixedList");

                entity.Property(e => e.Calias)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Creatertime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATERTIME");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.FgCinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fg_cinvcode");

                entity.Property(e => e.FgQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("fg_qty");

                entity.Property(e => e.FlagId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("flag_id");

                entity.Property(e => e.FlagName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flag_name");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Iqty).HasColumnName("IQTY");

                entity.Property(e => e.Mixedcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("MIXEDCODE");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OTYPE");

                entity.Property(e => e.Outcticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTCTICKETCODE");

                entity.Property(e => e.Wo)
                    .HasMaxLength(100)
                    .HasColumnName("wo");
            });

            modelBuilder.Entity<VPdaQueryInasnd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_QueryINASND");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("inum");

                entity.Property(e => e.Synum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("synum");

                entity.Property(e => e.Yjnum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("yjnum");
            });

            modelBuilder.Entity<VPdaQueryInassit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_QueryINASSIT");

                entity.Property(e => e.Caccountid)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("caccountid");

                entity.Property(e => e.Casnid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("casnid");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cpo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cpo");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("CRITICAL_PART");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Cvender)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cvender");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("DCREATETIME");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.OcriticalPart)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("OCRITICAL_PART");

                entity.Property(e => e.Typecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typecode");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.Userno)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("userno");
            });

            modelBuilder.Entity<VPdaQueryOutAsnd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_QueryOutASND");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CMEMO");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("inum");

                entity.Property(e => e.Synum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("synum");

                entity.Property(e => e.WzyNum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("wzyNum");

                entity.Property(e => e.Yjnum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("yjnum");
            });

            modelBuilder.Entity<VPdaQueryOutAssit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_QueryOutASSIT");

                entity.Property(e => e.Casnid)
                    .HasMaxLength(20)
                    .HasColumnName("casnid");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.CriticalPart)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("CRITICAL_PART");

                entity.Property(e => e.Cso)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cso");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("DCREATETIME");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ITYPE");

                entity.Property(e => e.OcriticalPart)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("OCRITICAL_PART");

                entity.Property(e => e.SecCinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sec_cinvcode");

                entity.Property(e => e.Shift)
                    .HasMaxLength(20)
                    .HasColumnName("SHIFT");

                entity.Property(e => e.SmtType)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Special)
                    .HasMaxLength(50)
                    .HasColumnName("SPECIAL");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<VPdaQueryOutBill>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_QueryOutBill");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("DINDATE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Otype)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("otype");

                entity.Property(e => e.Otypeid)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("otypeid");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");
            });

            modelBuilder.Entity<VPdaQueryTempInBillD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_QueryTEMP_InBill_D");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CSPECIFICATIONS");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype");
            });

            modelBuilder.Entity<VPdaQueryTempOutBillD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_QueryTEMP_OutBill_D");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CSPECIFICATIONS");

                entity.Property(e => e.Datecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("datecode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype");
            });

            modelBuilder.Entity<VPdaStockAlloScanD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_STOCK_ALLO_SCAN_D");

                entity.Property(e => e.Cdatecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("CDATECODE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.Csn)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CSN");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Ctopositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CTOPOSITIONCODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("ID");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IQUANTITY");
            });

            modelBuilder.Entity<VPdaTemporaryAlloList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_TemporaryAlloList");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus).HasColumnName("cstatus");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");
            });

            modelBuilder.Entity<VPdaTemporaryInItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_TemporaryInItems");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineId).HasColumnName("LineID");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<VPdaTemporaryInList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_TemporaryInList");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Itype)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("itype");

                entity.Property(e => e.Statusname)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("statusname");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<VPdaTemporaryOutItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_TemporaryOutItems");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.LineId).HasColumnName("LineID");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<VPdaTemporaryOutList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PDA_TemporaryOutList");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.Statusname)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("statusname");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<VPlcCmdMst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_PLC_CMD_MST");

                entity.Property(e => e.CmdMode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cmdMode");

                entity.Property(e => e.CmdSno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cmdSno");

                entity.Property(e => e.CompleteIndex)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("completeIndex");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Difftimes)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("difftimes");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.LineId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lineID");

                entity.Property(e => e.PositionCode)
                    .HasMaxLength(66)
                    .IsUnicode(false)
                    .HasColumnName("positionCode");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("remark");

                entity.Property(e => e.Result).HasColumnName("result");

                entity.Property(e => e.RunTime).HasColumnName("runTime");

                entity.Property(e => e.Runposition)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("runposition");

                entity.Property(e => e.SiteNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("siteNo");

                entity.Property(e => e.Sjjposition)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SJJposition");

                entity.Property(e => e.TopositionCode)
                    .HasMaxLength(66)
                    .IsUnicode(false)
                    .HasColumnName("topositionCode");
            });

            modelBuilder.Entity<VQueryInpo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_QueryINPO");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(100)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("currency");

                entity.Property(e => e.Define1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("define1");

                entity.Property(e => e.Define2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("define2");

                entity.Property(e => e.Define3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("define3");

                entity.Property(e => e.Define4)
                    .HasColumnType("datetime")
                    .HasColumnName("define4");

                entity.Property(e => e.Define5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("define5");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(100)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Memo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Paymentterm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("paymentterm");

                entity.Property(e => e.Podate)
                    .HasColumnType("datetime")
                    .HasColumnName("podate");

                entity.Property(e => e.Pono)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("pono");

                entity.Property(e => e.Potype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("potype");

                entity.Property(e => e.Shipfrom)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("shipfrom");

                entity.Property(e => e.Shipto)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("shipto");

                entity.Property(e => e.Source)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("source");

                entity.Property(e => e.Status)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("status");

                entity.Property(e => e.Vendorid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("vendorid");

                entity.Property(e => e.Vendorname)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("vendorname");
            });

            modelBuilder.Entity<VQuickMixed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_QuickMIXED");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CINVBARCODE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITION");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Otype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("OTYPE");

                entity.Property(e => e.Otypename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("OTYPENAME");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PALLETCODE");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QTY");
            });

            modelBuilder.Entity<VRationalIssue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_rational_issue");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("inum");

                entity.Property(e => e.Inum1).HasColumnName("inum1");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Odiquantity)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("odiquantity");

                entity.Property(e => e.Oqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("oqty");

                entity.Property(e => e.Tiquantity)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("tiquantity");
            });

            modelBuilder.Entity<VRdInassitlistQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_RD_INASSITListQuery");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("inum");
            });

            modelBuilder.Entity<VScanInAllocateInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ScanInAllocateInfo");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Ctopositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CTOPOSITIONCODE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IQUANTITY");

                entity.Property(e => e.Synum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SYnum");

                entity.Property(e => e.Yjsl).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VScanInAssitInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ScanInAssitInfo");

                entity.Property(e => e.CInvCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cInvCode");

                entity.Property(e => e.CPosition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cPosition");

                entity.Property(e => e.CPositionCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cPositionCode");

                entity.Property(e => e.Caccountid)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("caccountid");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.CriticalPart).HasColumnName("critical_part");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dounted)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("dounted");

                entity.Property(e => e.INum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iNum");
            });

            modelBuilder.Entity<VSeralDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Seral_Details");

                entity.Property(e => e.BillType)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("quantity");
            });

            modelBuilder.Entity<VSerialNumberInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SerialNumberInfo");

                entity.Property(e => e.Ccreateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateuser");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(200)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(40)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Dtype)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dtype");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Serialno)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("serialno");

                entity.Property(e => e.Statusname)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("statusname");

                entity.Property(e => e.Typename)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<VShowSnIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ShowSN_IN");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("SNTYPE");
            });

            modelBuilder.Entity<VShowSnStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ShowSN_Stock");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("sntype");

                entity.Property(e => e.Vendorcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VENDORCODE");
            });

            modelBuilder.Entity<VShowSnsplit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ShowSNSplit");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cpitioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CPITIONCODE");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE");

                entity.Property(e => e.Sntype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("SNTYPE");
            });

            modelBuilder.Entity<VSnItemHeadConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_sn_item_head_config");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(30)
                    .HasColumnName("create_owner");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("date")
                    .HasColumnName("create_time");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cstatus")
                    .IsFixedLength(true);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("id");

                entity.Property(e => e.IsControl)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("is_control");

                entity.Property(e => e.ItemHead)
                    .HasMaxLength(30)
                    .HasColumnName("item_head");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(30)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.LastUpdTime)
                    .HasColumnType("date")
                    .HasColumnName("last_upd_time");
            });

            modelBuilder.Entity<VStockBaseCargospace>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Stock_Base_Cargospace");

                entity.Property(e => e.Calias)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cusetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cusetype");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Cx)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cx");

                entity.Property(e => e.Cy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cy");

                entity.Property(e => e.Cz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cz");

                entity.Property(e => e.Dexpiredate)
                    .HasColumnType("datetime")
                    .HasColumnName("dexpiredate");

                entity.Property(e => e.FlagName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flag_name");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Iheight)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iheight");

                entity.Property(e => e.Ilength)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ilength");

                entity.Property(e => e.Imaxcapacity)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("imaxcapacity");

                entity.Property(e => e.Ipermitmix)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipermitmix");

                entity.Property(e => e.Ipriority)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ipriority");

                entity.Property(e => e.Ivolume)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ivolume");

                entity.Property(e => e.Iwidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iwidth");

                entity.Property(e => e.Warehouseid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");
            });

            modelBuilder.Entity<VStockBilllist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_STOCK_BILLList");

                entity.Property(e => e.Ccheckname)
                    .HasMaxLength(30)
                    .HasColumnName("ccheckname");

                entity.Property(e => e.CheckbillDIds)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("checkbill_d_ids");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Dcheckdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcheckdate");

                entity.Property(e => e.FlagName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flag_name");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");
            });

            modelBuilder.Entity<VStockCheckDiffSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Stock_CheckDiffSearch");

                entity.Property(e => e.Ccheckname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ccheckname");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Checktype)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("checktype");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Dcheckdate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("dcheckdate");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Onedate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("onedate");

                entity.Property(e => e.Onediff)
                    .HasColumnType("decimal(19, 6)")
                    .HasColumnName("onediff");

                entity.Property(e => e.Onename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("onename");

                entity.Property(e => e.Onenum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("onenum");

                entity.Property(e => e.Ptype).HasColumnName("ptype");

                entity.Property(e => e.Twodate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("twodate");

                entity.Property(e => e.Twodiff)
                    .HasColumnType("decimal(19, 6)")
                    .HasColumnName("twodiff");

                entity.Property(e => e.Twoname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("twoname");

                entity.Property(e => e.Twonum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("twonum");
            });

            modelBuilder.Entity<VStockCheckbillD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_stock_checkbill_d");

                entity.Property(e => e.Cbarcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbarcode");

                entity.Property(e => e.Cdatecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdatecode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Iplanin)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iplanin");

                entity.Property(e => e.Iplanout)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iplanout");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.PackgeNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<VStockCheckbillList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_STOCK_CHECKBILL_List");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(20)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccheckname)
                    .HasMaxLength(30)
                    .HasColumnName("ccheckname");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(42)
                    .HasColumnName("CCREATEOWNERCODE");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Checktype)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("checktype");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUSNAME");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcheckdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcheckdate");

                entity.Property(e => e.Dcirclecheckbegindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcirclecheckbegindate");

                entity.Property(e => e.Dcirclecheckenddate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcirclecheckenddate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("id");
            });

            modelBuilder.Entity<VStockCheckbilllist1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_STOCK_CHECKBILLList");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(20)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccheckname)
                    .HasMaxLength(30)
                    .HasColumnName("ccheckname");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(42)
                    .HasColumnName("CCREATEOWNERCODE");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Checktype)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("checktype");

                entity.Property(e => e.Checktypename)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKTYPENAME");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUSNAME");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcheckdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcheckdate");

                entity.Property(e => e.Dcirclecheckbegindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcirclecheckbegindate");

                entity.Property(e => e.Dcirclecheckenddate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcirclecheckenddate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("id");

                entity.Property(e => e.Planname)
                    .HasMaxLength(100)
                    .HasColumnName("planname");

                entity.Property(e => e.Statusf)
                    .HasMaxLength(20)
                    .HasColumnName("statusf");
            });

            modelBuilder.Entity<VStockCheckdbill>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_STOCK_CHECKDBILL");

                entity.Property(e => e.Ccheckname)
                    .HasMaxLength(30)
                    .HasColumnName("ccheckname");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Checktype)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("checktype");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.FlagName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flag_name");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Statusf)
                    .HasMaxLength(20)
                    .HasColumnName("statusf");
            });

            modelBuilder.Entity<VStockCheckedbill>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_stock_checkedbill");

                entity.Property(e => e.Ccheckpersoncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccheckpersoncode");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.CheckbillDIds)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("checkbill_d_ids");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Dcheckdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DCHECKDATE");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("iquantity");
            });

            modelBuilder.Entity<VStockCheckedbillCy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_STOCK_CHECKEDBILL_CY");

                entity.Property(e => e.Ccheckname)
                    .HasMaxLength(30)
                    .HasColumnName("ccheckname");

                entity.Property(e => e.CheckbillDIds)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("checkbill_D_IDS");

                entity.Property(e => e.Checktype)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("CHECKTYPE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Dcheckdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DCHECKDATE");

                entity.Property(e => e.FlagName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flag_name");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("statusName");
            });

            modelBuilder.Entity<VStockCheckedbillList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_STOCK_CHECKEDBILL_LIST");

                entity.Property(e => e.Ccheckpersoncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccheckpersoncode");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");
            });

            modelBuilder.Entity<VStockCurrent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_STOCK_CURRENT");

                entity.Property(e => e.Cdatecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdatecode");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cwarehouse)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.LockNum).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<VStockCurrentAdjustD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_stock_current_adjust_d");

                entity.Property(e => e.Cbarcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cbarcode");

                entity.Property(e => e.Cdatecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdatecode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cunits)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cunits");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Iplanin)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iplanin");

                entity.Property(e => e.Iplanout)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iplanout");

                entity.Property(e => e.Newqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("newqty");

                entity.Property(e => e.Oriqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("oriqty");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Sncode)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");
            });

            modelBuilder.Entity<VStockCurrentAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_STOCK_Current_ALL");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ERPCODE");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");
            });

            modelBuilder.Entity<VStockCurrentList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_STOCK_CURRENT_List");

                entity.Property(e => e.Calias)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cdatecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdatecode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cwarehouse)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Cwarename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ids");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.Locknum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("locknum");

                entity.Property(e => e.PalletCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("pallet_code");

                entity.Property(e => e.Palletcode1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");
            });

            modelBuilder.Entity<VStockDataCodeEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Stock_DataCode_Edit");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(19, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Lockqty)
                    .HasMaxLength(200)
                    .HasColumnName("lockqty");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<VStockDateCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Stock_DateCode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Locktime)
                    .HasColumnType("datetime")
                    .HasColumnName("locktime");

                entity.Property(e => e.Lockuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lockuser");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");
            });

            modelBuilder.Entity<VStockDiffTimeReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_StockDiffTime_Report");

                entity.Property(e => e.Calias)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("calias");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.DiffDays).HasColumnName("diffDays");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Indate)
                    .HasMaxLength(100)
                    .HasColumnName("INdate");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QTY");
            });

            modelBuilder.Entity<VStockElectBinCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_STOCK_ElectBinCard");

                entity.Property(e => e.Cdefaultvendor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CDEFAULTVENDOR");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFINE1");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CSPECIFICATIONS");

                entity.Property(e => e.Cvendor)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("cvendor");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Cwarename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CWARENAME");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("DATECODE");

                entity.Property(e => e.Furnaceno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("furnaceno");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.InBillTypeName)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("inBillTypeName");

                entity.Property(e => e.Leader)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("leader");

                entity.Property(e => e.Productcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCTCODE");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.Stocktype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("STOCKTYPE");
            });

            modelBuilder.Entity<VStockForerp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_STOCK_FORERP");

                entity.Property(e => e.仓库)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.助记码)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.品名)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.数量).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.料号)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.规格)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VStockOccupy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_STOCK_OCCUPY");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Inum)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("inum");

                entity.Property(e => e.Qty).HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<VStockPostiton>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_STOCK_POSTITON");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Ctyename)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctyename");

                entity.Property(e => e.Ctype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ctype");

                entity.Property(e => e.Cwareid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.HasPallet)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("hasPallet");

                entity.Property(e => e.HasPalletname)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("hasPalletname");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.Palletcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");

                entity.Property(e => e.Usage)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("usage");

                entity.Property(e => e.Usagename)
                    .HasMaxLength(51)
                    .IsUnicode(false)
                    .HasColumnName("usagename");

                entity.Property(e => e.Wareid)
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("wareid");
            });

            modelBuilder.Entity<VSumStockcurrent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SUM_STOCKCURRENT");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Sumkc)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("SUMKC");
            });

            modelBuilder.Entity<VSysConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SYS_CONFIG");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.ConfigDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("config_desc");

                entity.Property(e => e.ConfigValue)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("config_value");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastupdateowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateowner");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Memo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("memo");

                entity.Property(e => e.Status)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("status");

                entity.Property(e => e.Statusname)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("statusname");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.TypeMemo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("type_memo");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<VSysLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SYS_LOG");

                entity.Property(e => e.CaseNo)
                    .HasMaxLength(50)
                    .HasColumnName("CaseNO");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateUser).HasMaxLength(50);

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(50)
                    .HasColumnName("ERPCode");

                entity.Property(e => e.ErrorMsg).HasMaxLength(2000);

                entity.Property(e => e.ErrorNumber).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.ModuleType).HasMaxLength(50);

                entity.Property(e => e.ModuleTypeName).HasMaxLength(100);

                entity.Property(e => e.SourceType).HasMaxLength(50);

                entity.Property(e => e.SourceTypeName).HasMaxLength(100);

                entity.Property(e => e.SubModuleType).HasMaxLength(50);

                entity.Property(e => e.SubModuleTypeName).HasMaxLength(100);
            });

            modelBuilder.Entity<VSysParameter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SYS_PARAMETER");

                entity.Property(e => e.FlagGuid)
                    .HasMaxLength(100)
                    .HasColumnName("FLAG_GUID");

                entity.Property(e => e.FlagId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FLAG_ID");

                entity.Property(e => e.FlagName)
                    .HasMaxLength(100)
                    .HasColumnName("FLAG_NAME");

                entity.Property(e => e.FlagType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FLAG_TYPE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.Languageid)
                    .HasMaxLength(100)
                    .HasColumnName("LANGUAGEID");

                entity.Property(e => e.Memo)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("MEMO");

                entity.Property(e => e.Sortid)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("SORTID");
            });

            modelBuilder.Entity<VSystemLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_SystemLog");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Errormsg)
                    .HasMaxLength(2000)
                    .HasColumnName("errormsg");

                entity.Property(e => e.FlagName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("flag_name");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.SovrceNo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sovrce_no");

                entity.Property(e => e.Type)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("type");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<VTempAreaPaetWarehouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_temp_area_paet_warehouse");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");
            });

            modelBuilder.Entity<VTempBaseArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_temp_base_area");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.区域名称)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.备料储位名称)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.备料储位编号)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.是否超发)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VTempBaseClient>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_temp_base_client");

                entity.Property(e => e.Erp编码).HasColumnName("ERP编码");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");
            });

            modelBuilder.Entity<VTempBaseDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_temp_base_department");
            });

            modelBuilder.Entity<VTempBaseLineList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_temp_base_line_list");
            });

            modelBuilder.Entity<VTempBaseStockCurrent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_temp_base_stock_current");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.仓库编码).HasMaxLength(4000);

                entity.Property(e => e.储位编码).HasMaxLength(4000);

                entity.Property(e => e.数量).HasMaxLength(4000);

                entity.Property(e => e.物料编码).HasMaxLength(4000);
            });

            modelBuilder.Entity<VTempBaseVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_temp_base_vendor");

                entity.Property(e => e.Erp编码).HasColumnName("ERP编码");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ids");
            });

            modelBuilder.Entity<VTempInMoInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TEMP_IN_MO_INFO");

                entity.Property(e => e.工单号).IsRequired();

                entity.Property(e => e.工单量).IsRequired();
            });

            modelBuilder.Entity<VTempOutbillDCinT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_temp_outbill_d_cin_t");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("iquantity");
            });

            modelBuilder.Entity<VTempOutbillDCinTErpcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_temp_outbill_d_cin_t_erpcode");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("iquantity");
            });

            modelBuilder.Entity<VTemporaryAreaCinvReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TemporaryAreaCinv_Report");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cycle)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Lkdate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LKDate");

                entity.Property(e => e.WarningDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VTradetype>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TRADETYPE");

                entity.Property(e => e.Cerpcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Enable)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ENABLE");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Inoroutname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INOROUTNAME");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasColumnName("REMARK");

                entity.Property(e => e.T)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Tradetypeid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADETYPEID");

                entity.Property(e => e.Typeid)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TYPEID");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<VUserDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("V_User_Dept");

                entity.Property(e => e.Deptname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("deptname");

                entity.Property(e => e.Deptno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("deptno");

                entity.Property(e => e.Fatherno)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("fatherno");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.PEmail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("pEmail");

                entity.Property(e => e.PUserName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("pUserName");

                entity.Property(e => e.PUserNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("pUserNo");

                entity.Property(e => e.Username)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Userno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userno");
            });

            modelBuilder.Entity<VUserFunction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_UserFunction");

                entity.Property(e => e.Extend1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("extend1");

                entity.Property(e => e.Funcname)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("funcname");

                entity.Property(e => e.Funcno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("funcno");

                entity.Property(e => e.Modno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("modno");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Userno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userno");
            });

            modelBuilder.Entity<VWarningstockReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_WARNINGSTOCK_REPORT");

                entity.Property(e => e.Cpartname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpartname");

                entity.Property(e => e.Cpartnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpartnumber");

                entity.Property(e => e.Csafeqty)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("csafeqty");

                entity.Property(e => e.Csafeqtyceiling)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("csafeqtyceiling");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("iqty");

                entity.Property(e => e.Isalarm).HasColumnName("isalarm");
            });

            modelBuilder.Entity<VWcsTaskProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_WCS_TaskProcess");

                entity.Property(e => e.BeginSiteId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cdefiend1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND1");

                entity.Property(e => e.Cdefiend2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND2");

                entity.Property(e => e.Cdefiend3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND3");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.EndSiteId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Packageno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGENO");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Sourcecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SOURCECODE");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Steps).HasColumnName("STEPS");

                entity.Property(e => e.Tasktype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TASKTYPE");

                entity.Property(e => e.Updatedtime)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATEDTIME");
            });

            modelBuilder.Entity<VWmsAndEbsQtyDiffReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_WmsAndEbsQtyDiffReport");

                entity.Property(e => e.Cpartname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cpartname");

                entity.Property(e => e.Cpartnumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cpartnumber");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("create_time");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.DiscrepencyQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("discrepency_qty");

                entity.Property(e => e.EbsStockQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ebs_stock_qty");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Positionid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("positionid");

                entity.Property(e => e.Warehouseid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("warehouseid");

                entity.Property(e => e.WmsStockQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("wms_stock_qty");
            });

            modelBuilder.Entity<ViewGetCargoRma>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_get_cargo_rma");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(150)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cpositionname)
                    .HasMaxLength(500)
                    .HasColumnName("cpositionname");
            });

            modelBuilder.Entity<ViewGetFirstdatecode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_get_firstdatecode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Datecode)
                    .HasMaxLength(72)
                    .IsUnicode(false)
                    .HasColumnName("datecode");

                entity.Property(e => e.Synum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("synum");
            });

            modelBuilder.Entity<ViewGetHandoverCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_get_handover_check");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.CheckQty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("check_qty");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.HandQty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("hand_qty");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.NocheckQty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("nocheck_qty");

                entity.Property(e => e.NohandQty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("nohand_qty");

                entity.Property(e => e.OutQty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("out_qty");

                entity.Property(e => e.QtyDemand)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty_demand");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");
            });

            modelBuilder.Entity<ViewGetPalorcarQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_get_palorcar_qty");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.Snno)
                    .HasMaxLength(200)
                    .HasColumnName("SNNo");
            });

            modelBuilder.Entity<ViewGetPalorcarType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_get_palorcar_type");

                entity.Property(e => e.Snno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SNNo");

                entity.Property(e => e.Sntype).HasColumnName("SNType");
            });

            modelBuilder.Entity<ViewGetPartNorecode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_get_part_norecode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.Typename)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");
            });

            modelBuilder.Entity<ViewGetPcCinvcount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_get_pc_cinvcount");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Snno)
                    .HasMaxLength(50)
                    .HasColumnName("SNNo");
            });

            modelBuilder.Entity<ViewGetSnLocklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_get_sn_locklist");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.Weeks)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("weeks");
            });

            modelBuilder.Entity<ViewGetSnX>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_get_sn_x");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .HasColumnName("sncode");
            });

            modelBuilder.Entity<ViewGetSnlistReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_get_snlist_report");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OutQty)
                    .HasMaxLength(200)
                    .HasColumnName("out_qty");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sn_code");

                entity.Property(e => e.Weeks)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("weeks");
            });

            modelBuilder.Entity<ViewGetStockDatecodenum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_get_stock_datecodenum");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("datecode");

                entity.Property(e => e.OutNum).HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ViewInbillSnreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_inbill_snreport");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITION");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.Cwareid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CWAREID");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("DATECODE");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("DINDATE");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("QTY");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SNCODE");

                entity.Property(e => e.Weeks)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("weeks");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<ViewInventoryTurnin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_inventory_turnin");

                entity.Property(e => e.Cinpersoncode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cinpersoncode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("datecode");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sncode");

                entity.Property(e => e.Stype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("stype");

                entity.Property(e => e.Stypename)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("stypename");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Weeks)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("weeks");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<ViewOutbillSnreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_outbill_snreport");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CERPCODE");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITION");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.Cwareid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CWAREID");

                entity.Property(e => e.Datecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DATECODE");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("DINDATE");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("QTY");

                entity.Property(e => e.Sncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SNCODE");

                entity.Property(e => e.Weeks)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("weeks");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<ViewOutbilledit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OUTBILLEdit");

                entity.Property(e => e.AsrsStatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_status");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Coutpersoncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coutpersoncode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cspecifications)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cspecifications");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Deliveriesqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("deliveriesqty");

                entity.Property(e => e.Doutdate)
                    .HasColumnType("datetime")
                    .HasColumnName("doutdate");

                entity.Property(e => e.Handoverqty)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("handoverqty");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Isgoback)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("isgoback");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.Lineid).HasColumnName("lineid");
            });

            modelBuilder.Entity<ViewPositionNostocklistLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_position_nostocklist_line");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Line)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("line");
            });

            modelBuilder.Entity<ViewPositionStockLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_position_stock_line");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Line)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("line");

                entity.Property(e => e.StockRatio).HasMaxLength(21);
            });

            modelBuilder.Entity<ViewPositionStockRatio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_position_stock_ratio");

                entity.Property(e => e.AreaName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("area_name");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.StockRatio).HasMaxLength(21);
            });

            modelBuilder.Entity<ViewStockCheckbillD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_STOCK_CHECKBILL_D");

                entity.Property(e => e.Cauditperson)
                    .HasMaxLength(100)
                    .HasColumnName("cauditperson");

                entity.Property(e => e.Ccheckname)
                    .HasMaxLength(30)
                    .HasColumnName("ccheckname");

                entity.Property(e => e.Ccreateownercode)
                    .HasMaxLength(100)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Checktype)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("checktype");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUSNAME");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Daudittime)
                    .HasColumnType("datetime")
                    .HasColumnName("daudittime");

                entity.Property(e => e.Dcheckdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcheckdate");

                entity.Property(e => e.Dcirclecheckbegindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcirclecheckbegindate");

                entity.Property(e => e.Dcirclecheckenddate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcirclecheckenddate");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("id");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<ViewStockCheckdiff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_stock_checkdiff");

                entity.Property(e => e.Ccheckname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ccheckname");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Cwareid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cwareid");

                entity.Property(e => e.Cwarename)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Dcheckdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dcheckdate");

                entity.Property(e => e.Ddefine3)
                    .HasMaxLength(50)
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Isadjust)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("isadjust");

                entity.Property(e => e.Onedate)
                    .HasColumnType("datetime")
                    .HasColumnName("onedate");

                entity.Property(e => e.Onediff)
                    .HasColumnType("decimal(19, 6)")
                    .HasColumnName("onediff");

                entity.Property(e => e.Onename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("onename");

                entity.Property(e => e.Onenum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("onenum");

                entity.Property(e => e.Twodate)
                    .HasColumnType("datetime")
                    .HasColumnName("twodate");

                entity.Property(e => e.Twodiff)
                    .HasColumnType("decimal(19, 6)")
                    .HasColumnName("twodiff");

                entity.Property(e => e.Twoname)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("twoname");

                entity.Property(e => e.Twonum)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("twonum");
            });

            modelBuilder.Entity<ViewStockCurrent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_stock_current");

                entity.Property(e => e.Cdatecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cdatecode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cwarehouse)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehouse");

                entity.Property(e => e.Cwarehousecode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarehousecode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Ioccupyqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ioccupyqty");

                entity.Property(e => e.Iqty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iqty");

                entity.Property(e => e.LockNum).HasColumnType("numeric(1, 1)");

                entity.Property(e => e.Palletcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("palletcode");
            });

            modelBuilder.Entity<ViewTransactionSn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_transaction_sn");

                entity.Property(e => e.Cerpcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cerpcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CINVCODE");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CINVNAME");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITION");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("CPOSITIONCODE");

                entity.Property(e => e.Createowner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CREATEOWNER");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Ctoposition)
                    .HasMaxLength(100)
                    .HasColumnName("CTOPOSITION");

                entity.Property(e => e.Ctopositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("CTOPOSITIONCODE");

                entity.Property(e => e.Datecode)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("DATECODE");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.SnCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SN_CODE");

                entity.Property(e => e.Stype)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STYPE");

                entity.Property(e => e.Stypename)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("stypename");

                entity.Property(e => e.Typecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typecode");

                entity.Property(e => e.Typename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("typename");

                entity.Property(e => e.Weeks)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("weeks");

                entity.Property(e => e.WorkTypeName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("workTypeName");

                entity.Property(e => e.Worktype)
                    .HasMaxLength(50)
                    .HasColumnName("worktype");
            });

            modelBuilder.Entity<WarnCargoMail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WARN_CARGO_MAIL");

                entity.Property(e => e.Cargocode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cargocode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine3");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser")
                    .HasDefaultValueSql("('admin')");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Lastupdatedate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatedate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser")
                    .HasDefaultValueSql("('admin')");

                entity.Property(e => e.Mail)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("mail");

                entity.Property(e => e.Personliable)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("personliable");

                entity.Property(e => e.Warehousename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("warehousename");

                entity.Property(e => e.Waretypename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("waretypename");
            });

            modelBuilder.Entity<WarnPartShelflife>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WARN_PART_SHELFLIFE");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(200)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine3");

                entity.Property(e => e.Cinvend)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvend");

                entity.Property(e => e.Cinvlength)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cinvlength");

                entity.Property(e => e.Cinvstart)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvstart");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser")
                    .HasDefaultValueSql("('admin')");

                entity.Property(e => e.Cshelflife)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cshelflife");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Lastupdatedate)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatedate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser")
                    .HasDefaultValueSql("('admin')");
            });

            modelBuilder.Entity<WarnTempStockInfo>(entity =>
            {
                entity.ToTable("WARN_TEMP_STOCK_INFO");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .HasColumnName("id");

                entity.Property(e => e.Cargocode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cargocode");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cdefine3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine3");

                entity.Property(e => e.Cinvcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Createdate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdate");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createuser");

                entity.Property(e => e.Cshelflife)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("cshelflife");

                entity.Property(e => e.Cwarecode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarecode");

                entity.Property(e => e.Cwarename)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cwarename");

                entity.Property(e => e.Datecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("datecode");

                entity.Property(e => e.Dayspast)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("dayspast");

                entity.Property(e => e.Qty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("qty");

                entity.Property(e => e.Senddate)
                    .HasColumnType("datetime")
                    .HasColumnName("senddate");
            });

            modelBuilder.Entity<WcsTaskProcess>(entity =>
            {
                entity.ToTable("WCS_TaskProcess");

                entity.HasIndex(e => e.Createtime, "IDX_WCS_TaskProcess_CREATETIME");

                entity.HasIndex(e => e.Createuser, "IDX_WCS_TaskProcess_CREATEUSER");

                entity.HasIndex(e => e.Cstatus, "IDX_WCS_TaskProcess_CSTATUS");

                entity.HasIndex(e => e.Cticketcode, "IDX_WCS_TaskProcess_CTICKETCODE")
                    .IsUnique();

                entity.HasIndex(e => e.Packageno, "IDX_WCS_TaskProcess_PACKAGENO");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Cdefiend1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND1");

                entity.Property(e => e.Cdefiend2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND2");

                entity.Property(e => e.Cdefiend3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND3");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CTICKETCODE");

                entity.Property(e => e.Packageno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PACKAGENO");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("REMARK");

                entity.Property(e => e.Sourcecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SOURCECODE");

                entity.Property(e => e.Steps).HasColumnName("STEPS");

                entity.Property(e => e.Tasktype)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TASKTYPE");

                entity.Property(e => e.Updatedtime)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATEDTIME");
            });

            modelBuilder.Entity<WcsTaskProcessD>(entity =>
            {
                entity.HasKey(e => e.Ids)
                    .HasName("PK__WCS_Task__C4971C3BA90B590C");

                entity.ToTable("WCS_TaskProcess_D");

                entity.Property(e => e.Ids)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDS");

                entity.Property(e => e.Asrsid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ASRSID");

                entity.Property(e => e.Cdefiend1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND1");

                entity.Property(e => e.Cdefiend2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND2");

                entity.Property(e => e.Cdefiend3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDEFIEND3");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATETIME");

                entity.Property(e => e.Createuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREATEUSER");

                entity.Property(e => e.Cstatus)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CSTATUS");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.Loc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LOC");

                entity.Property(e => e.Machine)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MACHINE");

                entity.Property(e => e.Newloc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEWLOC");

                entity.Property(e => e.Steps)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("steps");

                entity.Property(e => e.Updatedtime)
                    .HasColumnType("datetime")
                    .HasColumnName("UPDATEDTIME");
            });

            modelBuilder.Entity<WcsagvcallBackNotice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WCSAGVCallBackNotice");

                entity.Property(e => e.Areacode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("areacode")
                    .HasComment("货架所在区域编号");

                entity.Property(e => e.Clientcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("clientcode")
                    .HasComment("客户端编号");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime")
                    .HasComment("创建日期");

                entity.Property(e => e.Currentpositioncode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("currentpositioncode")
                    .HasComment("当前位置编号");

                entity.Property(e => e.Data)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("data")
                    .HasComment("自定义字段");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasComment("主键");

                entity.Property(e => e.Interfacename)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("interfacename")
                    .HasComment("TCP 协议必传，REST 协议不用传， 传了也不影响");

                entity.Property(e => e.Materiallot)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("materiallot")
                    .HasComment("物料批次");

                entity.Property(e => e.Method)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("method")
                    .HasComment("方法名, 可使用任务类型做为方法名由 RCS任务模板配置后并告知上层系统");

                entity.Property(e => e.Podcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("podcode")
                    .HasComment("货架编号");

                entity.Property(e => e.Reqcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("reqcode")
                    .HasComment("请求编号");

                entity.Property(e => e.Reqtime)
                    .HasColumnType("datetime")
                    .HasColumnName("reqtime")
                    .HasComment("请求时间戳");

                entity.Property(e => e.Taskcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("taskcode")
                    .HasComment("当前任务单号");

                entity.Property(e => e.Tokencode)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("tokencode")
                    .HasComment("令牌号");

                entity.Property(e => e.Wbcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wbcode")
                    .HasComment("工作位，与 RCS 端配置的位置名称一致");
            });

            modelBuilder.Entity<WipClPartinfo>(entity =>
            {
                entity.ToTable("WIP_CL_PARTINFO");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Partstr)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("partstr");
            });

            modelBuilder.Entity<WipClPartinfoBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WIP_CL_PARTINFO_BAK");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Partstr)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("partstr");
            });

            modelBuilder.Entity<WipDiscreteJobsV>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WIP_DISCRETE_JOBS_V");

                entity.Property(e => e.IsCompleteFlag)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("is_complete_flag");

                entity.Property(e => e.ItemDescription)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("item_description");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("item_id");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("item_name");

                entity.Property(e => e.OpenQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("open_quantity");

                entity.Property(e => e.ProcessQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("process_qty");

                entity.Property(e => e.QuantityCompleted)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("quantity_completed");

                entity.Property(e => e.StartQuantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("start_quantity");

                entity.Property(e => e.WipEntityId)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("wip_entity_id");

                entity.Property(e => e.WipEntityName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("wip_entity_name");
            });

            modelBuilder.Entity<WipReturnErrorerpcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WIP_RETURN_ERRORERPCODE");

                entity.Property(e => e.Erpcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("erpcode");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("error_msg");
            });

            modelBuilder.Entity<WipnegativeissueTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WIPNEGATIVEISSUE_TEMP");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.InventoryItemId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("inventory_item_id");

                entity.Property(e => e.QuantityIssued)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("quantity_issued");

                entity.Property(e => e.WipEntityId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("wip_entity_id");

                entity.Property(e => e.WipEntityName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("wip_entity_name");
            });

            modelBuilder.Entity<Wipreturninfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WIPRETURNINFO");

                entity.HasIndex(e => new { e.Erpcode, e.Cinvcode }, "INDEX_ERP_ITEM");

                entity.Property(e => e.Bonded)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("bonded")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Erpcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("erpcode");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");
            });

            modelBuilder.Entity<WmsTableRelation>(entity =>
            {
                entity.HasKey(e => e.TableId)
                    .HasName("PK_WTR_TID");

                entity.ToTable("WMS_TABLE_RELATION");

                entity.Property(e => e.TableId)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("table_id");

                entity.Property(e => e.ChildTableId)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("child_table_id");

                entity.Property(e => e.HisTable)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("his_table");

                entity.Property(e => e.Reservefield1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservefield1");

                entity.Property(e => e.Reservefield2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservefield2");

                entity.Property(e => e.Reservefield3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("reservefield3");

                entity.Property(e => e.Seq)
                    .HasColumnType("decimal(2, 0)")
                    .HasColumnName("seq")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TableName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("table_name");
            });

            modelBuilder.Entity<WmsYd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WMS_YD");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Ctopositioncode)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("ctopositioncode");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Tyww)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("tyww");
            });

            modelBuilder.Entity<WriteBackTimeSet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WRITE_BACK_TIME_SET");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.CreateOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("create_owner");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.ExchangeTime)
                    .HasColumnType("datetime")
                    .HasColumnName("exchange_time");

                entity.Property(e => e.ExpirationTime)
                    .HasColumnType("datetime")
                    .HasColumnName("expiration_time");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.LastUpdDate)
                    .HasColumnType("datetime")
                    .HasColumnName("last_upd_date");

                entity.Property(e => e.LastUpdOwner)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("last_upd_owner");

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("transaction_type");

                entity.Property(e => e.Type)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<Zsict1User>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZSICT1_USER");

                entity.Property(e => e.Blob1)
                    .HasColumnType("image")
                    .HasColumnName("blob1");

                entity.Property(e => e.Blob2)
                    .HasColumnType("image")
                    .HasColumnName("blob2");

                entity.Property(e => e.Blob3)
                    .HasColumnType("image")
                    .HasColumnName("blob3");

                entity.Property(e => e.Blob4)
                    .HasColumnType("image")
                    .HasColumnName("blob4");

                entity.Property(e => e.Blob5)
                    .HasColumnType("image")
                    .HasColumnName("blob5");

                entity.Property(e => e.Company)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("company");

                entity.Property(e => e.Comptype)
                    .HasColumnType("decimal(10, 0)")
                    .HasColumnName("comptype");

                entity.Property(e => e.Ddomain)
                    .HasColumnType("decimal(10, 0)")
                    .HasColumnName("ddomain");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.EmpId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("emp_id");

                entity.Property(e => e.Extend1)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("extend1");

                entity.Property(e => e.Extend10)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("extend10");

                entity.Property(e => e.Extend11)
                    .HasColumnType("date")
                    .HasColumnName("extend11");

                entity.Property(e => e.Extend12)
                    .HasColumnType("date")
                    .HasColumnName("extend12");

                entity.Property(e => e.Extend13)
                    .HasColumnType("date")
                    .HasColumnName("extend13");

                entity.Property(e => e.Extend14)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("extend14");

                entity.Property(e => e.Extend15)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("extend15");

                entity.Property(e => e.Extend16)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("extend16");

                entity.Property(e => e.Extend17)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("extend17");

                entity.Property(e => e.Extend18)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("extend18");

                entity.Property(e => e.Extend2)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("extend2");

                entity.Property(e => e.Extend3)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("extend3");

                entity.Property(e => e.Extend4)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("extend4");

                entity.Property(e => e.Extend5)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("extend5");

                entity.Property(e => e.Extend6)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("extend6");

                entity.Property(e => e.Extend7)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("extend7");

                entity.Property(e => e.Extend8)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("extend8");

                entity.Property(e => e.Extend9)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("extend9");

                entity.Property(e => e.Filename4Blob1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("filename_4_blob1");

                entity.Property(e => e.Filename4Blob2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("filename_4_blob2");

                entity.Property(e => e.Filename4Blob3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("filename_4_blob3");

                entity.Property(e => e.Filename4Blob4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("filename_4_blob4");

                entity.Property(e => e.Filename4Blob5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("filename_4_blob5");

                entity.Property(e => e.Flag)
                    .HasColumnType("decimal(10, 0)")
                    .HasColumnName("flag");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastmodifieder)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastmodifieder");

                entity.Property(e => e.Lastmodifiedtime)
                    .HasColumnType("date")
                    .HasColumnName("lastmodifiedtime");

                entity.Property(e => e.LoginGuid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("login_guid");

                entity.Property(e => e.LoginTime)
                    .HasColumnType("date")
                    .HasColumnName("login_time");

                entity.Property(e => e.MimeType4Blob1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mime_type_4_blob1");

                entity.Property(e => e.MimeType4Blob2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mime_type_4_blob2");

                entity.Property(e => e.MimeType4Blob3)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mime_type_4_blob3");

                entity.Property(e => e.MimeType4Blob4)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mime_type_4_blob4");

                entity.Property(e => e.MimeType4Blob5)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("mime_type_4_blob5");

                entity.Property(e => e.Password)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("password");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("remark");

                entity.Property(e => e.Rootdept)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("rootdept");

                entity.Property(e => e.Sex)
                    .HasColumnType("decimal(10, 0)")
                    .HasColumnName("sex");

                entity.Property(e => e.Type)
                    .HasColumnType("decimal(10, 0)")
                    .HasColumnName("type");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Userno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userno");
            });

            modelBuilder.HasSequence("ASRS_cmdno_SEQ")
                .HasMin(1)
                .HasMax(99999999999999999)
                .IsCyclic();

            modelBuilder.HasSequence("ASRS_CmdSno_RGV_A")
                .HasMin(1)
                .HasMax(24999)
                .IsCyclic();

            modelBuilder.HasSequence("ASRS_CmdSno_RGV_B")
                .HasMin(1)
                .HasMax(24999)
                .IsCyclic();

            modelBuilder.HasSequence("ASRS_CmdSno_RGV_C")
                .HasMin(1)
                .HasMax(24999)
                .IsCyclic();

            modelBuilder.HasSequence("ASRS_SEQ")
                .StartsAt(1301)
                .HasMin(1)
                .HasMax(99999999999999999)
                .IsCyclic();

            modelBuilder.HasSequence("ASRS_SNO_SEQ")
                .StartsAt(1003)
                .HasMin(1003)
                .HasMax(24999)
                .IsCyclic();

            modelBuilder.HasSequence("ASRS_WmsTskId_RGV")
                .HasMin(1)
                .HasMax(99999999999999999)
                .IsCyclic();

            modelBuilder.HasSequence("SEQ_DATABASEERROR");

            modelBuilder.HasSequence("SEQ_SERIAL_NO").IsCyclic();

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}