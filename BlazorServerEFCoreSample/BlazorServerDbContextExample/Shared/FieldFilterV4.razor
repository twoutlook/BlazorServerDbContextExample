@using System.Timers
@inject IJSRuntime JSRuntime
@inject IContactFiltersV4 Filters
@implements IDisposable
<style>
    .grid-container {
        display: inline-grid;
        grid-template-columns: auto auto auto auto auto auto;
        background-color: #2196F3;
        padding: 10px;
    }

    .grid-item {
        background-color: rgba(255, 255, 255, 0.8);
        border: 1px solid rgba(0, 0, 0, 0.8);
        padding: 20px;
        font-size: 30px;
        text-align: center;
    }

    /*https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout*/
    .wrapper {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        /*grid-template-columns: 200px 200px 200px;*/
    }

    .wrapper2 {
        display: grid;
        grid-template-columns: 1fr,400px;
        /*grid-template-columns: 200px 200px 200px;*/
    }

    .lbl {
        border-radius: 4px;
        margin-left: 8px;
        text-align: right;
        background-color: lightgray;
        /*margin-right:4px;*/
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .btngrid {
        margin-left: 8px;
        /*text-align: left;*/
        /*background-color: lightgray;*/
        /*margin-right:4px;*/
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .txt {
        /*border-radius: 5px;*/
        margin-left: 0px;
        margin-top: 2px;
        margin-bottom: 2px;
    }
</style>

<div class="wrapper">
    <div class="lbl">姓&nbsp;</div>
    <div class="txt"> <input type="text" autofocus @bind="FilterTextF1" /></div>
    <div class="lbl">名&nbsp;</div>
    <div class="txt"> <input type="text" autofocus @bind="F2" /></div>
    <div class="lbl">地址&nbsp;</div>
    <div class="txt"> <input type="text" autofocus @bind="F3" /></div>
    <div class="lbl">(保留)&nbsp;</div>
    <div class="txt"> <input type="text" autofocus @bind="F4" /></div>

    <div class="lbl">姓姓姓姓姓&nbsp;</div>
    <div class="txt"> <input type="text" autofocus @bind="F5" /></div>
    <div class="lbl">名&nbsp;</div>
    <div class="txt"> <input type="text" autofocus @bind="F6" /></div>
    <div class="lbl">地址&nbsp;</div>
    <div class="txt"> <input type="text" autofocus @bind="F7" /></div>
    <div class="lbl">(保留)&nbsp;</div>
    <div class="txt"> <input type="text" autofocus @bind="F8" /></div>
</div>
<div class="wrapper">
    <div class="btngrid">
        <button class="btn btn-primary " @onclick="UpdateHeading">
            查詢
        </button>
    </div>
    <div class="txt">DEBUG: @F1 @F2 @F3 @F4 @F5 @F6 @F7 @F8  </div>
</div>





@code {

    private async void UpdateHeading(MouseEventArgs e)
    {
        //Console.WriteLine("My debug output.");
        // await JSRuntime.InvokeVoidAsync("alert", "XXXXX");

        Filters.FilterColumn = ContactFilterColumnsV4.Phone;
        Filters.FilterText = F1.Trim();
        //    Filters.FilterLastName = filterLastName.Trim();


        await InvokeAsync(() => Wrapper.FilterChanged.InvokeAsync(this));


    }


    /// <summary>
    /// Get a reference to the global <see cref="GridWrapper"/>.
    /// </summary>
    [CascadingParameter]
    public GridWrapper Wrapper { get; set; }

    /// <summary>
    /// Wait period in (ms) after the user stops typing.
    /// </summary>
    const int DebounceMs = 300;

    /// <summary>
    /// Timer for debounce.
    /// </summary>
    Timer timer;

    /// <summary>
    /// When ready.
    /// </summary>
    protected override void OnInitialized()
    {
        // grab filter
        filterText = Filters.FilterText;

        // grab column to filter on
        selectedColumn = (int)(Filters.FilterColumn);

        base.OnInitialized();
    }

    /// <summary>
    /// Sets selected attribute.
    /// </summary>
    /// <param name="column">The <see cref="ContactFilterColumns"/> being evaluated.</param>
    /// <returns>The proper attribute to select the option.</returns>
    private IEnumerable<KeyValuePair<string, object>> Selected(ContactFilterColumnsV4 column)
    {
        if ((int)column == selectedColumn)
        {
            return new[] { new KeyValuePair<string, object>("selected", (object)"selected") };
        }
        return Enumerable.Empty<KeyValuePair<string, object>>();
    }

    private int selectedColumn;

    /// <summary>
    /// Column to filter on.
    /// </summary>
    private int SelectedColumn
    {
        get => selectedColumn;
        set
        {
            if (value != selectedColumn)
            {
                selectedColumn = value;
                Filters.FilterColumn = (ContactFilterColumnsV4)selectedColumn;
                FilterText = string.Empty;
            }
        }
    }

    private string F1;
    private string F2;
    private string F3;
    private string F4;
    private string F5;
    private string F6;
    private string F7;
    private string F8;







    private string filterText;


    private string filterPhone;

    // NOTE by Mark, 2021-01-12
    private string filterLastName;
    private string FilterLastName
    {
        get => filterLastName;
        set
        {
            if (value != filterLastName)
            {
                filterLastName = value;
                // more text means restart the debounce timer
                if (timer != null)
                {
                    timer.Dispose();
                }
                timer = new Timer(DebounceMs);
                timer.Elapsed += NotifyTimerElapsed;
                timer.Enabled = true;
            }
        }
    }

    private string FilterPhone
    {
        get => filterPhone;
        set
        {
            if (value != filterPhone)
            {
                filterPhone = value;
                CheckPhoneChanged();
                // more text means restart the debounce timer
                //if (timer != null)
                //{
                //    timer.Dispose();
                //}
                //timer = new Timer(DebounceMs);
                //timer.Elapsed += NotifyTimerElapsed;
                //timer.Enabled = true;
            }
        }
    }

    private async void CheckPhoneChanged()
    {
        //if (Filters.FilterText != filterText)
        if (3 == (1 + 2))
        {
            // notify the controls
            Filters.FilterColumn = ContactFilterColumnsV4.Phone;
            Filters.FilterText = filterPhone.Trim();
            //    Filters.FilterLastName = filterLastName.Trim();


            await InvokeAsync(() => Wrapper.FilterChanged.InvokeAsync(this));
        }
    }

    /// <summary>
    /// Text to filter on.
    /// </summary>
    private string FilterText
    {
        get => filterText;
        set
        {
            if (value != filterText)
            {
                filterText = value;
                // more text means restart the debounce timer
                if (timer != null)
                {
                    timer.Dispose();
                }
                timer = new Timer(DebounceMs);
                timer.Elapsed += NotifyTimerElapsed;
                timer.Enabled = true;
            }
        }
    }



    private string FilterTextF1
    {
        get => F1;
        set
        {
            if (value != F1)
            {
                F1 = value;
                Filters.FilterTextF1 = F1;
            }
        }
    }


    private string xxxFilterPhone
    {
        get => filterPhone;
        set
        {
            if (value != filterPhone)
            {
                filterPhone = value;
                // more text means restart the debounce timer
                if (timer != null)
                {
                    timer.Dispose();
                }
                timer = new Timer(DebounceMs);
                timer.Elapsed += NotifyTimerElapsed;
                timer.Enabled = true;
            }
        }
    }

    /// <summary>
    /// Fired after debounce time.
    /// </summary>
    /// <param name="sender">Timer.</param>
    /// <param name="e">Event args.</param>
    private async void NotifyTimerElapsed(object sender, ElapsedEventArgs e)
    {
        timer.Dispose();
        timer = null;
        if (Filters.FilterText != filterText)
        {
            // notify the controls
            Filters.FilterText = filterText.Trim();
            //    Filters.FilterLastName = filterLastName.Trim();


            await InvokeAsync(() => Wrapper.FilterChanged.InvokeAsync(this));
        }
        //if (Filters.FilterLastName != filterLastName)
        //{
        //    // notify the controls
        //    Filters.FilterLastName = filterLastName.Trim();
        //    //    Filters.FilterLastName = filterLastName.Trim();


        //    await InvokeAsync(() => Wrapper.FilterChanged.InvokeAsync(this));
        //}


    }

    /// <summary>
    /// Disposable pattern - override to dispose any ticking timers.
    /// </summary>
    /// <param name="disposing"><c>True</c> when disposing.</param>
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
            timer = null;
        }
    }
}
