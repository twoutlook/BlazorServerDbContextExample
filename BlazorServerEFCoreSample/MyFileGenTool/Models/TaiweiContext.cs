// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace MyFileGenTool.Models
{
    public partial class TaiweiContext : DbContext
    {
        public TaiweiContext()
        {
        }

        public TaiweiContext(DbContextOptions<TaiweiContext> options)
            : base(options)
        {
        }

        public virtual DbSet<V2Outasn> V2Outasn { get; set; }
        public virtual DbSet<V2Outbill> V2Outbill { get; set; }
        public virtual DbSet<V2OutbillD> V2OutbillD { get; set; }
        public virtual DbSet<V2StockCurrentAdjust> V2StockCurrentAdjust { get; set; }
        public virtual DbSet<V2ViewDef> V2ViewDef { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=MARK10\\SQLEXPRESS01;Initial Catalog=TaiWei;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Chinese_PRC_CI_AS");

            modelBuilder.Entity<V2Outasn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_OUTASN");

                entity.Property(e => e.Ccreateownercode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownercode");

                entity.Property(e => e.Ccreateownername)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownername");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cstatusname");

                entity.Property(e => e.Cticketcode)
                    .HasMaxLength(20)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Dcreatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("dcreatetime");

                entity.Property(e => e.Itype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("itype");

                entity.Property(e => e.Reasoncode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("reasoncode");

                entity.Property(e => e.Typename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TYPENAME");
            });

            modelBuilder.Entity<V2Outbill>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_OUTBILL");

                entity.Property(e => e.Ccreateownername)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ccreateownername");

                entity.Property(e => e.Coutasn)
                    .HasMaxLength(20)
                    .HasColumnName("coutasn");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cstatusname");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Debittime)
                    .HasColumnType("datetime")
                    .HasColumnName("debittime");

                entity.Property(e => e.Dindate)
                    .HasColumnType("datetime")
                    .HasColumnName("dindate");

                entity.Property(e => e.Outtype)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("outtype");
            });

            modelBuilder.Entity<V2OutbillD>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_OUTBILL_D");

                entity.Property(e => e.AllocateDIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("allocate_d_ids");

                entity.Property(e => e.Allotype)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("allotype");

                entity.Property(e => e.AsnDIds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("asn_d_ids");

                entity.Property(e => e.AsrsNum)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_num");

                entity.Property(e => e.AsrsStatus)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("asrs_status");

                entity.Property(e => e.Callocateid)
                    .HasMaxLength(50)
                    .HasColumnName("callocateid");

                entity.Property(e => e.Cdefine1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine1");

                entity.Property(e => e.Cdefine2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cdefine2");

                entity.Property(e => e.Cerpcodeline)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cerpcodeline");

                entity.Property(e => e.Cinvbarcode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cinvbarcode");

                entity.Property(e => e.Cinvcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cinvcode");

                entity.Property(e => e.Cinvname)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cinvname");

                entity.Property(e => e.Cmemo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cmemo");

                entity.Property(e => e.Cnewpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cnewpositioncode");

                entity.Property(e => e.Coutpersoncode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("coutpersoncode");

                entity.Property(e => e.Cposition)
                    .HasMaxLength(100)
                    .HasColumnName("cposition");

                entity.Property(e => e.Cpositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cpositioncode");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstoppositioncode)
                    .HasMaxLength(100)
                    .HasColumnName("cstoppositioncode");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Ddefine3)
                    .HasColumnType("datetime")
                    .HasColumnName("ddefine3");

                entity.Property(e => e.Ddefine4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ddefine4");

                entity.Property(e => e.Doutdate)
                    .HasColumnType("datetime")
                    .HasColumnName("doutdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Idefine5)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("idefine5");

                entity.Property(e => e.Ids)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ids");

                entity.Property(e => e.Ioutasnline)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ioutasnline");

                entity.Property(e => e.Iquantity)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("iquantity");

                entity.Property(e => e.Isgoback)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("isgoback");

                entity.Property(e => e.LineQty)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("line_qty");

                entity.Property(e => e.Lineid).HasColumnName("lineid");

                entity.Property(e => e.Outasndlineid).HasColumnName("outasndlineid");

                entity.Property(e => e.PalletCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("pallet_code");

                entity.Property(e => e.PartBond)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("part_bond");

                entity.Property(e => e.Sourcecode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("sourcecode");

                entity.Property(e => e.Wire)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wire");

                entity.Property(e => e.Wmstskid)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("wmstskid");

                entity.Property(e => e.Wo)
                    .HasMaxLength(100)
                    .HasColumnName("wo");
            });

            modelBuilder.Entity<V2StockCurrentAdjust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V2_STOCK_CURRENT_ADJUST");

                entity.Property(e => e.Createowner)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("createowner");

                entity.Property(e => e.Createownername)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("createownername");

                entity.Property(e => e.Createtime)
                    .HasColumnType("datetime")
                    .HasColumnName("createtime");

                entity.Property(e => e.Cstatus)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cstatus");

                entity.Property(e => e.Cstatusname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cstatusname");

                entity.Property(e => e.Cticketcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cticketcode");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.Lastupdatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastupdatetime");

                entity.Property(e => e.Lastupdateuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lastupdateuser");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("reason");

                entity.Property(e => e.Reviewtime)
                    .HasColumnType("datetime")
                    .HasColumnName("reviewtime");

                entity.Property(e => e.Reviewuser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("reviewuser");
            });

            modelBuilder.Entity<V2ViewDef>(entity =>
            {
                entity.HasKey(e => e.ViewInfo);

                entity.ToTable("V2_ViewDef");

                entity.Property(e => e.ViewInfo)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.HasSequence("ASRS_cmdno_SEQ")
                .HasMin(1)
                .HasMax(99999999999999999)
                .IsCyclic();

            modelBuilder.HasSequence("ASRS_CmdSno_RGV_A")
                .HasMin(1)
                .HasMax(24999)
                .IsCyclic();

            modelBuilder.HasSequence("ASRS_CmdSno_RGV_B")
                .HasMin(1)
                .HasMax(24999)
                .IsCyclic();

            modelBuilder.HasSequence("ASRS_CmdSno_RGV_C")
                .HasMin(1)
                .HasMax(24999)
                .IsCyclic();

            modelBuilder.HasSequence("ASRS_SEQ")
                .StartsAt(1301)
                .HasMin(1)
                .HasMax(99999999999999999)
                .IsCyclic();

            modelBuilder.HasSequence("ASRS_SNO_SEQ")
                .StartsAt(1003)
                .HasMin(1003)
                .HasMax(24999)
                .IsCyclic();

            modelBuilder.HasSequence("ASRS_WmsTskId_RGV")
                .HasMin(1)
                .HasMax(99999999999999999)
                .IsCyclic();

            modelBuilder.HasSequence("SEQ_DATABASEERROR");

            modelBuilder.HasSequence("SEQ_SERIAL_NO").IsCyclic();

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}